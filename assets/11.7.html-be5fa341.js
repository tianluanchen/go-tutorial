import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as i,a as s,b as n,d as t,w as p,e as o}from"./app-9da01d16.js";const l={},k=o(`<h1 id="_11-7-第一个例子-使用-sorter-接口排序" tabindex="-1"><a class="header-anchor" href="#_11-7-第一个例子-使用-sorter-接口排序" aria-hidden="true">#</a> 11.7 第一个例子：使用 Sorter 接口排序</h1><p>一个很好的例子是来自标准库的 <code>sort</code> 包，要对一组数字或字符串排序，只需要实现三个方法：反映元素个数的 <code>Len()</code> 方法、比较第 <code>i</code> 和 <code>j</code> 个元素的 <code>Less(i, j)</code> 方法以及交换第 <code>i</code> 和 <code>j</code> 个元素的 <code>Swap(i, j)</code> 方法。</p><p>排序函数的算法只会使用到这三个方法（可以使用任何排序算法来实现，此处我们使用冒泡排序）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Sort</span><span class="token punctuation">(</span>data Sorter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> pass <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> pass <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pass<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> pass<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Sort</code> 函数接收一个接口类型的参数：<code>Sorter</code> ，它声明了这些方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Sorter <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
    <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数中的 <code>int</code> 是待排序序列长度的类型，而不是说要排序的对象一定要是一组 <code>int</code>。<code>i</code> 和 <code>j</code> 表示元素的整型索引，长度也是整型的。</p><p>现在如果我们想对一个 <code>int</code> 数组进行排序，所有必须做的事情就是：为数组定一个类型并在它上面实现 <code>Sorter</code> 接口的方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> IntArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是调用排序函数的一个具体例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">9845</span><span class="token punctuation">,</span> <span class="token number">959</span><span class="token punctuation">,</span> <span class="token number">905</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">7586</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5467984</span><span class="token punctuation">,</span> <span class="token number">7586</span><span class="token punctuation">}</span>
a <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">IntArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//conversion to type IntArray from package sort</span>
sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的、可运行的代码可以在 <a href="examples/chapter_11/sort/sort.go">sort.go</a> 和 <a href="examples/chapter_11/sortmain.go">sortmain.go</a> 里找到。</p><p>同样的原理，排序函数可以用于一个浮点型数组，一个字符串数组，或者一个表示每周各天的结构体 <code>dayArray</code>。</p><p>示例 11.6 <a href="examples/chapter_11/sort/sort.go">sort.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> sort

<span class="token keyword">type</span> Sorter <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	<span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Sort</span><span class="token punctuation">(</span>data Sorter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> pass <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> pass <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pass<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>pass<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				data<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">IsSorted</span><span class="token punctuation">(</span>data Sorter<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	n <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">// Convenience types for common cases</span>
<span class="token keyword">type</span> IntArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p IntArray<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token keyword">type</span> StringArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p StringArray<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p StringArray<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p StringArray<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token comment">// Convenience wrappers for common cases</span>
<span class="token keyword">func</span> <span class="token function">SortInts</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">IntArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">SortStrings</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">StringArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">IntsAreSorted</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>       <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">IsSorted</span><span class="token punctuation">(</span><span class="token function">IntArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">StringsAreSorted</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">IsSorted</span><span class="token punctuation">(</span><span class="token function">StringArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 11.7 <a href="examples/chapter_11/sortmain.go">sortmain.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;./sort&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">9845</span><span class="token punctuation">,</span> <span class="token number">959</span><span class="token punctuation">,</span> <span class="token number">905</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">7586</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5467984</span><span class="token punctuation">,</span> <span class="token number">7586</span><span class="token punctuation">}</span>
	a <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">IntArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//conversion to type IntArray</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>sort<span class="token punctuation">.</span><span class="token function">IsSorted</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;fails&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The sorted array is: %v\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">strings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;monday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;friday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tuesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wednesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sunday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;thursday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;saturday&quot;</span><span class="token punctuation">}</span>
	a <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">StringArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>sort<span class="token punctuation">.</span><span class="token function">IsSorted</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The sorted array is: %v\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> day <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	num       <span class="token builtin">int</span>
	shortName <span class="token builtin">string</span>
	longName  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> dayArray <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>day
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>dayArray<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>           <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>dayArray<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>dayArray<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">days</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Sunday    <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;SUN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">}</span>
	Monday    <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;MON&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">}</span>
	Tuesday   <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;TUE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">}</span>
	Wednesday <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;WED&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">}</span>
	Thursday  <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;THU&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">}</span>
	Friday    <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;FRI&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">}</span>
	Saturday  <span class="token operator">:=</span> day<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;SAT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">}</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>day<span class="token punctuation">{</span><span class="token operator">&amp;</span>Tuesday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Thursday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Wednesday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Sunday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Monday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Friday<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Saturday<span class="token punctuation">}</span>
	a <span class="token operator">:=</span> dayArray<span class="token punctuation">{</span>data<span class="token punctuation">}</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>sort<span class="token punctuation">.</span><span class="token function">IsSorted</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>longName<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">strings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">days</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>The sorted array is: [-5467984 -784 0 0 42 59 74 238 905 959 7586 7586 9845]
The sorted array is: [ friday monday saturday sunday thursday tuesday wednesday]
Sunday Monday Tuesday Wednesday Thursday Friday Saturday 
</code></pre><p><strong>备注</strong>：</p>`,20),r=s("code",null,'panic("fail")',-1),d=s("code",null,"os.Exit(1)",-1),v=o(`<p>上面的例子帮助我们进一步了解了接口的意义和使用方式。对于基本类型的排序，标准库已经提供了相关的排序函数，所以不需要我们再重复造轮子了。对于一般性的排序，<code>sort</code> 包定义了一个接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	<span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
	<span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口总结了需要用于排序的抽象方法，函数 <code>Sort(data Interface)</code> 用来对此类对象进行排序，可以用它们来实现对其他类型的数据（非基本类型）进行排序。在上面的例子中，我们也是这么做的，不仅可以对 <code>int</code> 和 <code>string</code> 序列进行排序，也可以对用户自定义类型 <code>dayArray</code> 进行排序。</p><p><strong>练习 11.5</strong> <a href="exercises/chapter_11/interfaces_ext.go">interfaces_ext.go</a>：</p><p>a). 继续扩展程序，定义类型 <code>Triangle</code>，让它实现 <code>AreaInterface</code> 接口。通过计算一个特定三角形的面积来进行测试（三角形面积=0.5 * (底 * 高)）</p><p>b). 定义一个新接口 <code>PeriInterface</code>，它有一个 <code>Perimeter</code> 方法。让 <code>Square</code> 实现这个接口，并通过一个 <code>Square</code> 示例来测试它。</p><p><strong>练习 11.6</strong> <a href="exercises/chapter_11/point_interfaces.go">point_interfaces.go</a>：</p>`,7),m=s("a",{href:"exercises/chapter_10/point_methods.go"},"point_methods.go",-1),b=s("code",null,"Magnitude",-1),y=s("code",null,"Abs()",-1),f=s("code",null,"Point",-1),g=s("code",null,"Point3",-1),h=s("code",null,"Polar",-1),w=o('<p><strong>练习 11.7</strong> <a href="exercises/chapter_11/float_sort.go">float_sort.go</a> / <a href="exercises/chapter_11/float_sortmain.go">float_sortmain.go</a>：</p><p>类似 11.7 和示例 11.3/4，定义一个包 <code>float64</code>，并在包里定义类型 <code>Float64Array</code>，然后让它实现 <code>Sorter</code> 接口用来对 <code>float64</code> 数组进行排序。</p><p>另外提供如下方法：</p>',3),_=s("code",null,"NewFloat64Array()",-1),q=s("code",null,"List()",-1),S=s("code",null,"String()",-1),A=s("code",null,"List()",-1),j=s("code",null,"Fill()",-1),x=o('<p>在主程序中新建一个此类型的变量，然后对它排序并进行测试。</p><p><strong>练习 11.8</strong> <a href="exercises/chapter_11/sort/sort.go">sort.go</a> / <a href="exercises/chapter_11/sort_persons.go">sort_persons.go</a>：</p><p>定义一个结构体 <code>Person</code>，它有两个字段：<code>firstName</code> 和 <code>lastName</code>，为 <code>[]Person</code> 定义类型 <code>Persons</code> 。让 <code>Persons</code> 实现 <code>Sorter</code> 接口并进行测试。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>',4);function L(I,T){const a=c("RouterLink");return u(),i("div",null,[k,s("p",null,[r,n(" 用于停止处于在非正常情况下的程序（详细请参考"),t(a,{to:"/the-way-to-go/13.0.html"},{default:p(()=>[n("第 13 章")]),_:1}),n("），当然也可以先打印一条信息，然后调用 "),d,n(" 来停止程序。")]),v,s("p",null,[n("继续 "),t(a,{to:"/the-way-to-go/10.3.html"},{default:p(()=>[n("10.3")]),_:1}),n(" 中的练习 "),m,n("，定义接口 "),b,n("，它有一个方法 "),y,n("。让 "),f,n("、"),g,n(" 及 "),h,n(" 实现此接口。通过接口类型变量使用方法做 point.go 中同样的事情。")]),w,s("ul",null,[s("li",null,[_,n("：创建一个包含 25 个元素的数组变量（参考 "),t(a,{to:"/the-way-to-go/10.2.html"},{default:p(()=>[n("10.2")]),_:1}),n(" ）")]),s("li",null,[q,n("：返回数组格式化后的字符串，并在 "),S,n(" 方法中调用它，这样就不用显式地调用 "),A,n(" 来打印数组（参考 "),t(a,{to:"/the-way-to-go/10.7.html"},{default:p(()=>[n("10.7")]),_:1}),n("）")]),s("li",null,[j,n("：创建一个包含 10 个随机浮点数的数组（参考 "),t(a,{to:"/the-way-to-go/04.5.html"},{default:p(()=>[n("4.5.2.6")]),_:1}),n("）")])]),x,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:p(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/11.6.html"},{default:p(()=>[n("使用方法集与接口")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/11.8.html"},{default:p(()=>[n("第二个例子：读和写")]),_:1})])])])}const F=e(l,[["render",L],["__file","11.7.html.vue"]]);export{F as default};
