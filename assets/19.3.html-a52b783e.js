import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as u,c as i,a as s,b as n,d as a,w as t,e as o}from"./app-9da01d16.js";const d={},r=o('<h1 id="版本-1-数据结构和前端界面" tabindex="-1"><a class="header-anchor" href="#版本-1-数据结构和前端界面" aria-hidden="true">#</a> 版本 1 - 数据结构和前端界面</h1><p>第 1 个版本的代码 <em>goto_v1</em> 见 <a href="examples/chapter_19/goto_v1">goto_v1</a>。</p><h1 id="_19-3-数据结构" tabindex="-1"><a class="header-anchor" href="#_19-3-数据结构" aria-hidden="true">#</a> 19.3 数据结构</h1><p>（本节代码见 <a href="examples/chapter_19/goto_v1/store.go">goto_v1/store.go</a>。）</p>',4),k=s("em",null,"映射",-1),v=s("p",null,[n("Go 语言就有这种内建的映射 (map)："),s("code",null,"map[string]string"),n("。")],-1),m=s("code",null,"[",-1),g=s("code",null,"]",-1),h=s("code",null,"type",-1),b=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> URLStore <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它从短 URL 映射到长 URL，两者都是字符串。</p><p>要创建那种类型的变量，并命名为 <code>m</code>，使用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>URLStore<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),_={href:"http://goto/a",target:"_blank",rel:"noopener noreferrer"},f={href:"http://google.com/",target:"_blank",rel:"noopener noreferrer"},y=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;http://google.com/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),R={href:"http://goto/",target:"_blank",rel:"noopener noreferrer"},L=o(`<p>要获得给定 &quot;a&quot; 对应的长 URL，可以这么写：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>url <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时 <code>url</code> 的值等于 <code>http://google.com/</code>。</p><p>注意，使用了 <code>:=</code> 就不需要指明 url 的类型为 <code>string</code>，编译器会从右侧的值中推断出来。</p><h2 id="使程序线程安全" tabindex="-1"><a class="header-anchor" href="#使程序线程安全" aria-hidden="true">#</a> 使程序线程安全</h2>`,5),U=s("code",null,"URLStore",-1),w=s("code",null,"Redirect",-1),S=s("code",null,"Add",-1),x=s("code",null,"URLStore",-1),q=s("code",null,"map",-1),G=s("code",null,"map",-1),N=s("code",null,"URLStore",-1),C=s("code",null,"sync",-1),A=s("code",null,"Mutex",-1),B=s("code",null,"URLStore",-1),M=s("code",null,"map",-1),V=s("code",null,"sync",-1),E=s("code",null,"RWMutex",-1),K=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;sync&quot;</span>
<span class="token keyword">type</span> URLStore <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	urls <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>		<span class="token comment">// map from short to long URLs</span>
	mu sync<span class="token punctuation">.</span>RWMutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RWMutex</code> 有两种锁：分别对应读和写。多个客户端可以同时设置读锁，但只有一个客户端可以设置写锁（以排除所有的读锁），有效地串行化变更，使他们按顺序生效。</p><p>我们将在 <code>Get()</code> 函数中实现 <code>Redirect</code> 服务的读请求，在 <code>Set</code> 函数中实现 <code>Add</code> 服务的写请求。<code>Get()</code> 函数类似下面这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	url <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> url
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),W=s("code",null,"URLStore",-1),I=s("code",null,"s.mu.RLock()",-1),P=s("code",null,".",-1),J=s("code",null,"s",-1),T=s("code",null,"mu",-1),j=s("code",null,"RLock()",-1),z=o(`<p><code>Set()</code> 函数同时需要 URL 的键值对，且必须放置写锁 <code>Lock()</code> 来排除同一时刻任何其他更新操作。函数返回布尔值 <code>true</code> 或 <code>false</code> 来表示 <code>Set()</code> 操作是否成功：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> present <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> url
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>形式 <code>_, present := s.urls[key]</code> 可以测试 <code>map</code> 中是否已经包含该键，包含则 <code>present</code> 为 <code>true</code>，否则为 <code>false</code>。这种形式称为“逗号 ok 模式”，在 Go 代码中会频繁出现。如果键已存在，<code>Set()</code> 函数直接返回布尔值 <code>false</code>，<code>map</code> 不会被更新（这样可以保证短 URL 不会重复）。如果键不存在，把它加入 <code>map</code> 中并返回 <code>true</code>。左侧 <code>_</code> 是一个值的占位符，赋值给 <code>_</code> 来表明我们不会使用它。注意在更新后尽早调用 <code>Unlock()</code> 来释放对 <code>URLStore</code> 的锁定。</p><h2 id="使用-defer-简化代码" tabindex="-1"><a class="header-anchor" href="#使用-defer-简化代码" aria-hidden="true">#</a> 使用 defer 简化代码</h2>`,4),D=s("code",null,"Unlock()",-1),F=s("code",null,"defer",-1),H=s("code",null,"Lock()",-1),O=s("code",null,"Unlock()",-1),Q=s("code",null,"Unlock()",-1),X=o(`<p><code>Get()</code> 可以简化成以下代码（我们消除了本地变量 <code>url</code>）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Set()</code> 的逻辑在某种程度上也变得清晰了（我们不用再考虑解锁的事了）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	<span class="token keyword">if</span> present <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> url
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="urlstore-工厂函数" tabindex="-1"><a class="header-anchor" href="#urlstore-工厂函数" aria-hidden="true">#</a> URLStore 工厂函数</h2><p><code>URLStore()</code> 结构体中包含 <code>map</code> 类型的字段，使用前必须先用 <code>make()</code> 初始化。在 Go 中创建一个结构体实例，一般是通过定义一个前缀为 <code>New</code>，能返回该类型已初始化实例的函数（通常是指向实例的指针）。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>URLStore <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>URLStore<span class="token punctuation">{</span> urls<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>return</code> 语句中，创建了 <code>URLStore</code> 字面量实例，其中包含初始化了的 <code>map</code> 映射。锁无需特别指明初始化，这是 Go 创建结构体实例的惯例。<code>&amp;</code> 是取址运算符，它将我们要返回的内容变成指针，因为 <code>NewURLStore()</code> 返回类型是 <code>*URLStore</code>。然后调用该函数来创建 <code>URLStore</code> 变量：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用-urlstore" tabindex="-1"><a class="header-anchor" href="#使用-urlstore" aria-hidden="true">#</a> 使用 URLStore</h2><p>要新增一对短/长 URL 到 <code>map</code> 中，我们只需调用 <code>s</code> 上的 <code>Set()</code> 方法，由于返回布尔值，可以把它包裹在 <code>if</code> 语句中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://google.com&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 成功</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要获取给定短 URL 对应的长 URL，调用 <code>s</code> 上的 <code>Get()</code> 方法，将返回值放入变量 <code>url</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> url <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> url <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 重定向到 url</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">// 键未找到</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们利用 Go 语言 <code>if</code> 语句的特性，可以在起始部分、条件判断前放置初始化语句。另外还需要一个 <code>Count()</code> 方法以获取 <code>map</code> 中键值对的数量，可以使用内建的 <code>len()</code> 函数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>urls<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何根据给定的长 URL 计算出短 URL 呢？为此我们创建一个函数 <code>genKey(n int) string {…}</code>，将 <code>s.Count()</code> 的当前值作为其整型参数传入。（具体算法并不重要，示例代码可以在 <a href="examples/chapter_19/goto_v1/key.go">key.go</a> 找到。）</p><p>现在，我们可以创建一个 <code>Put()</code> 方法，接收一个长 URL，用 <code>genKey()</code> 生成其短 URL 键，调用 <code>Set()</code> 方法在此键下存储长 URL 数据，然后返回这个键：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		key <span class="token operator">:=</span> <span class="token function">genKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> key
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// shouldn’t get here</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环会一直尝试调用 <code>Set()</code> 直到成功为止（意味着生成了一个尚未存在的短网址）。现在我们定义好了数据存储，以及配套的可工作的函数（见代码 <a href="examples/chapter_19/goto_v1/store.go">store.go</a>）。但这本身并不能完成任务，我们还需要开发 web 服务器以交付 <code>Add</code> 和 <code>Redirect</code> 服务。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,21);function Y(Z,$){const e=p("RouterLink"),c=p("ExternalLinkIcon");return u(),i("div",null,[r,s("p",null,[n("当程序运行在生产环境时，会收到很多短网址的请求，同时会有一些将长 URL 转换成短 URL 的请求。我们的程序要以什么样的结构存储这些数据呢？"),a(e,{to:"/the-way-to-go/19.2.html"},{default:t(()=>[n("19.2 节")]),_:1}),n("中 (A) 和 (B) 两种 URL 都是字符串，此外，它们相互关联：给定键 (B) 能获取到值 (A)，他们互相"),k,n(" (map)。要将数据存储在内存中，我们需要这种结构，它们几乎存在于所有的编程语言中，只是名称有所不同，例如“哈希表”或“字典”等。")]),v,s("p",null,[n("键的类型写在 "),m,n(" 和 "),g,n(" 之间，紧接着是值的类型。有关映射的所有知识详见 "),a(e,{to:"/the-way-to-go/08.0.html"},{default:t(()=>[n("8 章")]),_:1}),n("。为特定类型指定一个别名在严谨的程序中非常实用。Go 语言中通过关键字 "),h,n(" 来定义，因此有定义：")]),b,s("p",null,[n("假设 "),s("em",null,[s("a",_,[n("http://goto/a"),a(c)])]),n(" 映射到 "),s("em",null,[s("a",f,[n("http://google.com/"),a(c)])]),n(" ，我们要把它们存储到 m 中，可以用如下语句：")]),y,s("p",null,[n("（键只是 "),s("em",null,[s("a",R,[n("http://goto/"),a(c)])]),n(" 的后缀，其前缀总是不变的。）")]),L,s("p",null,[n("这里，变量 "),U,n(" 是中心化的内存存储。当收到网络流量时，会有很多 "),w,n(" 服务的请求。这些请求其实只涉及读操作：以给定的短 URL 作为键，返回对应的长 URL 的值。然而，对 "),S,n(" 服务的请求则大不相同，它们会更改 "),x,n("，添加新的键值对。当在瞬间收到大量更新请求时，可能会产生如下问题：添加操作可能被另一个同类请求打断，写入的长 URL 值可能会丢失；另外，读取和更改同时进行，导致可能读到脏数据。代码中的 "),q,n(" 并不保证当开始更新数据时，会彻底阻止另一个更新操作的启动。也就是说，"),G,n(" 不是线程安全的，goto 会并发地为很多请求提供服务。因此必须使 "),N,n(" 是线程安全的，以便可以从不同的线程访问它。最简单和经典的方法是为其增加一个锁，它是 Go 标准库 "),C,n(" 包中的 "),A,n(" 类型，必须导入到我们的代码中（关于锁详见 "),a(e,{to:"/the-way-to-go/09.3.html"},{default:t(()=>[n("9.3 节")]),_:1}),n("）。")]),s("p",null,[n("现在，我们把 "),B,n(" 类型的定义更改为一个结构体（就是字段的集合，类似 C 或 Java ，"),a(e,{to:"/the-way-to-go/10.0.html"},{default:t(()=>[n("10 章")]),_:1}),n(" 介绍了结构体），它含有两个字段："),M,n(" 和 "),V,n(" 包的 "),E,n("：")]),K,s("p",null,[n("函数按照键（短 URL）返回对应映射后的 URL。它所处理的变量是指针类型（见 "),a(e,{to:"/the-way-to-go/04.9.html"},{default:t(()=>[n("4.9 节")]),_:1}),n("），指向 "),W,n("。但在读取值之前，先用 "),I,n(" 放置一个读锁，这样就不会有更新操作妨碍读取。数据读取后撤销锁定，以便挂起的更新操作可以开始。如果键不存在于 map 中会怎样？会返回字符串的零值（空字符串）。注意点号 ("),P,n(") 类似面向对象的语言：在 "),J,n(" 的 "),T,n(" 字段上调用方法 "),j,n("。")]),z,s("p",null,[n("目前代码还比较简单，容易记得操作完成后调用 "),D,n(" 解锁。然而在代码更复杂时很容易忘记解锁，或者放置在错误的位置，往往导致问题很难追踪。对于这种情况 Go 提供了一个特殊关键字 "),F,n("（见 "),a(e,{to:"/the-way-to-go/06.4.html"},{default:t(()=>[n("6.4 节")]),_:1}),n("）。在本例中，可以在 "),H,n(" 之后立即示意 "),O,n("，不过其效果是 "),Q,n(" 只会在函数返回之前被调用。")]),X,s("ul",null,[s("li",null,[a(e,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(e,{to:"/the-way-to-go/19.2.html"},{default:t(()=>[n("短网址项目简介")]),_:1})]),s("li",null,[n("下一节："),a(e,{to:"/the-way-to-go/19.4.html"},{default:t(()=>[n("用户界面：web 服务端")]),_:1})])])])}const an=l(d,[["render",Y],["__file","19.3.html.vue"]]);export{an as default};
