import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as s,a as e,d as o,w as t,b as a,e as c}from"./app-9da01d16.js";const d="/go-tutorial/assets/navi1-459b8a0d.png?raw=true",h={},u=c('<h1 id="_1-go环境配置" tabindex="-1"><a class="header-anchor" href="#_1-go环境配置" aria-hidden="true">#</a> 1 GO环境配置</h1><p>欢迎来到Go的世界，让我们开始探索吧！</p><p>Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：</p><ul><li>它可以在一台计算机上用几秒钟的时间编译一个大型的Go程序。</li><li>Go为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分C风格include文件与库的开头。</li><li>Go是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上花费时间，这样感觉起来比典型的面向对象语言更轻量级。</li><li>Go完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持。</li><li>按照其设计，Go打算为多核机器上系统软件的构造提供一种方法。</li></ul><p>Go是一种编译型语言，它结合了解释型语言的游刃有余，动态类型语言的开发效率，以及静态类型的安全性。它也打算成为现代的，支持网络与多核计算的语言。要满足这些目标，需要解决一些语言上的问题：一个富有表达能力但轻量级的类型系统，并发与垃圾回收机制，严格的依赖规范等等。这些无法通过库或工具解决好，因此Go也就应运而生了。</p><p>在本章中，我们将讲述Go的安装方法，以及如何配置项目信息。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>',9);function p(_,f){const i=r("RouterLink");return n(),s("div",null,[u,e("ul",null,[e("li",null,[o(i,{to:"/build-web-app/preface.html"},{default:t(()=>[a("目录")]),_:1})]),e("li",null,[a("下一节: "),o(i,{to:"/build-web-app/01.1.html"},{default:t(()=>[a("安装Go")]),_:1})])])])}const b=l(h,[["render",p],["__file","01.0.html.vue"]]);export{b as default};
