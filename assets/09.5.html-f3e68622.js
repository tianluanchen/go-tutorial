import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as d,a as e,b as n,d as o,w as s,e as t}from"./app-9da01d16.js";const l={},r=t(`<h1 id="_9-5-自定义包和可见性" tabindex="-1"><a class="header-anchor" href="#_9-5-自定义包和可见性" aria-hidden="true">#</a> 9.5 自定义包和可见性</h1><p>包是 Go 语言中代码组织和代码编译的主要方式。关于它们的很多基本信息已经在 4.2 章节中给出，最引人注目的便是可见性。现在我们来看看具体如何来使用自己写的包。在下一节，我们将回顾一些标准库中的包，自定义的包和标准库以外的包。</p><p>当写自己包的时候，要使用短小的不含有 <code>_</code>（下划线）的小写单词来为文件命名。这里有个简单例子来说明包是如何相互调用以及可见性是如何实现的。</p><p>当前目录下（examples/chapter_9/book/）有一个名为 package_mytest.go 的程序, 它使用了自定义包 pack1 中 pack1.go 的代码。这段程序（连同编译链接生成的 pack1.a）存放在当前目录下一个名为 pack1 的文件夹下。所以链接器将包的对象和主程序对象链接在一起。</p><p>示例 9.4 <a href="examples/chapter_9/book/pack1/pack1.go">pack1.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> pack1
<span class="token keyword">var</span> Pack1Int <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">var</span> pack1Float <span class="token operator">=</span> <span class="token number">3.14</span>

<span class="token keyword">func</span> <span class="token function">ReturnStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;Hello main!&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它包含了一个整型变量 <code>Pack1Int</code> 和一个返回字符串的函数 <code>ReturnStr</code>。这段程序在运行时不做任何的事情，因为它没有一个 main 函数。</p><p>在主程序 package_mytest.go 中这个包通过声明的方式被导入, 只到包的目录一层。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;./pack1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>import 的一般格式如下:</p><pre><code>import &quot;包的路径或 URL 地址&quot; 
</code></pre><p>例如：</p><pre><code>import &quot;github.com/org1/pack1”
</code></pre><p>路径是指当前目录的相对路径。</p><p>示例 9.5 <a href="examples/chapter_9/book/package_mytest.go">package_mytest.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;./pack1&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> test1 <span class="token builtin">string</span>
	test1 <span class="token operator">=</span> pack1<span class="token punctuation">.</span><span class="token function">ReturnStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnStr from package1: %s\\n&quot;</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Integer from package1: %d\\n&quot;</span><span class="token punctuation">,</span> pack1<span class="token punctuation">.</span>Pack1Int<span class="token punctuation">)</span>
	<span class="token comment">// fmt.Printf(&quot;Float from package1: %f\\n&quot;, pack1.pack1Float)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>ReturnStr from package1: Hello main!
Integer from package1: 42
</code></pre><p>如果包 pack1 和我们的程序在同一路径下，我们可以通过 <code>&quot;import ./pack1&quot;</code> 这样的方式来引入，但这不被视为一个好的方法。</p><p>下面的代码试图访问一个未引用的变量或者函数，甚至没有编译。将会返回一个错误：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Float from package1: %f\\n&quot;</span><span class="token punctuation">,</span> pack1<span class="token punctuation">.</span>pack1Float<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>错误：</p><pre><code>cannot refer to unexported name pack1.pack1Float
</code></pre><p>主程序利用的包必须在主程序编写之前被编译。主程序中每个 pack1 项目都要通过包名来使用：<code>pack1.Item</code>。具体使用方法请参见示例 4.6 和 4.7。</p><p>因此，按照惯例，子目录和包之间有着密切的联系：为了区分，不同包存放在不同的目录下，每个包（所有属于这个包中的 go 文件）都存放在和包名相同的子目录下：</p><p>Import with <code>.</code> :</p><pre><code>import . &quot;./pack1&quot;
</code></pre><p>当使用 <code>.</code> 作为包的别名时，你可以不通过包名来使用其中的项目。例如：<code>test := ReturnStr()</code>。</p><p>在当前的命名空间导入 pack1 包，一般是为了具有更好的测试效果。</p><p>Import with <code>_</code> :</p><pre><code>import _ &quot;./pack1/pack1&quot;
</code></pre><p><code>pack1</code> 包只导入其副作用，也就是说，只执行它的 <code>init()</code> 函数并初始化其中的全局变量。</p><p><strong>导入外部安装包:</strong></p>`,33),u=e("code",null,"go install",-1),k=t(`<p>假设你想使用 <code>http://codesite.ext/author/goExample/goex</code> 这种托管在 Google Code、GitHub 和 Launchpad 等代码网站上的包。</p><p>你可以通过如下命令安装：</p><pre><code>go install codesite.ext/author/goExample/goex
</code></pre><p>将一个名为 <code>codesite.ext/author/goExample/goex</code> 的 map 安装在 <code>$GOROOT/src/</code> 目录下。</p><p>通过以下方式，一次性安装，并导入到你的代码中：</p><pre><code>import goex &quot;codesite.ext/author/goExample/goex&quot;
</code></pre><p>因此该包的 URL 将用作导入路径。</p><p>在 <code>http://golang.org/cmd/goinstall/</code> 的 <code>go install</code> 文档中列出了一些广泛被使用的托管在网络代码仓库的包的导入路径</p><p><strong>包的初始化:</strong></p><p>程序的执行开始于导入包，初始化 <code>main</code> 包然后调用 <code>main()</code> 函数。</p><p>一个没有导入的包将通过分配初始值给所有的包级变量和调用源码中定义的包级 <code>init()</code> 函数来初始化。一个包可能有多个 <code>init()</code> 函数甚至在一个源码文件中。它们的执行是无序的。这是最好的例子来测定包的值是否只依赖于相同包下的其他值或者函数。</p><p><code>init()</code> 函数是不能被调用的。</p><p>导入的包在包自身初始化前被初始化，而一个包在程序执行中只能初始化一次。</p>`,13),g=t(`<pre><code>include $(GOROOT)/src/Make.inc
TARG=pack1
GOFILES=\\
 	pack1.go\\
 	pack1b.go\\
include $(GOROOT)/src/Make.pkg
</code></pre><p>通过 <code>chmod 777 ./Makefile</code> 确保它的可执行性。</p><p>上面脚本内的 <code>include</code> 语句引入了相应的功能，将自动检测机器的架构并调用正确的编译器和链接器。</p><p>然后终端执行 <code>make</code> 或 <code>gomake</code> 工具：他们都会生成一个包含静态库 <code>pack1.a</code> 的 <code>_obj</code> 目录。</p>`,4),m=e("code",null,"pack1.a",-1),h=e("code",null,"$GOROOT/pkg",-1),v=e("code",null,'import "pack1"',-1),_=e("code",null,'import "path to pack1"',-1),f=t('<p><strong>问题 9.1</strong></p><p>a）一个包能分成多个源文件么？</p><p>b）一个源文件是否能包含多个包？</p><p><strong>练习 9.3</strong> <a href="exercises/chapter_9/main_greetings.go">main_greetings.go</a></p><p>创建一个程序 main_greetings.go 能够和用户说 <code>&quot;Good Day&quot;</code> 或者 <code>&quot;Good Night&quot;</code>。不同的问候应该放到单独的 <code>greetings</code> 包中。</p><p>在同一个包中创建一个 <code>IsAM</code> 函数返回一个布尔值用来判断当前时间是 AM 还是 PM，同样创建 <code>IsAfternoon</code> 和 <code>IsEvening</code> 函数。</p><p>使用 main_greetings 作出合适的问候（提示：使用 <code>time</code> 包）。</p><p><strong>练习 9.4</strong> 创建一个程序 <a href="exercises/chapter_9/main_oddeven.go">main_oddven.go</a> 判断前 100 个整数是不是偶数，将判断所用的函数编写在 <code>even</code> 包里。</p>',8),b=e("strong",null,"练习 9.5",-1),q=t('<p>1）将斐波那契功能放入自己的 <code>fibo</code> 包中并通过主程序调用它，存储最后输入的值在函数的全局变量。</p><p>2）扩展 <code>fibo</code> 包将通过调用斐波那契的时候，操作也作为一个参数。实验 <code>&quot;+&quot;</code> 和 <code>&quot;*&quot;</code></p><p><a href="exercises/chapter_9/main_fibo.go">main_fibo.go</a> / <a href="exercises/chapter_6/fibonacci.go">fibonacci.go</a></p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>',4);function x(y,w){const a=c("RouterLink");return i(),d("div",null,[r,e("p",null,[n("如果你要在你的应用中使用一个或多个外部包，首先你必须使用 "),u,n("（参见"),o(a,{to:"/the-way-to-go/09.7.html"},{default:s(()=>[n("第 9.7 节")]),_:1}),n("）在你的本地机器上安装它们。")]),k,e("p",null,[e("strong",null,[n("编译并安装一个包（参见"),o(a,{to:"/the-way-to-go/09.7.html"},{default:s(()=>[n("第 9.7 节")]),_:1}),n("）：")])]),e("p",null,[n("在 Linux/OS X 下可以用类似"),o(a,{to:"/the-way-to-go/03.9.html"},{default:s(()=>[n("第 3.9 节")]),_:1}),n("的 Makefile 脚本做到这一点：")]),g,e("p",null,[n("go install（参见"),o(a,{to:"/the-way-to-go/09.7.html"},{default:s(()=>[n("第 9.7 节")]),_:1}),n("，从 Go1 的首选方式）同样复制 "),m,n(" 到本地的 "),h,n(" 的目录中一个以操作系统为名的子目录下。像 "),v,n(" 代替 "),_,n("，这样只通过名字就可以将包在程序中导入。")]),e("p",null,[n("当"),o(a,{to:"/the-way-to-go/13.0.html"},{default:s(()=>[n("第 13 章")]),_:1}),n(" 我们遇到使用测试工具进行测试的时候我们将重新回到自己的包的制作和编译这个话题。")]),f,e("p",null,[b,n(" 使用"),o(a,{to:"/the-way-to-go/06.6.html"},{default:s(()=>[n("第 6.6 节")]),_:1}),n("的斐波那契程序：")]),q,e("ul",null,[e("li",null,[o(a,{to:"/the-way-to-go/directory.html"},{default:s(()=>[n("目录")]),_:1})]),e("li",null,[n("上一节："),o(a,{to:"/the-way-to-go/09.4.html"},{default:s(()=>[n("精密计算和 big 包")]),_:1})]),e("li",null,[n("下一节："),o(a,{to:"/the-way-to-go/09.6.html"},{default:s(()=>[n("为自定义包使用 godoc")]),_:1})])])])}const G=p(l,[["render",x],["__file","09.5.html.vue"]]);export{G as default};
