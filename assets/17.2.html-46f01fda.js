import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as s,b as n,d as t,w as e,e as o}from"./app-9da01d16.js";const u={},d=s("h1",{id:"_17-2-defer-模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_17-2-defer-模式","aria-hidden":"true"},"#"),n(" 17.2 defer 模式")],-1),r=s("p",null,[n("使用 "),s("code",null,"defer"),n(" 可以确保资源不再需要时，都会被恰当地关闭或归还到“池子”中。更重要的一点是，它可以恢复 panic。")],-1),k=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 先打开一个文件 f</span>
<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={start:"2"},m=s("code",null,"mutex",-1),g=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>关闭一个通道（如有必要）：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ch := make(chan float64)
defer close(ch)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以是两个通道：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>answerα<span class="token punctuation">,</span> answerβ <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">close</span><span class="token punctuation">(</span>answerα<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">close</span><span class="token punctuation">(</span>answerβ<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h={start:"4"},f=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;run time panic: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={start:"5"},b=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>tick1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>updateInterval<span class="token punctuation">)</span>
<span class="token keyword">defer</span> tick1<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w={start:"6"},y=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span>…<span class="token punctuation">,</span> …<span class="token punctuation">,</span> …<span class="token punctuation">)</span>
<span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={start:"7"},P=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然 <code>defer</code> 也可以在打印报表时避免忘记输出页脚。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,3);function C(N,S){const a=c("RouterLink");return l(),i("div",null,[d,r,s("ol",null,[s("li",null,[n("关闭一个文件流：（见 "),t(a,{to:"/the-way-to-go/12.7.html"},{default:e(()=>[n("12.7节")]),_:1}),n("）")])]),k,s("ol",v,[s("li",null,[n("解锁一个被锁定的资源（"),m,n("）：（见 "),t(a,{to:"/the-way-to-go/09.3.html"},{default:e(()=>[n("9.3节")]),_:1}),n("）")])]),g,s("ol",h,[s("li",null,[n("从 panic 恢复：（见 "),t(a,{to:"/the-way-to-go/13.3.html"},{default:e(()=>[n("13.3节")]),_:1}),n("）")])]),f,s("ol",_,[s("li",null,[n("停止一个计时器：（见 "),t(a,{to:"/the-way-to-go/14.5.html"},{default:e(()=>[n("14.5节")]),_:1}),n("）")])]),b,s("ol",w,[s("li",null,[n("释放一个进程 p：（见 "),t(a,{to:"/the-way-to-go/13.6.html"},{default:e(()=>[n("13.6节")]),_:1}),n("）")])]),y,s("ol",x,[s("li",null,[n("停止 CPU 性能分析并立即写入：（见 "),t(a,{to:"/the-way-to-go/13.10.html"},{default:e(()=>[n("13.10节")]),_:1}),n("）")])]),P,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/17.1.html"},{default:e(()=>[n("逗号 ok 模式")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/17.3.html"},{default:e(()=>[n("可见性模式")]),_:1})])])])}const B=p(u,[["render",C],["__file","17.2.html.vue"]]);export{B as default};
