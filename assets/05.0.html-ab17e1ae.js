import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as a,c as i,a as e,b as o,d as l,w as c,e as r}from"./app-9da01d16.js";const s={},_=e("h1",{id:"_5-0-控制结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-0-控制结构","aria-hidden":"true"},"#"),o(" 5.0 控制结构")],-1),u=e("p",null,[o("到目前为止，我们看到的 Go 程序都是从 "),e("code",null,"main()"),o(" 函数开始执行，然后按顺序执行该函数体中的代码。但我们经常会需要只有在满足一些特定情况时才执行某些代码，也就是说在代码里进行条件判断。针对这种需求，Go 提供了下面这些条件结构和分支结构：")],-1),h=e("li",null,[e("code",null,"if"),o("-"),e("code",null,"else"),o(" 结构")],-1),f=e("li",null,[e("code",null,"switch"),o(" 结构")],-1),p=e("code",null,"select",-1),m=r('<p>可以使用迭代或循环结构来重复执行一次或多次某段代码（任务）：</p><ul><li><code>for</code> (<code>range</code>) 结构</li></ul><p>一些如 <code>break</code> 和 <code>continue</code> 这样的关键字可以用于中途改变循环的状态。</p><p>此外，你还可以使用 <code>return</code> 来结束某个函数的执行，或使用 <code>goto</code> 和标签来调整程序的执行位置。</p><p>Go 完全省略了 <code>if</code>、<code>switch</code> 和 <code>for</code> 结构中条件语句两侧的括号，相比 Java、C++ 和 C# 中减少了很多视觉混乱的因素，同时也使你的代码更加简洁。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>',6);function w(x,g){const t=n("RouterLink");return a(),i("div",null,[_,u,e("ul",null,[h,f,e("li",null,[p,o(" 结构，用于 channel 的选择（"),l(t,{to:"/the-way-to-go/14.4.html"},{default:c(()=>[o("第 14.4 节")]),_:1}),o("）")])]),m,e("ul",null,[e("li",null,[l(t,{to:"/the-way-to-go/directory.html"},{default:c(()=>[o("目录")]),_:1})]),e("li",null,[o("上一章："),l(t,{to:"/the-way-to-go/04.9.html"},{default:c(()=>[o("指针")]),_:1})]),e("li",null,[o("下一节："),l(t,{to:"/the-way-to-go/05.1.html"},{default:c(()=>[o("if-else 结构")]),_:1})])])])}const b=d(s,[["render",w],["__file","05.0.html.vue"]]);export{b as default};
