import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,a as n,b as e,d as s,w as a,e as l}from"./app-9da01d16.js";const d={},u=n("h1",{id:"_20-3-安装-go-app-engine-sdk-为-go-部署的开发环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-3-安装-go-app-engine-sdk-为-go-部署的开发环境","aria-hidden":"true"},"#"),e(" 20.3 安装 Go App Engine SDK：为 Go 部署的开发环境")],-1),h=n("h2",{id:"_20-3-1-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_20-3-1-安装","aria-hidden":"true"},"#"),e(" 20.3.1 安装")],-1),g={href:"https://cloud.google.com/appengine/downloads",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"例如：你的系统是 64 位的 Linux Ubuntu 11.10 系统，则下载 go_appengine_sdk_linux_amd64-1.6.1.zip 文件。",-1),m=n("p",null,'用 Archieve Manager 打开并且提取出到你选择的一个目录下（例如你的 home 目录）：它会创造一个叫做 google_appengine 的文件，其包含了整个 AppEngine for Go 的开发环境。例如在 /home/user/google_appengine 或者 "install root"/google_appengine/goroot 目录下。',-1),k=n("p",null,"这个环境包含了您在本地开发、构建和测试您的应用程序所需的一切：它包括一个 AppEngine 服务器来测试您的应用程序，一个 DataStore，用来在这里存储数据，就像您最终在 AppEngine 服务器上托管的实时应用程序一样；以及其他 API 支持和工具，使您可以模仿真正的 AppEngine 来进行开发和测试的目的。由于这个 AppEngine 环境是针对 Go 的，它也包含了 适当的 Go 编译器、软件包和工具作为下载的一部分。",-1),v=n("p",null,[n("u",null,"GAE-Go 和普通 Go 之间的区别：")],-1),b=n("p",null,"GAE-Go 的运行时 (runtime) 提供完整的 Go 语言和几乎所有的标准库，除了一些在 App Engine 环境中没有意义的东西：",-1),f=n("li",null,[e("现在没有 "),n("code",null,"unsafe"),e(" 包了，并且 "),n("code",null,"syscall"),e(" 包被修剪过了。")],-1),E=n("li",null,"它不支持 cgo（不与 C 库交互），甚至：你不能在 GAE 项目中使用任何二进制库（Go 或其他）。你需要回溯所有东西的源，直到 GAE 编译/链接到了所有的源代码。",-1),G=n("li",null,"不支持 go install 工具",-1),A=n("code",null,"os.EINVAL",-1),w=l(`<p>因此，把你的 GAE 和非 GAE-Go 工具完全分开；如果你只做 GAE 开发，你可以完全不使用标准工具。在 google_appengine 目录下有几个 Python 脚本，是 Google App Engine 的基本工作程序。确保它们是可执行的（如果不是，请使用 <code>chmod +x *.py</code> 命令）。同时将它们的路径添加到 <code>PATH</code> 变量中，以便你在调用它们时不必包含完整的路径：例如，如果你有一个 bash shell，在你的 .bashrc 或 .profile 文件中添加一行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/home/user/google_appengine:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><u>注意：</u></p>`,3),x=n("li",null,'如果你已经有了一个工作的 Go 环境（就像你在阅读本书时那样），这个 AppEngine 的安装是在它之外的，与它平行而不影响它；特别是您不需要改变您操作系统中的 Go 环境变量。AppEngine 上的 Go 有其自己完全独立的环境，包含自己的 Go 版本（在 "install root"/google_appengine/goroot 目录下）',-1),y=n("li",null,"下载文档也是一个好主意，这样你可以在离线时浏览。从官网下载 google-appengine-docs-20111011.zip 并解压。",-1),B={href:"http://www.python.org",target:"_blank",rel:"noopener noreferrer"},D={start:"4"},L={href:"http://code.google.com/p/appengine-go/%E3%80%82%E7%94%A8%E4%BB%A5%E4%B8%8B%E6%96%B9%E6%B3%95%E4%B8%8B%E8%BD%BD%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},P=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">hg</span> clone https://code.google.com/p/appengine-go/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),S={start:"5"},H=n("br",null,null,-1),R=l(`<h3 id="_20-3-2-检查和测试" tabindex="-1"><a class="header-anchor" href="#_20-3-2-检查和测试" aria-hidden="true">#</a> 20.3.2 检查和测试</h3><p><u>检查安装：</u></p><p>为了控制一切工作正常，在控制台中进入 google_appengine，通过调用 dev_appserver.py 来调用本地 AppEngine 服务器。</p><p>如果你看到以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Invalid arguments
Runs a development application server for an application.
dev_appserver.py [options]
Application root must be …
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则一切正常。</p><p><u>运行一个演示应用程序：</u></p><p>在 SDK 捆绑包中有一些演示应用程序。让我们运行一个以确保一切正常。</p><ul><li>进入 google_appengine/demos：在那里你可以看到一些文件夹，例如 helloworld、guestbook 等。</li><li>在 demos 目录下，执行命令：<code>dev_appserver.py helloworld</code></li></ul><p>注意，这将自动编译、链接和运行 Go 程序。</p>`,10),C=n("li",null,[n("p",null,"有一些警告以及信息 ，但如果最后一行如下："),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`Running helloworld on port 8080: http://localhost:8080
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[e("就可以了。此时 helloworld 应用程序已经在本地 AppEngine 服务器中被实例化，并且准备好在 "),n("code",null,"8080"),e(" 端口为您机器上的用户提供服务。")])],-1),I={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},K=l(`<p>如果你看到如下页面：</p><p>​ Hello, World! 세상아 안녕!!</p><p>你就已经成功在本地的 GAE 引擎上运行了一个 Go web 应用了。</p><p>刚才运行的 Go 源代码如下：</p><p><u>Listing 20.1 helloworld.go:</u></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> helloworld
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	“fmt”
	“net<span class="token operator">/</span>http”
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>“<span class="token operator">/</span>”<span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// some Chinese characters after World!</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> “<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span> 세상아 안녕<span class="token operator">!</span><span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>”<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),N=n("code",null,"init()",-1),V=n("h2",{id:"链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),e(" 链接")],-1);function T(W,F){const t=p("ExternalLinkIcon"),o=p("RouterLink");return c(),r("div",null,[u,h,n("p",null,[e("从下载页面下载合适你的系统的 GAE SDK 压缩文件："),n("a",g,[e("https://cloud.google.com/appengine/downloads"),s(t)])]),_,m,k,v,b,n("ul",null,[f,E,G,n("li",null,[e("GAE 经常落后于主发行版一个或多个主要版本。此外，必须考虑到沙盒环境的限制（参考 "),s(o,{to:"/the-way-to-go/20.1.html"},{default:a(()=>[e("20.1 节")]),_:1}),e("）。因此，如果尝试打开一个 socket 或写一个文件将返回一个 "),A,e(" 错误。")])]),w,n("ol",null,[x,y,n("li",null,[e("GAE 大量使用 Python，这在 Mac OS X 和 Linux 上默认安装；如果由于某种原因不是这种情况，请从 "),n("a",B,[e("www.python.org"),s(t)]),e(" 下载并安装 Python 2.5。")])]),n("ol",D,[n("li",null,[e("源代码：库和 SDK 是开源的："),n("a",L,[e("http://code.google.com/p/appengine-go/。用以下方法下载："),s(t)])])]),P,n("ol",S,[n("li",null,[e("一个给定应用程序的所有 Go 包都内置在一个单一的可执行文件中，并且请求调度由 Go 程序本身处理。由 Go 程序本身处理；这与 Java 和 Python SDK 的情况不同。"),H,e(" 在 "),s(o,{to:"/the-way-to-go/20.8.html"},{default:a(()=>[e("第 20.8 节")]),_:1}),e("，我们将看到如何连接到 GAE 云来部署你的应用程序。但在这你将在你刚刚安装的本地GAE环境中开发、测试和运行你的应用程序，这是对开发环境最好的模拟。")])]),R,n("ul",null,[C,n("li",null,[n("p",null,[e("打开浏览器并访问 "),n("a",I,[e("http://localhost:8080"),s(t)])]),K,n("p",null,[e("这是一个简单的 web 应用 （参考 "),s(o,{to:"/the-way-to-go/15.0.html"},{default:a(()=>[e("15 章")]),_:1}),e("），其在 "),N,e(" 函数当中就启动了整个的 handler。注意它被它自己的包包含。")])])]),V,n("ul",null,[n("li",null,[s(o,{to:"/the-way-to-go/directory.html"},{default:a(()=>[e("目录")]),_:1})]),n("li",null,[e("上一节："),s(o,{to:"/the-way-to-go/20.2.html"},{default:a(()=>[e("云上的 Go")]),_:1})]),n("li",null,[e("下一节："),s(o,{to:"/the-way-to-go/20.4.html"},{default:a(()=>[e("建造你自己的 Hello world 应用")]),_:1})])])])}const q=i(d,[["render",T],["__file","20.3.html.vue"]]);export{q as default};
