import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as c,c as l,a as e,d as a,w as r,b as t,e as d}from"./app-9da01d16.js";const h={},i=d('<h1 id="_10-0-结构-struct-与方法-method" tabindex="-1"><a class="header-anchor" href="#_10-0-结构-struct-与方法-method" aria-hidden="true">#</a> 10.0 结构 (struct) 与方法 (method)</h1><p>Go 通过类型别名 (alias types) 和结构体的形式支持用户自定义类型，或者叫定制类型。一个带属性的结构体试图表示一个现实世界中的实体。结构体是复合类型 (composite types)，当需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据，就好像它是一个独立实体的一部分。结构体也是值类型，因此可以通过 <strong>new</strong> 函数来创建。</p><p>组成结构体类型的那些数据称为 <strong>字段 (fields)</strong>。每个字段都有一个类型和一个名字；在一个结构体中，字段名字必须是唯一的。</p><p>结构体的概念在软件工程上旧的术语叫 ADT（抽象数据类型：Abstract Data Type），在一些老的编程语言中叫 <strong>记录 (Record)</strong>，比如 Cobol，在 C 家族的编程语言中它也存在，并且名字也是 <strong>struct</strong>，在面向对象的编程语言中，跟一个无方法的轻量级类一样。不过因为 Go 语言中没有类的概念，因此在 Go 中结构体有着更为重要的地位。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>',5);function _(u,m){const o=n("RouterLink");return c(),l("div",null,[i,e("ul",null,[e("li",null,[a(o,{to:"/the-way-to-go/directory.html"},{default:r(()=>[t("目录")]),_:1})]),e("li",null,[t("上一节："),a(o,{to:"/the-way-to-go/09.11.html"},{default:r(()=>[t("在 Go 程序中使用外部库")]),_:1})]),e("li",null,[t("下一节："),a(o,{to:"/the-way-to-go/10.1.html"},{default:r(()=>[t("结构体定义")]),_:1})])])])}const g=s(h,[["render",_],["__file","10.0.html.vue"]]);export{g as default};
