import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as s,b as n,d as t,w as e,e as i}from"./app-9da01d16.js";const u={},r=s("h1",{id:"_12-10-xml-数据格式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_12-10-xml-数据格式","aria-hidden":"true"},"#"),n(" 12.10 XML 数据格式")],-1),d=i(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Person</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FirstName</span><span class="token punctuation">&gt;</span></span>Laura<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FirstName</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LastName</span><span class="token punctuation">&gt;</span></span>Lynn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LastName</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Person</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如同 <code>json</code> 包一样，也有 <code>xml.Marshal()</code> 和 <code>xml.Unmarshal()</code> 从 XML 中编码和解码数据；但这个更通用，可以从文件中读取和写入（或者任何实现了 <code>io.Reader</code> 和 <code>io.Writer</code> 接口的类型）</p><p>和 JSON 的方式一样，XML 数据可以序列化为结构，或者从结构反序列化为 XML 数据；这些可以在例子 15.8（<a href="examples/chapter_15/twitter_status.go">twitter_status.go</a>）中看到。</p><p><code>encoding</code>/<code>xml</code> 包实现了一个简单的 XML 解析器（SAX），用来解析 XML 数据内容。下面的例子说明如何使用解析器：</p><p>示例 12.17 <a href="examples/chapter_12/xml.go">xml.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xml.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/xml&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> t<span class="token punctuation">,</span> token xml<span class="token punctuation">.</span>Token
<span class="token keyword">var</span> err <span class="token builtin">error</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	input <span class="token operator">:=</span> <span class="token string">&quot;&lt;Person&gt;&lt;FirstName&gt;Laura&lt;/FirstName&gt;&lt;LastName&gt;Lynn&lt;/LastName&gt;&lt;/Person&gt;&quot;</span>
	inputReader <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
	p <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>inputReader<span class="token punctuation">)</span>

	<span class="token keyword">for</span> t<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> t<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> token <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> xml<span class="token punctuation">.</span>StartElement<span class="token punctuation">:</span>
			name <span class="token operator">:=</span> token<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Local
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Token name: %s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> attr <span class="token operator">:=</span> <span class="token keyword">range</span> token<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				attrName <span class="token operator">:=</span> attr<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Local
				attrValue <span class="token operator">:=</span> attr<span class="token punctuation">.</span>Value
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An attribute is: %s %s\\n&quot;</span><span class="token punctuation">,</span> attrName<span class="token punctuation">,</span> attrValue<span class="token punctuation">)</span>
				<span class="token comment">// ...</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> xml<span class="token punctuation">.</span>EndElement<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;End of token&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> xml<span class="token punctuation">.</span>CharData<span class="token punctuation">:</span>
			content <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is the content: %v\\n&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
			<span class="token comment">// ...</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token comment">// ...</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Token name: Person
Token name: FirstName
This is the content: Laura
End of token
Token name: LastName
This is the content: Lynn
End of token
End of token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包中定义了若干 XML 标签类型：StartElement，Chardata（这是从开始标签到结束标签之间的实际文本），EndElement，Comment，Directive 或 ProcInst。</p><p>包中同样定义了一个结构解析器：<code>NewParser()</code> 方法持有一个 <code>io.Reader</code>（这里具体类型是 <code>strings.NewReader</code>）并生成一个解析器类型的对象。还有一个 <code>Token()</code> 方法返回输入流里的下一个 XML token。在输入流的结尾处，会返回 (<code>nil</code>,<code>io.EOF</code>)</p><p>XML 文本被循环处理直到 <code>Token()</code> 返回一个错误，因为已经到达文件尾部，再没有内容可供处理了。通过一个 type-switch 可以根据一些 XML 标签进一步处理。Chardata 中的内容只是一个 <code>[]byte</code>，通过字符串转换让其变得可读性强一些。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,12);function k(m,v){const a=p("RouterLink");return c(),l("div",null,[r,s("p",null,[n("下面是与 "),t(a,{to:"/the-way-to-go/12.9.html"},{default:e(()=>[n("12.9 节")]),_:1}),n(" JSON 例子等价的 XML 版本：")]),d,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/12.9.html"},{default:e(()=>[n("Json 数据格式")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/12.11.html"},{default:e(()=>[n("用 Gob 传输数据")]),_:1})])])])}const h=o(u,[["render",k],["__file","12.10.html.vue"]]);export{h as default};
