import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as s,a,d as o,w as r,b as e,e as c}from"./app-9da01d16.js";const d="/go-tutorial/assets/navi7-110c1188.png?raw=true",h={},u=c('<h1 id="_7-文本处理" tabindex="-1"><a class="header-anchor" href="#_7-文本处理" aria-hidden="true">#</a> 7 文本处理</h1><p>Web开发中对于文本处理是非常重要的一部分，我们往往需要对输出或者输入的内容进行处理，这里的文本包括字符串、数字、Json、XML等等。Go语言作为一门高性能的语言，对这些文本的处理都有官方的标准库来支持。而且在你使用中你会发现Go标准库的一些设计相当的巧妙，而且对于使用者来说也很方便就能处理这些文本。本章我们将通过四个小节的介绍，让用户对Go语言处理文本有一个很好的认识。</p><p>XML是目前很多标准接口的交互语言，很多时候和一些Java编写的webserver进行交互都是基于XML标准进行交互，7.1小节将介绍如何处理XML文本，我们使用XML之后发现它太复杂了，现在很多互联网企业对外的API大多数采用了JSON格式，这种格式描述简单，但是又能很好的表达意思，7.2小节我们将讲述如何来处理这样的JSON格式数据。正则是一个让人又爱又恨的工具，它处理文本的能力非常强大，我们在前面表单验证里面已经有所领略它的强大，7.3小节将详细的更深入的讲解如何利用好Go的正则。Web开发中一个很重要的部分就是MVC分离，在Go语言的Web开发中V有一个专门的包来支持<code>template</code>，7.4小节将详细的讲解如何使用模版来进行输出内容。7.5小节将详细介绍如何进行文件和文件夹的操作。7.6小节介绍了字符串的相关操作。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>',6);function _(p,f){const t=n("RouterLink");return l(),s("div",null,[u,a("ul",null,[a("li",null,[o(t,{to:"/build-web-app/preface.html"},{default:r(()=>[e("目录")]),_:1})]),a("li",null,[e("上一章: "),o(t,{to:"/build-web-app/06.5.html"},{default:r(()=>[e("第六章总结")]),_:1})]),a("li",null,[e("下一节: "),o(t,{to:"/build-web-app/07.1.html"},{default:r(()=>[e("XML处理")]),_:1})])])])}const x=i(h,[["render",_],["__file","07.0.html.vue"]]);export{x as default};
