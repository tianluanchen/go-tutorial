import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as i,a as s,b as n,d as e,w as t,e as o}from"./app-9da01d16.js";const u={},d=o(`<h1 id="_14-13-在多核心上并行计算" tabindex="-1"><a class="header-anchor" href="#_14-13-在多核心上并行计算" aria-hidden="true">#</a> 14.13 在多核心上并行计算</h1><p>假设我们有 <code>NCPU</code> 个 CPU 核心：<code>const NCPU = 4 //对应一个四核处理器</code> 然后我们想把计算量分成 <code>NCPU</code> 个部分，每一个部分都和其他部分并行运行。</p><p>这可以通过以下代码所示的方式完成（我们且省略具体参数）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">DoAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    sem <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> NCPU<span class="token punctuation">)</span> <span class="token comment">// Buffering optional but sensible</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">go</span> <span class="token function">DoPart</span><span class="token punctuation">(</span>sem<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Drain the channel sem, waiting for NCPU tasks to complete</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token operator">&lt;-</span>sem <span class="token comment">// wait for one task to complete</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// All done.</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">DoPart</span><span class="token punctuation">(</span>sem <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do the part of the computation</span>
    sem <span class="token operator">&lt;-</span><span class="token number">1</span> <span class="token comment">// signal that this piece is done</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span>NCPU<span class="token punctuation">)</span> <span class="token comment">// runtime.GOMAXPROCS = NCPU</span>
    <span class="token function">DoAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),r=o("<li><p><code>DoAll()</code> 函数创建了一个 <code>sem</code> 通道，每个并行计算都将在对其发送完成信号；在一个 <code>for</code> 循环中 <code>NCPU</code> 个协程被启动了，每个协程会承担 <code>1/NCPU</code> 的工作量。每一个 <code>DoPart()</code> 协程都会向 <code>sem</code> 通道发送完成信号。</p></li>",1),k=s("code",null,"DoAll()",-1),m=s("code",null,"for",-1),v=s("code",null,"NCPU",-1),h=s("code",null,"sem",-1),_=s("code",null,"GOMAXPROCS",-1),f=s("code",null,"NCPU",-1),b=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function C(P,g){const a=l("RouterLink");return p(),i("div",null,[d,s("ul",null,[r,s("li",null,[s("p",null,[k,n(" 会在 "),m,n(" 循环中等待 "),v,n(" 个协程完成："),h,n(" 通道就像一个信号量，这份代码展示了一个经典的信号量模式。（参见 "),e(a,{to:"/the-way-to-go/14.2.html#1427-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%A8%A1%E5%BC%8F"},{default:t(()=>[n("14.2.7")]),_:1}),n("）")])])]),s("p",null,[n("在以上运行模型中，您还需将 "),_,n(" 设置为 "),f,n("（参见 "),e(a,{to:"/the-way-to-go/14.1.html#1413-%E4%BD%BF%E7%94%A8-gomaxprocs"},{default:t(()=>[n("14.1.3")]),_:1}),n("）。")]),b,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/14.12.html"},{default:t(()=>[n("协程链")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/14.14.html"},{default:t(()=>[n("并行化大量数据的计算")]),_:1})])])])}const y=c(u,[["render",C],["__file","14.13.html.vue"]]);export{y as default};
