import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as d,a,b as e,d as l,w as i,e as n}from"./app-9da01d16.js";const u={},h=n('<h1 id="_10-1-设置默认地区" tabindex="-1"><a class="header-anchor" href="#_10-1-设置默认地区" aria-hidden="true">#</a> 10.1 设置默认地区</h1><h2 id="什么是locale" tabindex="-1"><a class="header-anchor" href="#什么是locale" aria-hidden="true">#</a> 什么是Locale</h2><p>Locale是一组描述世界上某一特定区域文本格式和语言习惯的设置的集合。locale名通常由三个部分组成：第一部分，是一个强制性的，表示语言的缩写，例如&quot;en&quot;表示英文或&quot;zh&quot;表示中文。第二部分，跟在一个下划线之后，是一个可选的国家说明符，用于区分讲同一种语言的不同国家，例如&quot;en_US&quot;表示美国英语，而&quot;en_UK&quot;表示英国英语。最后一部分，跟在一个句点之后，是可选的字符集说明符，例如&quot;zh_CN.gb2312&quot;表示中国使用gb2312字符集。</p><p>GO语言默认采用&quot;UTF-8&quot;编码集，所以我们实现i18n时不考虑第三部分，接下来我们都采用locale描述的前面两部分来作为i18n标准的locale名。</p><blockquote><p>在Linux和Solaris系统中可以通过<code>locale -a</code>命令列举所有支持的地区名，读者可以看到这些地区名的命名规范。对于BSD等系统，没有locale命令，但是地区信息存储在/usr/share/locale中。</p></blockquote><h2 id="设置locale" tabindex="-1"><a class="header-anchor" href="#设置locale" aria-hidden="true">#</a> 设置Locale</h2><p>有了上面对locale的定义，那么我们就需要根据用户的信息(访问信息、个人信息、访问域名等)来设置与之相关的locale，我们可以通过如下几种方式来设置用户的locale。</p><h3 id="通过域名设置locale" tabindex="-1"><a class="header-anchor" href="#通过域名设置locale" aria-hidden="true">#</a> 通过域名设置Locale</h3>',8),p={href:"http://www.asta.com",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.asta.cn",target:"_blank",rel:"noopener noreferrer"},m=n(`<ul><li>通过URL就可以很明显的识别</li><li>用户可以通过域名很直观的知道将访问那种语言的站点</li><li>在Go程序中实现非常的简单方便，通过一个map就可以实现</li><li>有利于搜索引擎抓取，能够提高站点的SEO</li></ul><p>我们可以通过下面的代码来实现域名的对应locale：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>
if r.Host == &quot;www.asta.com&quot; {
	i18n.SetLocale(&quot;en&quot;)
} else if r.Host == &quot;www.asta.cn&quot; {
	i18n.SetLocale(&quot;zh-CN&quot;)
} else if r.Host == &quot;www.asta.tw&quot; {
	i18n.SetLocale(&quot;zh-TW&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"http://en.asta.com",target:"_blank",rel:"noopener noreferrer"},_={href:"http://cn.asta.com",target:"_blank",rel:"noopener noreferrer"},q=n(`<div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>
prefix := strings.Split(r.Host,&quot;.&quot;)

if prefix[0] == &quot;en&quot; {
	i18n.SetLocale(&quot;en&quot;)
} else if prefix[0] == &quot;cn&quot; {
	i18n.SetLocale(&quot;zh-CN&quot;)
} else if prefix[0] == &quot;tw&quot; {
	i18n.SetLocale(&quot;zh-TW&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过域名设置Locale有如上所示的优点，但是我们一般开发Web应用的时候不会采用这种方式，因为首先域名成本比较高，开发一个Locale就需要一个域名，而且往往统一名称的域名不一定能申请的到，其次我们不愿意为每个站点去本地化一个配置，而更多的是采用url后面带参数的方式，请看下面的介绍。</p><h3 id="从域名参数设置locale" tabindex="-1"><a class="header-anchor" href="#从域名参数设置locale" aria-hidden="true">#</a> 从域名参数设置Locale</h3>`,3),f={href:"http://www.asta.com/hello?locale=zh",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.asta.com/zh/hello",target:"_blank",rel:"noopener noreferrer"},L=a("code",null,'i18n.SetLocale(params["locale"])',-1),g=a("p",null,[e("这种设置方式几乎拥有前面讲的通过域名设置Locale的所有优点，它采用RESTful的方式，以使得我们不需要增加额外的方法来处理。但是这种方式需要在每一个的link里面增加相应的参数locale，这也许有点复杂而且有时候甚至相当的繁琐。不过我们可以写一个通用的函数url，让所有的link地址都通过这个函数来生成，然后在这个函数里面增加"),a("code",null,'locale=params["locale"]'),e("参数来缓解一下。")],-1),k={href:"http://www.asta.com/en/books",target:"_blank",rel:"noopener noreferrer"},x={href:"http://www.asta.com/zh/books",target:"_blank",rel:"noopener noreferrer"},S=n(`<div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>
mux.Get(&quot;/:locale/books&quot;, listbook)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从客户端设置地区" tabindex="-1"><a class="header-anchor" href="#从客户端设置地区" aria-hidden="true">#</a> 从客户端设置地区</h3><p>在一些特殊的情况下，我们需要根据客户端的信息而不是通过URL来设置Locale，这些信息可能来自于客户端设置的喜好语言(浏览器中设置)，用户的IP地址，用户在注册的时候填写的所在地信息等。这种方式比较适合Web为基础的应用。</p><ul><li>Accept-Language</li></ul><p>客户端请求的时候在HTTP头信息里面有<code>Accept-Language</code>，一般的客户端都会设置该信息，下面是Go语言实现的一个简单的根据<code>Accept-Language</code>实现设置地区的代码：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>
AL := r.Header.Get(&quot;Accept-Language&quot;)
if AL == &quot;en&quot; {
	i18n.SetLocale(&quot;en&quot;)
} else if AL == &quot;zh-CN&quot; {
	i18n.SetLocale(&quot;zh-CN&quot;)
} else if AL == &quot;zh-TW&quot; {
	i18n.SetLocale(&quot;zh-TW&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然在实际应用中，可能需要更加严格的判断来进行设置地区</p><ul><li><p>IP地址</p><p>另一种根据客户端来设定地区就是用户访问的IP，我们根据相应的IP库，对应访问的IP到地区，目前全球比较常用的就是GeoIP Lite Country这个库。这种设置地区的机制非常简单，我们只需要根据IP数据库查询用户的IP然后返回国家地区，根据返回的结果设置对应的地区。</p></li><li><p>用户profile</p><p>当然你也可以让用户根据你提供的下拉菜单或者别的什么方式的设置相应的locale，然后我们将用户输入的信息，保存到与它帐号相关的profile中，当用户再次登陆的时候把这个设置复写到locale设置中，这样就可以保证该用户每次访问都是基于自己先前设置的locale来获得页面。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过上面的介绍可知，设置Locale可以有很多种方式，我们应该根据需求的不同来选择不同的设置Locale的方法，以让用户能以它最熟悉的方式，获得我们提供的服务，提高应用的用户友好性。</p><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>`,11);function G(z,R){const o=r("ExternalLinkIcon"),t=r("RouterLink");return c(),d("div",null,[h,a("p",null,[e("设置Locale的办法之一是在应用运行的时候采用域名分级的方式，例如，我们采用 "),a("a",p,[e("www.asta.com"),l(o)]),e(" 当做我们的英文站(默认站)，而把域名 "),a("a",v,[e("www.asta.cn"),l(o)]),e(" 当做中文站。这样通过在应用里面设置域名和相应的locale的对应关系，就可以设置好地区。这样处理有几点好处：")]),m,a("p",null,[e('当然除了整域名设置地区之外，我们还可以通过子域名来设置地区，例如"'),a("a",b,[e("en.asta.com"),l(o)]),e('"表示英文站点，"'),a("a",_,[e("cn.asta.com"),l(o)]),e('"表示中文站点。实现代码如下所示：')]),q,a("p",null,[e("目前最常用的设置Locale的方式是在URL里面带上参数，例如 "),a("a",f,[e("www.asta.com/hello?locale=zh"),l(o)]),e(" 或者 "),a("a",w,[e("www.asta.com/zh/hello"),l(o)]),e(" 。这样我们就可以设置地区："),L,e("。")]),g,a("p",null,[e("也许我们希望URL地址看上去更加的RESTful一点，例如："),a("a",k,[e("www.asta.com/en/books"),l(o)]),e(" (英文站点)和 "),a("a",x,[e("www.asta.com/zh/books"),l(o)]),e(" (中文站点)，这种方式的URL更加有利于SEO，而且对于用户也比较友好，能够通过URL直观的知道访问的站点。那么这样的URL地址可以通过router来获取locale(参考REST小节里面介绍的router插件实现)：")]),S,a("ul",null,[a("li",null,[l(t,{to:"/build-web-app/preface.html"},{default:i(()=>[e("目录")]),_:1})]),a("li",null,[e("上一节: "),l(t,{to:"/build-web-app/10.0.html"},{default:i(()=>[e("国际化和本地化")]),_:1})]),a("li",null,[e("下一节: "),l(t,{to:"/build-web-app/10.2.html"},{default:i(()=>[e("本地化资源")]),_:1})])])])}const U=s(u,[["render",G],["__file","10.1.html.vue"]]);export{U as default};
