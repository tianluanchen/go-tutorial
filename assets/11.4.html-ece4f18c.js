import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as i,a as e,d as o,w as a,b as t}from"./app-9da01d16.js";const d={},c=e("h1",{id:"_11-4-小结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-4-小结","aria-hidden":"true"},"#"),t(" 11.4 小结")],-1),_=e("p",null,[t("本章我们通过三个小节分别介绍了Go语言中如何处理错误，如何设计错误处理，然后第二小节介绍了如何通过GDB来调试程序，通过GDB我们可以单步调试、可以查看变量、修改变量、打印执行过程等，最后我们介绍了如何利用Go语言自带的轻量级框架"),e("code",null,"testing"),t("来编写单元测试和压力测试，使用"),e("code",null,"go test"),t("就可以方便的执行这些测试，使得我们将来代码升级修改之后很方便的进行回归测试。这一章也许对于你编写程序逻辑没有任何帮助，但是对于你编写出来的程序代码保持高质量是至关重要的，因为一个好的Web应用必定有良好的错误处理机制(错误提示的友好、可扩展性)、有好的单元测试和压力测试以保证上线之后代码能够保持良好的性能和按预期的运行。")],-1),u=e("h2",{id:"links",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#links","aria-hidden":"true"},"#"),t(" links")],-1);function h(p,f){const l=s("RouterLink");return r(),i("div",null,[c,_,u,e("ul",null,[e("li",null,[o(l,{to:"/build-web-app/preface.html"},{default:a(()=>[t("目录")]),_:1})]),e("li",null,[t("上一节: "),o(l,{to:"/build-web-app/11.3.html"},{default:a(()=>[t("Go怎么写测试用例")]),_:1})]),e("li",null,[t("下一节: "),o(l,{to:"/build-web-app/12.0.html"},{default:a(()=>[t("部署与维护")]),_:1})])])])}const k=n(d,[["render",h],["__file","11.4.html.vue"]]);export{k as default};
