import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as u,a as s,b as n,d as t,w as p,e}from"./app-9da01d16.js";const i="/go-tutorial/assets/19.8_fig19.5-5a400238.jpg?raw=true",r={},k=s("h1",{id:"版本-5-分布式程序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#版本-5-分布式程序","aria-hidden":"true"},"#"),n(" 版本 5 - 分布式程序")],-1),d=s("em",null,"goto_v5",-1),v=s("a",{href:"examples/chapter_19/goto_v5"},"goto_v5",-1),m=s("code",null,"gob",-1),b=e('<h1 id="_19-8-多服务器处理架构" tabindex="-1"><a class="header-anchor" href="#_19-8-多服务器处理架构" aria-hidden="true">#</a> 19.8 多服务器处理架构</h1><p>目前为止 goto 以单线程运行，但即使用协程，在一台机器上运行的单一进程，也只能为一定数量的并发请求提供服务。一个缩短网址服务，相对于 <code>Add()</code>（用 <code>Put()</code> 写入），通常 <code>Redirect()</code> 服务（用 <code>Get()</code> 读取）要多得多。因此我们应该可以创建任意数量的只读的从 (slave) 服务器，提供服务并缓存 <code>Get()</code> 方法调用的结果，将 <code>Put()</code> 请求转发给主 (master) 服务器，类似如下架构：</p><figure><img src="'+i+'" alt="图 19.5 跨越主从计算机的分布式负载" tabindex="0" loading="lazy"><figcaption>图 19.5 跨越主从计算机的分布式负载</figcaption></figure>',3),g=s("code",null,"rpc",-1),f=s("code",null,"URLStore",-1),h=s("code",null,"rpc",-1),y=s("code",null,"Get()",-1),_=s("code",null,"Put()",-1),w=e(`<p>截至目前 <code>URLStore</code> 上基本的 <code>Get()</code> 和 <code>Put()</code> 方法具有如下签名：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而 RPC 调用仅能使用如下形式的方法（<code>t</code> 是 <code>T</code> 类型的值）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t T<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span>args <span class="token operator">*</span>ArgType<span class="token punctuation">,</span> reply <span class="token operator">*</span>ReplyType<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要使 <code>URLStore</code> 成为 RPC 服务，需要修改 <code>Put()</code> 和 <code>Get()</code> 方法使它们符合上述函数签名。以下是修改后的签名：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Get()</code> 代码变更为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> u<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span><span class="token operator">*</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		<span class="token operator">*</span>url <span class="token operator">=</span> u
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key not found&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，键和长 URL 都变成了指针，必须加上前缀 <code>*</code> 来取得它们的值，例如 <code>*key</code> 这种形式。<code>u</code> 是一个值，可以用 <code>*url = u</code> 来将其赋值给指针。</p><p>接着对 <code>Put()</code> 代码做同样的改动：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">*</span>key <span class="token operator">=</span> <span class="token function">genKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>save <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>save <span class="token operator">&lt;-</span> record<span class="token punctuation">{</span><span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>url<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Put()</code> 调用 <code>Set()</code>，由于后者也要做调整，<code>key</code> 和 <code>url</code> 参数现在是指针类型，还必须返回 <code>error</code> 取代 <code>boolean</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span><span class="token operator">*</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> present <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key already exists&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>urls<span class="token punctuation">[</span><span class="token operator">*</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>url
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，当从 <code>load()</code> 调用 <code>Set()</code> 时，也必须做调整：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还必须修改 HTTP 处理函数以适应 <code>URLStore</code> 上的更改。<code>Redirect()</code> 处理函数现在返回 <code>URLStore</code> 给出错误的字符串形式：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	key <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
	<span class="token keyword">var</span> url <span class="token builtin">string</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> url<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Add()</code> 处理函数也以基本相同的方式修改：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	url <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> AddForm<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> key <span class="token builtin">string</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;http://%s/%s&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>hostname<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使应用程序更灵活，正如之前章节所为，可以添加一个命令行标志 (flag) 来决定是否在 <code>main()</code> 函数中启用 RPC 服务器：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> rpcEnabled <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;rpc&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;enable RPC server&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要使 RPC 工作，还要用 <code>rpc</code> 包来注册 <code>URLStore</code>，并用 <code>HandleHTTP()</code> 创建基于 HTTP 的 RPC 处理器：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	store <span class="token operator">=</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token operator">*</span>dataFile<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">*</span>rpcEnabled <span class="token punctuation">{</span> <span class="token comment">// flag has been set</span>
		rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;Store&quot;</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span>
		rpc<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span> <span class="token punctuation">(</span>set up http like before<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,24);function R(S,P){const a=c("RouterLink");return l(),u("div",null,[k,s("p",null,[n("第 5 个版本的代码 "),d,n("（"),t(a,{to:"/the-way-to-go/19.8.html"},{default:p(()=>[n("19.8 节")]),_:1}),n("和 "),t(a,{to:"/the-way-to-go/19.9.html"},{default:p(()=>[n("19.9 节")]),_:1}),n(" 讨论）见 "),v,n("。该版本仍然基于 "),m,n(" 存储，但很容易调整为使用 json，正如版本 4 演示的那样。")]),b,s("p",null,[n("对于 slave 进程，要在网络上运行 goto 应用的一个 master 节点实例，它们必须能相互通信。Go 的 "),g,n(" 包为跨越网络发起函数调用提供了便捷的途径。这里将把 "),f,n(" 变为 RPC 服务（"),t(a,{to:"/the-way-to-go/15.9.html"},{default:p(()=>[n("15.9 节")]),_:1}),n(" 详细讨论了 "),h,n(" 包）。slave 进程将应对 "),y,n(" 请求以交付长 URL。当一个长 URL 要被转换为缩短版本（使用 "),_,n(" 方法）时，它们通过 rpc 连接把任务委托给 master 进程，因此只有 master 节点会写入数据文件。")]),w,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:p(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/19.7.html"},{default:p(()=>[n("以 json 格式存储")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/19.9.html"},{default:p(()=>[n("使用代理缓存")]),_:1})])])])}const U=o(r,[["render",R],["__file","19.8.html.vue"]]);export{U as default};
