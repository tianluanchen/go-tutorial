import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as u,a as s,d as t,w as p,b as n,e as l}from"./app-9da01d16.js";const i={},r=l(`<h1 id="_11-14-结构体、集合和高阶函数" tabindex="-1"><a class="header-anchor" href="#_11-14-结构体、集合和高阶函数" aria-hidden="true">#</a> 11.14 结构体、集合和高阶函数</h1><p>通常你在应用中定义了一个结构体，那么你也可能需要这个结构体的（指针）对象集合，比如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Any <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Model        <span class="token builtin">string</span>
	Manufacturer <span class="token builtin">string</span>
	BuildYear    <span class="token builtin">int</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Cars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以使用高阶函数，实际上也就是把函数作为定义所需方法（其他函数）的参数，例如：</p><p>1）定义一个通用的 <code>Process()</code> 函数，它接收一个作用于每一辆 car 的 f 函数作参数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Process all cars with the given function f:</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">Process</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> cs <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）在上面的基础上，实现一个查找函数来获取子集合，并在 <code>Process()</code> 中传入一个闭包执行（这样就可以访问局部切片 <code>cars</code>）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Find all cars matching a given criteria.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">FindAll</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> Cars <span class="token punctuation">{</span>

	cars <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	cs<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cars<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> cars
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）实现对应作用的功效 (Map-functionality)，从每个 <code>car</code> 对象当中产出某些东西：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Process cars and create new data.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">Map</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> Any<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Any <span class="token punctuation">{</span>
	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Any<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	ix <span class="token operator">:=</span> <span class="token number">0</span>
	cs<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		ix<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以定义下面这样的具体查询：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>allNewBMWs <span class="token operator">:=</span> allCars<span class="token punctuation">.</span><span class="token function">FindAll</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span>Manufacturer <span class="token operator">==</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span>BuildYear <span class="token operator">&gt;</span> <span class="token number">2010</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）我们也可以根据参数返回不同的函数。也许我们想根据不同的厂商添加汽车到不同的集合，但是这（这种映射关系）可能会是会改变的。所以我们可以定义一个函数来产生特定的添加函数和 <code>map</code> 集：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">MakeSortedAppender</span><span class="token punctuation">(</span>manufacturers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Cars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Prepare maps of sorted cars.</span>
	sortedCars <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Cars<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> manufacturers <span class="token punctuation">{</span>
		sortedCars<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token comment">// Prepare appender function:</span>
	appender <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> appender<span class="token punctuation">,</span> sortedCars
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以用它把汽车分类为独立的集合，像这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>manufacturers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aston Martin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Land Rover&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jaguar&quot;</span><span class="token punctuation">}</span>
sortedAppender<span class="token punctuation">,</span> sortedCars <span class="token operator">:=</span> <span class="token function">MakeSortedAppender</span><span class="token punctuation">(</span>manufacturers<span class="token punctuation">)</span>
allUnsortedCars<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>sortedAppender<span class="token punctuation">)</span>
BMWCount <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span><span class="token string">&quot;BMW&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们让这些代码在下面的程序 cars.go 中执行：</p><p>示例 11.18 <a href="examples/chapter_11/cars.go">cars.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cars.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Any <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> Car <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Model        <span class="token builtin">string</span>
	Manufacturer <span class="token builtin">string</span>
	BuildYear    <span class="token builtin">int</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Cars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// make some cars:</span>
	ford <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">{</span><span class="token string">&quot;Fiesta&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> <span class="token number">2008</span><span class="token punctuation">}</span>
	bmw <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">{</span><span class="token string">&quot;XL 450&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">}</span>
	merc <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">{</span><span class="token string">&quot;D600&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mercedes&quot;</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">}</span>
	bmw2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">{</span><span class="token string">&quot;X 800&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token number">2008</span><span class="token punctuation">}</span>
	<span class="token comment">// query:</span>
	allCars <span class="token operator">:=</span> <span class="token function">Cars</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">{</span>ford<span class="token punctuation">,</span> bmw<span class="token punctuation">,</span> merc<span class="token punctuation">,</span> bmw2<span class="token punctuation">}</span><span class="token punctuation">)</span>
	allNewBMWs <span class="token operator">:=</span> allCars<span class="token punctuation">.</span><span class="token function">FindAll</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span>Manufacturer <span class="token operator">==</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span>BuildYear <span class="token operator">&gt;</span> <span class="token number">2010</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;AllCars: &quot;</span><span class="token punctuation">,</span> allCars<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;New BMWs: &quot;</span><span class="token punctuation">,</span> allNewBMWs<span class="token punctuation">)</span>
	<span class="token comment">//</span>
	manufacturers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aston Martin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Land Rover&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jaguar&quot;</span><span class="token punctuation">}</span>
	sortedAppender<span class="token punctuation">,</span> sortedCars <span class="token operator">:=</span> <span class="token function">MakeSortedAppender</span><span class="token punctuation">(</span>manufacturers<span class="token punctuation">)</span>
	allCars<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>sortedAppender<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Map sortedCars: &quot;</span><span class="token punctuation">,</span> sortedCars<span class="token punctuation">)</span>
	BMWCount <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span><span class="token string">&quot;BMW&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;We have &quot;</span><span class="token punctuation">,</span> BMWCount<span class="token punctuation">,</span> <span class="token string">&quot; BMWs&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Process all cars with the given function f:</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">Process</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> cs <span class="token punctuation">{</span>
		<span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Find all cars matching a given criteria.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">FindAll</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> Cars <span class="token punctuation">{</span>
	cars <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	cs<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cars<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> cars
<span class="token punctuation">}</span>

<span class="token comment">// Process cars and create new data.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>cs Cars<span class="token punctuation">)</span> <span class="token function">Map</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span> Any<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Any <span class="token punctuation">{</span>
	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Any<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	ix <span class="token operator">:=</span> <span class="token number">0</span>
	cs<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		result<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		ix<span class="token operator">++</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">MakeSortedAppender</span><span class="token punctuation">(</span>manufacturers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>car <span class="token operator">*</span>Car<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Cars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Prepare maps of sorted cars.</span>
	sortedCars <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Cars<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> manufacturers <span class="token punctuation">{</span>
		sortedCars<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	<span class="token comment">// Prepare appender function:</span>
	appender <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
			sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span>c<span class="token punctuation">.</span>Manufacturer<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sortedCars<span class="token punctuation">[</span><span class="token string">&quot;Default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> appender<span class="token punctuation">,</span> sortedCars
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AllCars:  [0xf8400038a0 0xf840003bd0 0xf840003ba0 0xf840003b70]
New BMWs:  [0xf840003bd0]
Map sortedCars:  map[Default:[0xf840003ba0] Jaguar:[] Land Rover:[] BMW:[0xf840003bd0 0xf840003b70] Aston Martin:[] Ford:[0xf8400038a0]]
We have  2  BMWs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,22);function k(d,v){const a=e("RouterLink");return c(),u("div",null,[r,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:p(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/11.13.html"},{default:p(()=>[n("Go 中的面向对象")]),_:1})]),s("li",null,[n("下一章："),t(a,{to:"/the-way-to-go/12.0.html"},{default:p(()=>[n("读写数据")]),_:1})])])])}const f=o(i,[["render",k],["__file","11.14.html.vue"]]);export{f as default};
