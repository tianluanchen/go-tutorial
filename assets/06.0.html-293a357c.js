import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as l,a as s,d as i,w as a,b as e,e as c}from"./app-9da01d16.js";const d="/go-tutorial/assets/navi6-79ba45d1.png?raw=true",h={},u=c('<h1 id="_6-session和数据存储" tabindex="-1"><a class="header-anchor" href="#_6-session和数据存储" aria-hidden="true">#</a> 6 session和数据存储</h1><p>Web开发中一个很重要的议题就是如何做好用户的整个浏览过程的控制，因为HTTP协议是无状态的，所以用户的每一次请求都是无状态的，我们不知道在整个Web操作过程中哪些连接与该用户有关，我们应该如何来解决这个问题呢？Web里面经典的解决方案是cookie和session，cookie机制是一种客户端机制，把用户数据保存在客户端，而session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息，每一个网站访客都会被分配给一个唯一的标志符,即sessionID,它的存放形式无非两种:要么经过url传递,要么保存在客户端的cookies里.当然,你也可以将Session保存到数据库里,这样会更安全,但效率方面会有所下降。</p><p>6.1小节里面讲介绍session机制和cookie机制的关系和区别，6.2讲解Go语言如何来实现session，里面讲实现一个简易的session管理器，6.3小节讲解如何防止session被劫持的情况，如何有效的保护session。我们知道session其实可以存储在任何地方，6.4小节里面实现的session是存储在内存中的，但是如果我们的应用进一步扩展了，要实现应用的session共享，那么我们可以把session存储在数据库中(memcache或者redis)，6.5小节将详细的讲解如何实现这些功能。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>',6);function _(p,f){const o=t("RouterLink");return r(),l("div",null,[u,s("ul",null,[s("li",null,[i(o,{to:"/build-web-app/preface.html"},{default:a(()=>[e("目录")]),_:1})]),s("li",null,[e("上一章: "),i(o,{to:"/build-web-app/05.7.html"},{default:a(()=>[e("第五章总结")]),_:1})]),s("li",null,[e("下一节: "),i(o,{to:"/build-web-app/06.1.html"},{default:a(()=>[e("session和cookie")]),_:1})])])])}const k=n(h,[["render",_],["__file","06.0.html.vue"]]);export{k as default};
