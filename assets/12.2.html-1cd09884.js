import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as u,a as s,b as n,d as a,w as e,e as o}from"./app-9da01d16.js";const r={},d=o(`<h1 id="_12-2-文件读写" tabindex="-1"><a class="header-anchor" href="#_12-2-文件读写" aria-hidden="true">#</a> 12.2 文件读写</h1><h2 id="_12-2-1-读文件" tabindex="-1"><a class="header-anchor" href="#_12-2-1-读文件" aria-hidden="true">#</a> 12.2.1 读文件</h2><p>在 Go 语言中，文件使用指向 <code>os.File</code> 类型的指针来表示的，也叫做文件句柄。我们在前面章节使用到过标准输入 <code>os.Stdin</code> 和标准输出 <code>os.Stdout</code>，他们的类型都是 <code>*os.File</code>。让我们来看看下面这个程序：</p><p>示例 12.4 <a href="examples/chapter_12/fileinput.go">fileinput.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;bufio&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;io&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputFile<span class="token punctuation">,</span> inputError <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;input.dat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> inputError <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An error occurred on opening the inputfile\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;Does the file exist?\\n&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;Have you got access to it?\\n&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token comment">// exit the function on error</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> inputFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    inputReader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        inputString<span class="token punctuation">,</span> readerError <span class="token operator">:=</span> inputReader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The input was: %s&quot;</span><span class="token punctuation">,</span> inputString<span class="token punctuation">)</span>
        <span class="token keyword">if</span> readerError <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 <code>inputFile</code> 是 <code>*os.File</code> 类型的。该类型是一个结构，表示一个打开文件的描述符（文件句柄）。然后，使用 <code>os</code> 包里的 <code>Open()</code> 函数来打开一个文件。该函数的参数是文件名，类型为 <code>string</code>。在上面的程序中，我们以只读模式打开 <code>input.dat</code> 文件。</p><p>如果文件不存在或者程序没有足够的权限打开这个文件，Open函数会返回一个错误：<code>inputFile, inputError = os.Open(&quot;input.dat&quot;)</code>。如果文件打开正常，我们就使用 <code>defer inputFile.Close()</code> 语句确保在程序退出前关闭该文件。然后，我们使用 <code>bufio.NewReader()</code> 来获得一个读取器变量。</p><p>通过使用 <code>bufio</code> 包提供的读取器（写入器也类似），如上面程序所示，我们可以很方便的操作相对高层的 <code>string</code> 对象，而避免了去操作比较底层的字节。</p><p>接着，我们在一个无限循环中使用 <code>ReadString(&#39;\\n&#39;)</code> 或 <code>ReadBytes(&#39;\\n&#39;)</code> 将文件的内容逐行（行结束符 <code>&#39;\\n&#39;</code>）读取出来。</p><p><strong>注意：</strong> 在之前的例子中，我们看到，Unix 和 Linux 的行结束符是 <code>\\n</code>，而 Windows 的行结束符是 <code>\\r\\n</code>。在使用 <code>ReadString</code> 和 <code>ReadBytes</code> 方法的时候，我们不需要关心操作系统的类型，直接使用 <code>\\n</code> 就可以了。另外，我们也可以使用 <code>ReadLine()</code> 方法来实现相同的功能。</p><p>一旦读取到文件末尾，变量 <code>readerError</code> 的值将变成非空（事实上，其值为常量 <code>io.EOF</code>），我们就会执行 <code>return</code> 语句从而退出循环。</p><p><strong>其他类似函数：</strong></p><p><strong>1) 将整个文件的内容读到一个字符串里：</strong></p><p>如果您想这么做，可以使用 <code>io/ioutil</code> 包里的 <code>ioutil.ReadFile()</code> 方法，该方法第一个返回值的类型是 <code>[]byte</code>，里面存放读取到的内容，第二个返回值是错误，如果没有错误发生，第二个返回值为 <code>nil</code>。请看示例 12.5。类似的，函数 <code>WriteFile()</code> 可以将 <code>[]byte</code> 的值写入文件。</p><p>示例 12.5 <a href="examples/chapter_12/read_write_file1.go">read_write_file1.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;io/ioutil&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputFile <span class="token operator">:=</span> <span class="token string">&quot;products.txt&quot;</span>
    outputFile <span class="token operator">:=</span> <span class="token string">&quot;products_copy.txt&quot;</span>
    buf<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;File Error: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token comment">// panic(err.Error())</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>
    err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span> <span class="token comment">// oct, not hex</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2) 带缓冲的读取</strong></p><p>在很多情况下，文件的内容是不按行划分的，或者干脆就是一个二进制文件。在这种情况下，<code>ReadString()</code> 就无法使用了，我们可以使用 <code>bufio.Reader</code> 的 <code>Read()</code>，它只接收一个参数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
n<span class="token punctuation">,</span> err <span class="token operator">:=</span> inputReader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 <code>n</code> 的值表示读取到的字节数.</p><p><strong>3) 按列读取文件中的数据</strong></p><p>如果数据是按列排列并用空格分隔的，你可以使用 <code>fmt</code> 包提供的以 <code>FScan...</code> 开头的一系列函数来读取他们。请看以下程序，我们将 3 列的数据分别读入变量 <code>v1</code>、<code>v2</code> 和 <code>v3</code> 内，然后分别把他们添加到切片的尾部。</p><p>示例 12.6 <a href="examples/chapter_12/read_file2.go">read_file2.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;products2.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token builtin">string</span>
        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Fscanln</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span>
        <span class="token comment">// scans until newline</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        col1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>col1<span class="token punctuation">,</span> v1<span class="token punctuation">)</span>
        col2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>col2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
        col3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>col3<span class="token punctuation">,</span> v3<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>col1<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>col2<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>col3<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[ABC FUNC GO]
[40 56 45]
[150 280 356]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> <code>path</code> 包里包含一个子包叫 <code>filepath</code>，这个子包提供了跨平台的函数，用于处理文件名和路径。例如 <code>Base()</code> 函数用于获得路径中的最后一个元素（不包含后面的分隔符）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;path/filepath&quot;</span>
filename <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Base</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>练习 12.3</strong>：<a href="exercises/chapter_12/read_csv.go">read_csv.go</a></p><p>文件 products.txt 的内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;The ABC of Go&quot;;25.5;1500
&quot;Functional Programming with Go&quot;;56;280
&quot;Go for It&quot;;45.9;356
&quot;The Go Way&quot;;55;500
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每行的第一个字段为标题，第二个字段为价格，第三个字段为数量。内容的格式基本与 示例 12.3c 的相同，除了分隔符改成了分号。请读取出文件的内容，创建一个结构用于存取一行的数据，然后使用结构的切片，并把数据打印出来。</p>`,32),k=s("code",null,"encoding/csv",-1),v={href:"http://golang.org/pkg/encoding/csv/",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="_12-2-2-compress-包-读取压缩文件" tabindex="-1"><a class="header-anchor" href="#_12-2-2-compress-包-读取压缩文件" aria-hidden="true">#</a> 12.2.2 compress 包：读取压缩文件</h2><p><code>compress</code> 包提供了读取压缩文件的功能，支持的压缩文件格式为：bzip2、flate、gzip、lzw 和 zlib。</p><p>下面的程序展示了如何读取一个 gzip 文件。</p><p>示例 12.7 <a href="examples/chapter_12/gzipped.go">gzipped.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;compress/gzip&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fName <span class="token operator">:=</span> <span class="token string">&quot;MyFile.gz&quot;</span>
	<span class="token keyword">var</span> r <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader
	fi<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;%v, Can&#39;t open %s: error: %s\\n&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fName<span class="token punctuation">,</span>
			err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> fi<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fz<span class="token punctuation">,</span> err <span class="token operator">:=</span> gzip<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		r <span class="token operator">=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		r <span class="token operator">=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>fz<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		line<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Done reading file&quot;</span><span class="token punctuation">)</span>
			os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-2-3-写文件" tabindex="-1"><a class="header-anchor" href="#_12-2-3-写文件" aria-hidden="true">#</a> 12.2.3 写文件</h2><p>请看以下程序：</p><p>示例 12.8 <a href="examples/chapter_12/fileoutput.go">fileoutput.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// var outputWriter *bufio.Writer</span>
	<span class="token comment">// var outputFile *os.File</span>
	<span class="token comment">// var outputError os.Error</span>
	<span class="token comment">// var outputString string</span>
	outputFile<span class="token punctuation">,</span> outputError <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;output.dat&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> outputError <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An error occurred with file opening or creation\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>  
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> outputFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	outputWriter <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span>
	outputString <span class="token operator">:=</span> <span class="token string">&quot;hello world!\\n&quot;</span>

	<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		outputWriter<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>outputString<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	outputWriter<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了文件句柄，我们还需要 <code>bufio</code> 的 <code>Writer</code>。我们以只写模式打开文件 <code>output.dat</code>，如果文件不存在则自动创建：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>outputFile<span class="token punctuation">,</span> outputError <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;output.dat&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，<code>OpenFile</code> 函数有三个参数：文件名、一个或多个标志（使用逻辑运算符 <code>|</code> 连接），使用的文件权限。</p><p>我们通常会用到以下标志：</p><ul><li><code>os.O_RDONLY</code>：只读</li><li><code>os.O_WRONLY</code>：只写</li><li><code>os.O_CREATE</code>：创建：如果指定文件不存在，就创建该文件。</li><li><code>os.O_TRUNC</code>：截断：如果指定文件已存在，就将该文件的长度截为 0 。</li></ul><p>在读文件的时候，文件的权限是被忽略的，所以在使用 <code>OpenFile()</code> 时传入的第三个参数可以用 0 。而在写文件时，不管是 Unix 还是 Windows，都需要使用 <code>0666</code>。</p><p>然后，我们创建一个写入器（缓冲区）对象：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>outputWriter <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着，使用一个 <code>for</code> 循环，将字符串写入缓冲区，写 10 次：<code>outputWriter.WriteString(outputString)</code></p><p>缓冲区的内容紧接着被完全写入文件：<code>outputWriter.Flush()</code></p>`,19),b=s("code",null,'fmt.Fprintf(outputFile, "Some test data.\\n")',-1),g=s("code",null,"fmt",-1),f=s("code",null,"F...",-1),h=s("code",null,"Print()",-1),_=s("code",null,"io.Writer",-1),q=o(`<p>程序 <code>filewrite.go</code> 展示了不使用 <code>fmt.FPrintf()</code> 函数，使用其他函数如何写文件：</p><p>示例 12.8 <a href="examples/chapter_12/filewrite.go">filewrite.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;os&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world\\n&quot;</span><span class="token punctuation">)</span>
	f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	f<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world in a file\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>os.Stdout.WriteString(&quot;hello, world\\n&quot;)</code>，我们可以输出到屏幕。</p><p>我们以只写模式创建或打开文件 <code>&quot;test&quot;</code> ，并且忽略了可能发生的错误：<code>f, _ := os.OpenFile(&quot;test&quot;, os.O_CREATE|os.O_WRONLY, 0666)</code></p><p>我们不使用缓冲区，直接将内容写入文件：<code>f.WriteString()</code></p><p><strong>练习 12.4</strong>：<a href="exercises/chapter_12/wiki_part1.go">wiki_part1.go</a></p>`,7),w=o(`<p>程序中的数据结构如下，是一个包含以下字段的结构:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Page <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Title <span class="token builtin">string</span>
    Body  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请给这个结构编写一个 <code>save()</code> 方法，将 Title 作为文件名、Body 作为文件内容，写入到文本文件中。</p>`,3),y=s("code",null,"load()",-1),x=s("code",null,"title",-1),F=s("code",null,"title",-1),R=s("code",null,"*Page",-1),O=s("code",null,"ioutil",-1),E=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function W(S,N){const c=p("ExternalLinkIcon"),t=p("RouterLink");return l(),u("div",null,[d,s("p",null,[n("关于解析 CSV 文件，"),k,n(" 包提供了相应的功能。具体请参考 "),s("a",v,[n("http://golang.org/pkg/encoding/csv/"),a(c)]),n(" 。")]),m,s("p",null,[n("如果写入的东西很简单，我们可以使用 "),b,n(" 直接将内容写入文件。"),g,n(" 包里的 "),f,n(" 开头的 "),h,n(" 函数可以直接写入任何 "),_,n("，包括文件（请参考"),a(t,{to:"/the-way-to-go/12.8.html"},{default:e(()=>[n("章节 12.8")]),_:1}),n(")。")]),q,s("p",null,[n("（这是一个独立的练习，但是同时也是为"),a(t,{to:"/the-way-to-go/15.4.html"},{default:e(()=>[n("章节 15.4")]),_:1}),n(" 做准备）")]),w,s("p",null,[n("再编写一个 "),y,n(" 函数，接收的参数是字符串 "),x,n("，该函数读取出与 "),F,n(" 对应的文本文件。请使用 "),R,n(" 做为参数，因为这个结构可能相当巨大，我们不想在内存中拷贝它。请使用 "),O,n(" 包里的函数（参考"),a(t,{to:"/the-way-to-go/12.2.html"},{default:e(()=>[n("章节 12.2.1")]),_:1}),n("）。")]),E,s("ul",null,[s("li",null,[a(t,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(t,{to:"/the-way-to-go/12.1.html"},{default:e(()=>[n("读取用户的输入")]),_:1})]),s("li",null,[n("下一节："),a(t,{to:"/the-way-to-go/12.3.html"},{default:e(()=>[n("文件拷贝")]),_:1})])])])}const z=i(r,[["render",W],["__file","12.2.html.vue"]]);export{z as default};
