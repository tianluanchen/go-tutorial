import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as u,a as s,b as n,d as a,w as e,e as c}from"./app-9da01d16.js";const d={},r=s("h1",{id:"_13-3-从-panic-中恢复-recover",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_13-3-从-panic-中恢复-recover","aria-hidden":"true"},"#"),n(" 13.3 从 panic 中恢复 (recover)")],-1),k=s("p",null,[n("正如名字一样，这个 ("),s("code",null,"recover()"),n(") 内建函数被用于从 panic 或错误场景中恢复：让程序可以从 panicking 重新获得控制权，停止终止过程进而恢复正常执行。")],-1),v=s("code",null,"recover",-1),m=s("code",null,"defer",-1),g=s("code",null,"panic()",-1),f=s("code",null,"recover()",-1),_=s("code",null,"nil",-1),b=c(`<p><u>总结</u>：<code>panic()</code> 会导致栈被展开直到 <code>defer</code> 修饰的 <code>recover()</code> 被调用或者程序中止。</p><p>下面例子中的 <code>protect()</code> 函数调用函数参数 <code>g</code> 来保护调用者防止从 <code>g</code> 中抛出的运行时 panic，并展示 panic 中的信息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">protect</span><span class="token punctuation">(</span>g <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span>
		<span class="token comment">// Println executes normally even if there is a panic</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;run time panic: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>
	<span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//   possible runtime-error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这跟 Java 和 .NET 这样的语言中的 catch 块类似。</p>`,4),h=s("code",null,"log",-1),w=s("code",null,"Println",-1),y=s("code",null,"Printf",-1),x=s("code",null,"os.Exit(1)",-1),q=s("code",null,"panic()",-1),P=s("code",null,"Logger",-1),C={href:"http://golang.org/pkg/log/#Logger",target:"_blank",rel:"noopener noreferrer"},L=c(`<p>这是一个展示 <code>panic()</code>，<code>defer</code> 和 <code>recover()</code> 怎么结合使用的完整例子：</p><p>示例 13.3 <a href="examples/chapter_13/panic_recover.go">panic_recover.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// panic_recover.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">badCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;bad end&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Panicing %s\\r\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">badCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;After bad call\\r\\n&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;-- would not reach</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Calling test\\r\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Test completed\\r\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Calling test
Panicing bad end
Test completed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer</code>-<code>panic()</code>-<code>recover()</code> 在某种意义上也是一种像 <code>if</code>，<code>for</code> 这样的控制流机制。</p><p>Go 标准库中许多地方都用了这个机制，例如，<code>json</code> 包中的解码和 <code>regexp</code> 包中的 <code>Complie()</code> 函数。Go 库的原则是即使在包的内部使用了 <code>panic()</code>，在它的对外接口 (API) 中也必须用 <code>recover()</code> 处理成显式返回的错误。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,8);function E(N,T){const t=o("RouterLink"),p=o("ExternalLinkIcon");return l(),u("div",null,[r,k,s("p",null,[v,n(" 只能在 "),m,n(" 修饰的函数（参见 "),a(t,{to:"/the-way-to-go/06.4.html"},{default:e(()=>[n("6.4 节")]),_:1}),n("）中使用：用于取得 "),g,n(" 调用中传递过来的错误值，如果是正常执行，调用 "),f,n(" 会返回 "),_,n("，且没有其它效果。")]),b,s("p",null,[h,n(" 包实现了简单的日志功能：默认的 log 对象向标准错误输出中写入并打印每条日志信息的日期和时间。除了 "),w,n(" 和 "),y,n(" 函数，其它的致命性函数都会在写完日志信息后调用 "),x,n("，那些退出函数也是如此。而 Panic 效果的函数会在写完日志信息后调用 "),q,n("；可以在程序必须中止或发生了临界错误时使用它们，就像当 web 服务器不能启动时那样（参见 "),a(t,{to:"/the-way-to-go/15.4.html"},{default:e(()=>[n("15.4 节")]),_:1}),n(" 中的例子）。")]),s("p",null,[n("log 包用那些方法 (methods) 定义了一个 "),P,n(" 接口类型，如果你想自定义日志系统的话可以参考 "),s("a",C,[n("http://golang.org/pkg/log/#Logger"),a(p)]),n(" 。")]),L,s("ul",null,[s("li",null,[a(t,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(t,{to:"/the-way-to-go/13.2.html"},{default:e(()=>[n("错运行时异常和 panic")]),_:1})]),s("li",null,[n("下一节："),a(t,{to:"/the-way-to-go/13.4.html"},{default:e(()=>[n("自定义包中的错误处理和 panicking")]),_:1})])])])}const I=i(d,[["render",E],["__file","13.3.html.vue"]]);export{I as default};
