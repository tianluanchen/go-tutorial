import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as r,c,a,d as l,w as i,b as e,e as d}from"./app-9da01d16.js";const s="/go-tutorial/assets/navi10-586f5d3e.png?raw=true",p={},h=d('<h1 id="_10-国际化和本地化" tabindex="-1"><a class="header-anchor" href="#_10-国际化和本地化" aria-hidden="true">#</a> 10 国际化和本地化</h1><p>为了适应经济的全球一体化，作为开发者，我们需要开发出支持多国语言、国际化的Web应用，即同样的页面在不同的语言环境下需要显示不同的效果，也就是说应用程序在运行时能够根据请求所来自的地域与语言的不同而显示不同的用户界面。这样，当需要在应用程序中添加对新的语言的支持时，无需修改应用程序的代码，只需要增加语言包即可实现。</p><p>国际化与本地化（Internationalization and localization,通常用i18n和L10N表示），国际化是将针对某个地区设计的程序进行重构，以使它能够在更多地区使用，本地化是指在一个面向国际化的程序中增加对新地区的支持。</p><p>目前，Go语言的标准包没有提供对i18n的支持，但有一些比较简单的第三方实现，这一章我们将实现一个go-i18n库，用来支持Go语言的i18n。</p><p>所谓的国际化：就是根据特定的locale信息，提取与之相应的字符串或其它一些东西（比如时间和货币的格式）等等。这涉及到三个问题：</p><p>1、如何确定locale。</p><p>2、如何保存与locale相关的字符串或其它信息。</p><p>3、如何根据locale提取字符串和其它相应的信息。</p><p>在第一小节里，我们将介绍如何设置正确的locale以便让访问站点的用户能够获得与其语言相应的页面。第二小节将介绍如何处理或存储字符串、货币、时间日期等与locale相关的信息，第三小节将介绍如何实现国际化站点，即如何根据不同locale返回不同合适的内容。通过这三个小节的学习，我们将获得一个完整的i18n方案。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>',12);function u(_,f){const t=n("RouterLink");return r(),c("div",null,[h,a("ul",null,[a("li",null,[l(t,{to:"/build-web-app/preface.html"},{default:i(()=>[e("目录")]),_:1})]),a("li",null,[e("上一章: "),l(t,{to:"/build-web-app/09.7.html"},{default:i(()=>[e("第九章总结")]),_:1})]),a("li",null,[e("下一节: "),l(t,{to:"/build-web-app/10.1.html"},{default:i(()=>[e("设置默认地区")]),_:1})])])])}const g=o(p,[["render",u],["__file","10.0.html.vue"]]);export{g as default};
