const t=JSON.parse('{"key":"v-6eb9fa24","path":"/the-way-to-go/10.2.html","title":"10.2 使用工厂方法创建结构体实例","lang":"zh-CN","frontmatter":{"description":"10.2.1 结构体工厂 Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂”方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 new... 或 New... 开头。假设定义了如下的 File 结构体类型： 下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针： 然后这样调用它：...","head":[["meta",{"property":"og:url","content":"https://tianluanchen.github.io/go-tutorial/the-way-to-go/10.2.html"}],["meta",{"property":"og:site_name","content":"Go 优选教程"}],["meta",{"property":"og:title","content":"10.2 使用工厂方法创建结构体实例"}],["meta",{"property":"og:description","content":"10.2.1 结构体工厂 Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现 “构造子工厂”方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以 new... 或 New... 开头。假设定义了如下的 File 结构体类型： 下面是这个结构体类型对应的工厂方法，它返回一个指向结构体实例的指针： 然后这样调用它：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-16T16:30:25.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-16T16:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10.2 使用工厂方法创建结构体实例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-16T16:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"10.2.1 结构体工厂","slug":"_10-2-1-结构体工厂","link":"#_10-2-1-结构体工厂","children":[]},{"level":2,"title":"10.2.2 map 和 struct vs new() 和 make()","slug":"_10-2-2-map-和-struct-vs-new-和-make","link":"#_10-2-2-map-和-struct-vs-new-和-make","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]}],"git":{"updatedTime":1694881825000,"contributors":[{"name":"tianluanchen","email":"zxl-life@outlook.com","commits":1}]},"readingTime":{"minutes":2.6,"words":780},"filePathRelative":"the-way-to-go/10.2.md","autoDesc":true,"excerpt":""}');export{t as data};
