import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as l,a as s,b as n,d as e,w as o,e as i}from"./app-9da01d16.js";const r={},d=s("h1",{id:"_14-6-协程和恢复-recover",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_14-6-协程和恢复-recover","aria-hidden":"true"},"#"),n(" 14.6 协程和恢复 (recover)")],-1),u=s("code",null,"recover()",-1),k=i(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">server</span><span class="token punctuation">(</span>workChan <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token operator">*</span>Work<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> work <span class="token operator">:=</span> <span class="token keyword">range</span> workChan <span class="token punctuation">{</span>
        <span class="token keyword">go</span> <span class="token function">safelyDo</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span>   <span class="token comment">// start the goroutine for that work</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">safelyDo</span><span class="token punctuation">(</span>work <span class="token operator">*</span>Work<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Work failed with %s in %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> work<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">do</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的代码，如果 <code>do(work)</code> 发生 <code>panic()</code>，错误会被记录且协程会退出并释放，而其他协程不受影响。</p><p>因为 <code>recover()</code> 总是返回 <code>nil</code>，除非直接在 <code>defer</code> 修饰的函数中调用，<code>defer</code> 修饰的代码可以调用那些自身可以使用 <code>panic()</code> 和 <code>recover()</code> 避免失败的库例程（库函数）。举例，<code>safelyDo()</code> 中 <code>defer</code> 修饰的函数可能在调用 <code>recover()</code> 之前就调用了一个 <code>logging()</code> 函数，panicking 状态不会影响 <code>logging()</code> 代码的运行。因为加入了恢复模式，函数 <code>do()</code>（以及它调用的任何东西）可以通过调用 <code>panic()</code> 来摆脱不好的情况。但是恢复是在 panicking 的协程内部的：不能被另外一个协程恢复。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,4);function v(f,h){const a=c("RouterLink");return p(),l("div",null,[d,s("p",null,[n("一个用到 "),u,n(" 的程序（参见"),e(a,{to:"/the-way-to-go/13.3.html"},{default:o(()=>[n("第 13.3 节")]),_:1}),n("停掉了服务器内部一个失败的协程而不影响其他协程的工作。")]),k,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:o(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/14.5.html"},{default:o(()=>[n("通道，超时和计时器")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/14.7.html"},{default:o(()=>[n("对比新旧模型：任务和工作")]),_:1})])])])}const w=t(r,[["render",v],["__file","14.6.html.vue"]]);export{w as default};
