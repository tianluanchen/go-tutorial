import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as s,b as n,d as a,w as e,e as u}from"./app-9da01d16.js";const r={},d=s("h1",{id:"_9-2-regexp-包",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_9-2-regexp-包","aria-hidden":"true"},"#"),n(" 9.2 regexp 包")],-1),k={href:"http://en.wikipedia.org/wiki/Regular_expression",target:"_blank",rel:"noopener noreferrer"},v=u(`<p>在下面的程序里，我们将在字符串中对正则表达式模式 (pattern) 进行匹配。</p><p>如果是简单模式，使用 <code>Match()</code> 方法便可：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>searchIn<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>变量 <code>ok</code> 将返回 <code>true</code> 或者 <code>false</code>，我们也可以使用 <code>MatchString()</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> searchIn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多方法中，必须先将正则模式通过 <code>Compile()</code> 方法返回一个 <code>Regexp</code> 对象。然后我们将掌握一些匹配，查找，替换相关的功能。</p><p>示例 9.2 <a href="examples/chapter_9/pattern.go">pattern.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;regexp&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//目标字符串</span>
	searchIn <span class="token operator">:=</span> <span class="token string">&quot;John: 2578.34 William: 4567.23 Steve: 5632.18&quot;</span>
	pat <span class="token operator">:=</span> <span class="token string">&quot;[0-9]+.[0-9]+&quot;</span> <span class="token comment">//正则</span>

	f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		v<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>searchIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Match Found!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	re<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span>
	<span class="token comment">//将匹配到的部分替换为&quot;##.#&quot;</span>
	str <span class="token operator">:=</span> re<span class="token punctuation">.</span><span class="token function">ReplaceAllString</span><span class="token punctuation">(</span>searchIn<span class="token punctuation">,</span> <span class="token string">&quot;##.#&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	<span class="token comment">//参数为函数时</span>
	str2 <span class="token operator">:=</span> re<span class="token punctuation">.</span><span class="token function">ReplaceAllStringFunc</span><span class="token punctuation">(</span>searchIn<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>Match Found!
John: ##.# William: ##.# Steve: ##.#
John: 5156.68 William: 9134.46 Steve: 11264.36
</code></pre>`,10),m=s("code",null,"Compile()",-1),b=s("code",null,"MustCompile()",-1),h=s("code",null,"Compile()",-1),g=s("code",null,"panic()",-1),_=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function f(x,q){const p=o("ExternalLinkIcon"),t=o("RouterLink");return l(),i("div",null,[d,s("p",null,[n("正则表达式语法和使用的详细信息请参考 "),s("a",k,[n("维基百科"),a(p)]),n("。")]),v,s("p",null,[m,n(" 函数也可能返回一个错误，我们在使用时忽略对错误的判断是因为我们确信自己正则表达式是有效的。当用户输入或从数据中获取正则表达式的时候，我们有必要去检验它的正确性。另外我们也可以使用 "),b,n(" 方法，它可以像 "),h,n(" 方法一样检验正则的有效性，但是当正则不合法时程序将 "),g,n("（详情查看"),a(t,{to:"/the-way-to-go/13.2.html"},{default:e(()=>[n("第 13.2 节")]),_:1}),n("）。")]),_,s("ul",null,[s("li",null,[a(t,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(t,{to:"/the-way-to-go/09.1.html"},{default:e(()=>[n("标准库概述")]),_:1})]),s("li",null,[n("下一节："),a(t,{to:"/the-way-to-go/09.3.html"},{default:e(()=>[n("锁和 sync 包")]),_:1})])])])}const I=c(r,[["render",f],["__file","09.2.html.vue"]]);export{I as default};
