import{_ as r}from"./1.1.mac-a5340d0a.js";import{_ as g}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as p,a as o,b as e,d,w as l,e as c}from"./app-9da01d16.js";const s={},h=c('<h1 id="_1-3-go-命令" tabindex="-1"><a class="header-anchor" href="#_1-3-go-命令" aria-hidden="true">#</a> 1.3 Go 命令</h1><h2 id="go-命令" tabindex="-1"><a class="header-anchor" href="#go-命令" aria-hidden="true">#</a> Go 命令</h2><p>Go语言自带有一套完整的命令操作工具，你可以通过在命令行中执行<code>go</code>来查看它们：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图1.3 Go命令显示详细的信息</p><p>这些命令对于我们平时编写的代码非常有用，接下来就让我们了解一些常用的命令。</p><h2 id="go-build" tabindex="-1"><a class="header-anchor" href="#go-build" aria-hidden="true">#</a> go build</h2><p>这个命令主要用于编译代码。在包的编译过程中，若有必要，会同时编译与之相关联的包。</p><ul><li><p>如果是普通包，就像我们在1.2节中编写的<code>mymath</code>包那样，当你执行<code>go build</code>之后，它不会产生任何文件。如果你需要在<code>$GOPATH/pkg</code>下生成相应的文件，那就得执行<code>go install</code>。</p></li><li><p>如果是<code>main</code>包，当你执行<code>go build</code>之后，它就会在当前目录下生成一个可执行文件。如果你需要在<code>$GOPATH/bin</code>下生成相应的文件，需要执行<code>go install</code>，或者使用<code>go build -o 路径/a.exe</code>。</p></li><li><p>如果某个项目文件夹下有多个文件，而你只想编译某个文件，就可在<code>go build</code>之后加上文件名，例如<code>go build a.go</code>；<code>go build</code>命令默认会编译当前目录下的所有go文件。</p></li><li><p>你也可以指定编译输出的文件名。例如1.2节中的<code>mathapp</code>应用，我们可以指定<code>go build -o astaxie.exe</code>，默认情况是你的package名(非main包)，或者是第一个源文件的文件名(main包)。</p></li></ul>',9),u={href:"https://golang.org/ref/spec",target:"_blank",rel:"noopener noreferrer"},f=c("<ul><li><p>go build会忽略目录下以“_”或“.”开头的go文件。</p></li><li><p>如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的操作系统后缀来命名文件。例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件：</p><p>array_linux.go<br> array_darwin.go<br> array_windows.go<br> array_freebsd.go</p></li></ul><p><code>go build</code>的时候会选择性地编译以系统名结尾的文件（Linux、Darwin、Windows、Freebsd）。例如Linux系统下面编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。</p><p>参数的介绍</p>",3),b=c("<li><code>-o</code> 指定输出的文件名，可以带上路径，例如 <code>go build -o a/b/c</code></li><li><code>-i</code> 安装相应的包，编译+<code>go install</code></li><li><code>-a</code> 更新全部已经是最新的包的，但是对标准包不适用</li><li><code>-n</code> 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li><li><code>-p n</code> 指定可以并行可运行的编译数目，默认是CPU数目</li><li><code>-race</code> 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器</li><li><code>-v</code> 打印出来我们正在编译的包名</li><li><code>-work</code> 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除</li><li><code>-x</code> 打印出来执行的命令，其实就是和<code>-n</code>的结果类似，只是这个会执行</li><li><code>-ccflags &#39;arg list&#39;</code> 传递参数给5c, 6c, 8c 调用</li><li><code>-compiler name</code> 指定相应的编译器，gccgo还是gc</li><li><code>-gccgoflags &#39;arg list&#39;</code> 传递参数给gccgo编译连接调用</li><li><code>-gcflags &#39;arg list&#39;</code> 传递参数给5g, 6g, 8g 调用</li><li><code>-installsuffix suffix</code> 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，<code>-race</code>的时候默认已经是<code>-installsuffix race</code>,大家可以通过<code>-n</code>命令来验证</li><li><code>-ldflags &#39;flag list&#39;</code> 传递参数给5l, 6l, 8l 调用</li>",15),m=o("code",null,"-tags 'tag list'",-1),_={href:"http://golang.org/pkg/go/build/",target:"_blank",rel:"noopener noreferrer"},x=c(`<h2 id="go-clean" tabindex="-1"><a class="header-anchor" href="#go-clean" aria-hidden="true">#</a> go clean</h2><p>这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。这些文件包括</p><pre><code>_obj/            旧的object目录，由Makefiles遗留
_test/           旧的test目录，由Makefiles遗留
_testmain.go     旧的gotest文件，由Makefiles遗留
test.out         旧的test记录，由Makefiles遗留
build.out        旧的test记录，由Makefiles遗留
*.[568ao]        object文件，由Makefiles遗留

DIR(.exe)        由go build产生
DIR.test(.exe)   由go test -c产生
MAINFILE(.exe)   由go build MAINFILE.go产生
*.so             由 SWIG 产生
</code></pre><p>我一般都是利用这个命令清除编译文件，然后GitHub递交源码，在本机测试的时候这些编译文件都是和系统相关的，但是对于源码管理来说没必要。</p><pre><code>$ go clean -i -n
cd /Users/astaxie/develop/gopath/src/mathapp
rm -f mathapp mathapp.exe mathapp.test mathapp.test.exe app app.exe
rm -f /Users/astaxie/develop/gopath/bin/mathapp
</code></pre><p>参数介绍</p><ul><li><code>-i</code> 清除关联的安装的包和可运行文件，也就是通过go install安装的文件</li><li><code>-n</code> 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li><li><code>-r</code> 循环的清除在import中引入的包</li><li><code>-x</code> 打印出来执行的详细命令，其实就是<code>-n</code>打印的执行版本</li></ul><h2 id="go-fmt" tabindex="-1"><a class="header-anchor" href="#go-fmt" aria-hidden="true">#</a> go fmt</h2><p>有过C/C++经验的读者会知道,一些人经常为代码采取K&amp;R风格还是ANSI风格而争论不休。在go中，代码则有标准的风格。由于之前已经有的一些习惯或其它的原因我们常将代码写成ANSI风格或者其它更合适自己的格式，这将为人们在阅读别人的代码时添加不必要的负担，所以go强制了代码格式（比如左大括号必须放在行尾），不按照此格式的代码将不能编译通过，为了减少浪费在排版上的时间，go工具集中提供了一个<code>go fmt</code>命令 它可以帮你格式化你写好的代码文件，使你写代码的时候不需要关心格式，你只需要在写完之后执行<code>go fmt &lt;文件名&gt;.go</code>，你的代码就被修改成了标准格式，但是我平常很少用到这个命令，因为开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是调用了<code>go fmt</code>。接下来的一节我将讲述两个工具，这两个工具都自带了保存文件时自动化<code>go fmt</code>功能。</p><p>使用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。gofmt -w -l src，可以格式化整个项目。</p>`,10),k={href:"http://golang.org/cmd/gofmt/",target:"_blank",rel:"noopener noreferrer"},G=c(`<p>gofmt的参数介绍</p><ul><li><code>-l</code> 显示那些需要格式化的文件</li><li><code>-w</code> 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。</li><li><code>-r</code> 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换</li><li><code>-s</code> 简化文件中的代码</li><li><code>-d</code> 显示格式化前后的diff而不是写入文件，默认是false</li><li><code>-e</code> 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。</li><li><code>-cpuprofile</code> 支持调试模式，写入相应的cpufile到指定的文件</li></ul><h2 id="go-get" tabindex="-1"><a class="header-anchor" href="#go-get" aria-hidden="true">#</a> go get</h2><p>这个命令是用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad。这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行<code>go install</code>。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，对应关系如下：</p><pre><code>BitBucket (Mercurial Git)
GitHub (Git)
Google Code Project Hosting (Git, Mercurial, Subversion)
Launchpad (Bazaar)
</code></pre><p>所以为了<code>go get</code> 能正常工作，你必须确保安装了合适的源码管理工具，并同时把这些命令加入你的PATH中。其实<code>go get</code>支持自定义域名的功能，具体参见<code>go help remote</code>。</p><p>参数介绍：</p><ul><li><code>-d</code> 只下载不安装</li><li><code>-f</code> 只有在你包含了<code>-u</code>参数的时候才有效，不让<code>-u</code>去验证import中的每一个都已经获取了，这对于本地fork的包特别有用</li><li><code>-fix</code> 在获取源码之后先运行fix，然后再去做其他的事情</li><li><code>-t</code> 同时也下载需要为运行测试所需要的包</li><li><code>-u</code> 强制使用网络去更新包和它的依赖包</li><li><code>-v</code> 显示执行的命令</li></ul><h2 id="go-install" tabindex="-1"><a class="header-anchor" href="#go-install" aria-hidden="true">#</a> go install</h2><p>这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>。</p><p>参数支持<code>go build</code>的编译参数。大家只要记住一个参数<code>-v</code>就好了，这个随时随地的可以查看底层的执行信息。</p><h2 id="go-test" tabindex="-1"><a class="header-anchor" href="#go-test" aria-hidden="true">#</a> go test</h2><p>执行这个命令，会自动读取源码目录下面名为<code>*_test.go</code>的文件，生成并运行测试用的可执行文件。输出的信息类似</p><pre><code>ok   archive/tar   0.011s
FAIL archive/zip   0.022s
ok   compress/gzip 0.033s
...
</code></pre><p>默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考<code>go help testflag</code></p><p>这里我介绍几个我们常用的参数：</p><ul><li><code>-bench regexp</code> 执行相应的benchmarks，例如 <code>-bench=.</code></li><li><code>-cover</code> 开启测试覆盖率</li><li><code>-run regexp</code> 只运行regexp匹配的函数，例如 <code>-run=Array</code> 那么就执行包含有Array开头的函数</li><li><code>-v</code> 显示测试的详细命令</li></ul><h2 id="go-tool" tabindex="-1"><a class="header-anchor" href="#go-tool" aria-hidden="true">#</a> go tool</h2><p><code>go tool</code>下面下载聚集了很多命令，这里我们只介绍两个，fix和vet</p><ul><li><code>go tool fix .</code> 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化</li><li><code>go tool vet directory|files</code> 用来分析当前目录的代码是否都是正确的代码,例如是不是调用fmt.Printf里面的参数不正确，例如函数里面提前return了然后出现了无用代码之类的。</li></ul><h2 id="go-generate" tabindex="-1"><a class="header-anchor" href="#go-generate" aria-hidden="true">#</a> go generate</h2><p>这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。<code>go generate</code>和<code>go build</code>是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个<code>go generate</code>是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的。</p><p>这里我们来举一个简单的例子，例如我们经常会使用<code>yacc</code>来生成代码，那么我们常用这样的命令：</p><pre><code>go tool yacc -o gopher.go -p parser gopher.y
</code></pre><p>-o 指定了输出的文件名， -p指定了package的名称，这是一个单独的命令，如果我们想让<code>go generate</code>来触发这个命令，那么就可以在当前目录的任意一个<code>xxx.go</code>文件里面的任意位置增加一行如下的注释：</p><pre><code>//go:generate go tool yacc -o gopher.go -p parser gopher.y
</code></pre><p>这里我们注意了，<code>//go:generate</code>是没有任何空格的，这其实就是一个固定的格式，在扫描源码文件的时候就是根据这个来判断的。</p><p>所以我们可以通过如下的命令来生成，编译，测试。如果<code>gopher.y</code>文件有修改，那么就重新执行<code>go generate</code>重新生成文件就好。</p><pre><code>$ go generate
$ go build
$ go test
</code></pre><h2 id="godoc" tabindex="-1"><a class="header-anchor" href="#godoc" aria-hidden="true">#</a> godoc</h2><p>在Go1.2版本之前还支持<code>go doc</code>命令，但是之后全部移到了godoc这个命令下，需要这样安装<code>go get golang.org/x/tools/cmd/godoc</code></p>`,31),v={href:"https://github.com/astaxie/godoc",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>如何查看相应package的文档呢？<br> 例如builtin包，那么执行<code>godoc builtin</code><br> 如果是http包，那么执行<code>godoc net/http</code><br> 查看某一个包里面的函数，那么执行<code>godoc fmt Printf</code><br> 也可以查看相应的代码，执行<code>godoc -src fmt Printf</code></p><p>通过命令在命令行执行 godoc -http=:端口号 比如<code>godoc -http=:8080</code>。然后在浏览器中打开<code>127.0.0.1:8080</code>，你将会看到一个golang.org的本地copy版本，通过它你可以查询pkg文档等其它内容。如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档，还会列出你本地<code>GOPATH</code>中所有项目的相关文档，这对于经常被墙的用户来说是一个不错的选择。</p><h2 id="其它命令" tabindex="-1"><a class="header-anchor" href="#其它命令" aria-hidden="true">#</a> 其它命令</h2><p>go还提供了其它很多的工具，例如下面的这些工具</p><pre><code>go version 查看go当前的版本
go env 查看当前go的环境变量
go list 列出当前全部安装的package
go run 编译并运行Go程序
</code></pre><p>以上这些工具还有很多参数没有一一介绍，用户可以使用<code>go help 命令</code>获取更详细的帮助信息。</p><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>`,7);function A(w,P){const a=t("ExternalLinkIcon"),i=t("RouterLink");return n(),p("div",null,[h,o("p",null,[e("（注：实际上，package名在"),o("a",u,[e("Go语言规范"),d(a)]),e("中指代码中“package”后使用的名称，此名称可以与文件夹名不同。默认生成的可执行文件名是文件夹名。）")]),f,o("ul",null,[b,o("li",null,[m,e(" 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 "),o("a",_,[e("Build Constraints"),d(a)])])]),x,o("p",null,[e("所以go fmt是gofmt的上层一个包装的命令，我们想要更多的个性化的格式化可以参考 "),o("a",k,[e("gofmt"),d(a)])]),G,o("p",null,[e("很多人说go不需要任何的第三方文档，例如chm手册之类的（其实我已经做了一个了，"),o("a",v,[e("chm手册"),d(a)]),e("），因为它内部就有一个很强大的文档工具。")]),y,o("ul",null,[o("li",null,[d(i,{to:"/build-web-app/preface.html"},{default:l(()=>[e("目录")]),_:1})]),o("li",null,[e("上一节: "),d(i,{to:"/build-web-app/01.2.html"},{default:l(()=>[e("Go Module, GOPATH与工作空间")]),_:1})]),o("li",null,[e("下一节: "),d(i,{to:"/build-web-app/01.4.html"},{default:l(()=>[e("Go开发工具")]),_:1})])])])}const M=g(s,[["render",A],["__file","01.3.html.vue"]]);export{M as default};
