import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as s,d as e,w as t,b as n,e as i}from"./app-9da01d16.js";const u={},r=i(`<h1 id="_19-9-使用代理缓存" tabindex="-1"><a class="header-anchor" href="#_19-9-使用代理缓存" aria-hidden="true">#</a> 19.9 使用代理缓存</h1><p><code>URLStore</code> 已经成为了有效的 RPC 服务，现在可以创建另一种代表 RPC 客户端的类型，它会转发请求到 RPC 服务器，我们称它为 <code>ProxyStore</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ProxyStore <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 RPC 客户端必须使用 <code>DialHTTP()</code> 方法连接到服务器，所以我们把这句加入 <code>NewProxyStore()</code> 函数，它用于创建 <code>ProxyStore</code> 对象。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewProxyStore</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>ProxyStore <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error constructing ProxyStore:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>ProxyStore<span class="token punctuation">{</span>client<span class="token punctuation">:</span> client<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProxyStore</code> 有 <code>Get()</code> 和 <code>Put()</code> 方法，它们利用 RPC 客户端的 <code>Call()</code> 方法，将请求直接传递给服务器：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ProxyStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Store.Get&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ProxyStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Store.Put&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="带缓存的-proxystore" tabindex="-1"><a class="header-anchor" href="#带缓存的-proxystore" aria-hidden="true">#</a> 带缓存的 ProxyStore</h2><p>可是，如果 slave 进程只是简单地代理所有的工作到 master 节点，不会得到任何增益！我们打算用 slave 节点来应对 <code>Get()</code> 请求。要做到这点，它们必须有 <code>URLStore</code> 中 <code>map</code> 的一份副本（缓存）。因此我们对 <code>ProxyStore</code> 的定义进行扩展，将 <code>URLStore</code> 包含在其中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ProxyStore <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	urls <span class="token operator">*</span>URLStore
	client <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NewProxyStore()</code> 也必须做修改：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewProxyStore</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>ProxyStore <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ProxyStore:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>ProxyStore<span class="token punctuation">{</span>urls<span class="token punctuation">:</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">:</span> client<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还必须修改 <code>NewURLStore()</code> 以便给出空文件名时，不会尝试从磁盘写入或读取文件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>URLStore <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token operator">&amp;</span>URLStore<span class="token punctuation">{</span>urls<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token keyword">if</span> filename <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span>save <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> record<span class="token punctuation">,</span> saveQueueLength<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error loading URLStore: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">go</span> s<span class="token punctuation">.</span><span class="token function">saveLoop</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProxyStore</code> 的 <code>Get()</code> 方法需要扩展：<strong>它应该首先检查缓存中是否有对应的键</strong>。如果有，<code>Get()</code> 返回已缓存的结果。否则，应该发起 RPC 调用，然后用返回结果更新其本地缓存：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ProxyStore<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>urls<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// url found in local map</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// url not found in local map, make rpc-call:</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Store.Get&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>urls<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，<code>Put()</code> 方法仅当成功完成了远程 RPC <code>Put()</code> 调用，才更新本地缓存：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ProxyStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;Store.Put&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	s<span class="token punctuation">.</span>urls<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总" aria-hidden="true">#</a> 汇总</h2><p>slave 节点使用 <code>ProxyStore</code>，只有 master 使用 <code>URLStore</code>。有鉴于创造它们的方式，它们看上去十分一致：两者都实现了相同签名的 <code>Get()</code> 和 <code>Put()</code> 方法，因此我们可以指定一个 <code>Store</code> 接口来概括它们的行为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Store <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在全局变量 <code>store</code> 可以成为 <code>Store</code> 类型：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> store Store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们改写 <code>main()</code> 函数以便程序只作为 master 或 slave 启动（我们只能这么做，因为现在 store 是 <code>Store</code> 接口类型！）。</p><p>为此我们添加一个没有默认值的新命令行标志 <code>masterAddr</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> masterAddr <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;master&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RPC master address&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果给出 master 地址，就启动一个 slave 进程并创建新的 <code>ProxyStore</code>；否则启动 master 进程并创建新的 <code>URLStore</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">*</span>masterAddr <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span> <span class="token comment">// we are a slave</span>
		store <span class="token operator">=</span> <span class="token function">NewProxyStore</span><span class="token punctuation">(</span><span class="token operator">*</span>masterAddr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// we are the master</span>
		store <span class="token operator">=</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token operator">*</span>dataFile<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们已启用了 <code>ProxyStore</code> 作为 web 前端，以代替 <code>URLStore</code>。</p><p>其余的前端代码继续和之前一样地工作，它们不必在意 <code>Store</code> 接口。只有 master 进程会写数据文件。</p><p>现在可以加载一个 master 节点和数个 slave 节点，对 slave 进行压力测试。</p><p>编译这个版本 4 或直接使用现有的可执行程序。</p><p>要进行测试，首先在命令行用以下命令启动 master 节点：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./goto <span class="token parameter variable">-http</span><span class="token operator">=</span>:8081 <span class="token parameter variable">-rpc</span><span class="token operator">=</span>true	<span class="token comment"># （Windows 平台用 goto 代替 ./goto）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里提供了 2 个标志：master 监听 8081 端口，已启用 RPC。</p><p>slave 节点用以下命令启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./goto <span class="token parameter variable">-master</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:8081
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它获取到 master 的地址，并在 8080 端口接受客户端请求。</p><p>在源码目录下已包含了以下 shell 脚本 <a href="examples/chapter_19/goto_v5/demo.sh">demo.sh</a>，用来在类 Unix 系统下自动启动程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
gomake
./goto <span class="token parameter variable">-http</span><span class="token operator">=</span>:8081 <span class="token parameter variable">-rpc</span><span class="token operator">=</span>true <span class="token operator">&amp;</span>
<span class="token assign-left variable">master_pid</span><span class="token operator">=</span><span class="token variable">$!</span>
<span class="token function">sleep</span> <span class="token number">1</span>
./goto <span class="token parameter variable">-master</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:8081 <span class="token operator">&amp;</span>
<span class="token assign-left variable">slave_pid</span><span class="token operator">=</span><span class="token variable">$!</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Running master on :8081, slave on :8080.&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Visit: http://localhost:8080/add&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Press enter to shut down&quot;</span>
<span class="token builtin class-name">read</span>
<span class="token function">kill</span> <span class="token variable">$master_pid</span>
<span class="token function">kill</span> <span class="token variable">$slave_pid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在 Windows 下测试，启动 MINGW shell 并启动 master，然后每个 slave 都要单独启动新的 MINGW shell 并启动 slave 进程。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,42);function d(k,v){const a=p("RouterLink");return c(),l("div",null,[r,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/19.8.html"},{default:t(()=>[n("多服务器处理架构")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/19.10.html"},{default:t(()=>[n("总结和增强")]),_:1})])])])}const g=o(u,[["render",d],["__file","19.9.html.vue"]]);export{g as default};
