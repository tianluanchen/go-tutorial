import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,a as s,b as n,d as t,w as e,e as i}from"./app-9da01d16.js";const u={},r=s("h1",{id:"_16-10-糟糕的错误处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_16-10-糟糕的错误处理","aria-hidden":"true"},"#"),n(" 16.10 糟糕的错误处理")],-1),d=i(`<h2 id="_16-10-1-不要使用布尔值" tabindex="-1"><a class="header-anchor" href="#_16-10-1-不要使用布尔值" aria-hidden="true">#</a> 16.10.1 不要使用布尔值：</h2><p>像下面代码一样，创建一个布尔型变量用于测试错误条件是多余的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> good <span class="token builtin">bool</span>
    <span class="token comment">// 测试一个错误，\`good\` 被赋为 \`true\` 或者 \`false\`</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>good <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;things aren’t good&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>立即检测一个错误：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">...</span> err1 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-10-2-避免错误检测使代码变得混乱" tabindex="-1"><a class="header-anchor" href="#_16-10-2-避免错误检测使代码变得混乱" aria-hidden="true">#</a> 16.10.2 避免错误检测使代码变得混乱：</h2><p>避免写出这样的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">...</span> err1 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;err: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>
err2 <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
<span class="token operator">...</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，包括在一个初始化的 <code>if</code> 语句中对函数的调用。但即使代码中到处都是以 <code>if</code> 语句的形式通知错误（通过打印错误信息）。通过这种方式，很难分辨什么是正常的程序逻辑，什么是错误检测或错误通知。还需注意的是，大部分代码都是致力于错误的检测。通常解决此问题的好办法是尽可能以闭包的形式封装你的错误检测，例如下面的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">httpRequestHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">:=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;expected GET&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> input <span class="token operator">:=</span> <span class="token function">parseInput</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> input <span class="token operator">!=</span> <span class="token string">&quot;command&quot;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;malformed command&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 可以在此进行其他的错误检测</span>
    <span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
            io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k=s("ul",null,[s("li",null,[s("p",null,[n("问题 16.1：总结你能记住的所有关于 "),s("code",null,", ok"),n(" 模式的情况。")])]),s("li",null,[s("p",null,[n("问题 16.2：总结你能记住的所有关于 "),s("code",null,"defer"),n(" 模式的情况。")])])],-1),v=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function m(h,b){const a=p("RouterLink");return l(),c("div",null,[r,s("p",null,[n("译者注：该小结关于错误处理的观点，译者并不完全赞同，关于本小结的部分想法请参考 "),t(a,{to:"/the-way-to-go/Discussion_about_16.10.html"},{default:e(()=>[n("关于 16.10.2 小节错误处理的一些见解")]),_:1}),n("。")]),s("p",null,[n("依附于"),t(a,{to:"/the-way-to-go/13.0.html"},{default:e(()=>[n("第 13 章")]),_:1}),n("模式的描述和"),t(a,{to:"/the-way-to-go/17.1.html"},{default:e(()=>[n("第 17.1 小节")]),_:1}),n("与"),t(a,{to:"/the-way-to-go/17.2.html"},{default:e(()=>[n("第 17.2.4 小节")]),_:1}),n("的总结。")]),d,s("p",null,[n("这种方法可以很容易分辨出错误检测、错误通知和正常的程序逻辑（更详细的方式参考"),t(a,{to:"/the-way-to-go/13.5.html"},{default:e(()=>[n("第 13.5 小节")]),_:1}),n("）。")]),s("p",null,[s("strong",null,[n("在开始阅读"),t(a,{to:"/the-way-to-go/17.0.html"},{default:e(()=>[n("第 17 章")]),_:1}),n("前，先回答下列 2 个问题：")])]),k,v,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/16.9.html"},{default:e(()=>[n("闭包和协程的使用")]),_:1})]),s("li",null,[n("下一章："),t(a,{to:"/the-way-to-go/17.0.html"},{default:e(()=>[n("Go 语言模式")]),_:1})])])])}const _=o(u,[["render",m],["__file","16.10.html.vue"]]);export{_ as default};
