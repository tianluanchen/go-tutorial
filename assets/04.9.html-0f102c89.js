import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as l,a as s,b as n,d as a,w as o,e as p}from"./app-9da01d16.js";const d="/go-tutorial/assets/4.9_fig4.4-6d16e655.png?raw=true",u="/go-tutorial/assets/4.9_fig4.5-7092dadd.png?raw=true",k={},m=p(`<h1 id="_4-9-指针" tabindex="-1"><a class="header-anchor" href="#_4-9-指针" aria-hidden="true">#</a> 4.9 指针</h1><p>不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go 语言允许你控制特定集合的数据结构、分配的数量以及内存访问模式，这些对构建运行良好的系统是非常重要的：指针对于性能的影响是不言而喻的，而如果你想要做的是系统编程、操作系统或者网络应用，指针更是不可或缺的一部分。</p><p>由于各种原因，指针对于使用面向对象编程的现代程序员来说可能显得有些陌生，不过我们将会在这一小节对此进行解释，并在未来的章节中展开深入讨论。</p><p>程序在内存中存储它的值，每个内存块（或字）有一个地址，通常用十六进制数表示，如：<code>0x6b0820</code> 或 <code>0xf84001d7f0</code>。</p><p>Go 语言的取地址符是 <code>&amp;</code>，放到一个变量前使用就会返回相应变量的内存地址。</p><p>下面的代码片段（示例 4.9 <a href="examples/chapter_4/pointer.go">pointer.go</a>）可能输出 <code>An integer: 5, its location in memory: 0x6b0820</code>（这个值随着你每次运行程序而变化）。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">5</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An integer: %d, it&#39;s location in memory: %p\\n&quot;</span><span class="token punctuation">,</span> i1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个地址可以存储在一个叫做指针的特殊数据类型中，在本例中这是一个指向 int 的指针，即 <code>i1</code>：此处使用 <code>*int</code> 表示。如果我们想调用指针 <code>intP</code>，我们可以这样声明它：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> intP <span class="token operator">*</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用 <code>intP = &amp;i1</code> 是合法的，此时 <code>intP</code> 指向 <code>i1</code>。</p><p>（指针的格式化标识符为 <code>%p</code>）</p><p><code>intP</code> 存储了 <code>i1</code> 的内存地址；它指向了 <code>i1</code> 的位置，它引用了变量 <code>i1</code>。</p><p><strong>一个指针变量可以指向任何一个值的内存地址</strong> 它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。当然，可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 <code>*</code> 号（前缀）来获取指针所指向的内容，这里的 <code>*</code> 号是一个类型更改器。使用一个指针引用一个值被称为间接引用。</p><p>当一个指针被定义后没有分配到任何变量时，它的值为 <code>nil</code>。</p><p>一个指针变量通常缩写为 <code>ptr</code>。</p><p><strong>注意事项</strong></p><p>在书写表达式类似 <code>var p *type</code> 时，切记在 * 号和指针名称间留有一个空格，因为 <code>- var p*type</code> 是语法正确的，但是在更复杂的表达式中，它容易被误认为是一个乘法表达式！</p><p>符号 * 可以放在一个指针前，如 <code>*intP</code>，那么它将得到这个指针指向地址上所存储的值；这被称为反引用（或者内容或者间接引用）操作符；另一种说法是指针转移。</p><p>对于任何一个变量 <code>var</code>， 如下表达式都是正确的：<code>var == *(&amp;var)</code>。</p><p>现在，我们应当能理解 pointer.go 的全部内容及其输出：</p><p>示例 4.21 <a href="examples/chapter_4/pointer.go">pointer.go</a>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">5</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An integer: %d, its location in memory: %p\\n&quot;</span><span class="token punctuation">,</span> i1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i1<span class="token punctuation">)</span>
	<span class="token keyword">var</span> intP <span class="token operator">*</span><span class="token builtin">int</span>
	intP <span class="token operator">=</span> <span class="token operator">&amp;</span>i1
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value at memory location %p is %d\\n&quot;</span><span class="token punctuation">,</span> intP<span class="token punctuation">,</span> <span class="token operator">*</span>intP<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>An integer: 5, its location in memory: 0x24f0820
The value at memory location 0x24f0820 is 5
</code></pre><p>我们可以用下图来表示内存使用的情况：</p><img src="`+d+`" style="zoom:67%;"><p>程序 string_pointer.go 为我们展示了指针对 <code>string</code> 的例子。</p><p>它展示了分配一个新的值给 <code>*p</code> 并且更改这个变量自己的值（这里是一个字符串）。</p><p>示例 4.22 <a href="examples/chapter_4/string_pointer.go">string_pointer.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;good bye&quot;</span>
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">&quot;ciao&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Here is the pointer p: %p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">// prints address</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Here is the string *p: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// prints string</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Here is the string s: %s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// prints same string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>Here is the pointer p: 0x2540820
Here is the string *p: ciao
Here is the string s: ciao
</code></pre><p>通过对 <code>*p</code> 赋另一个值来更改“对象”，这样 <code>s</code> 也会随之更改。</p><p>内存示意图如下：</p><img src="`+u+`" style="zoom:67%;"><p><strong>注意事项</strong></p><p>你不能获取字面量或常量的地址，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">5</span>
ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>i <span class="token comment">//error: cannot take the address of i</span>
ptr2 <span class="token operator">:=</span> <span class="token operator">&amp;</span><span class="token number">10</span> <span class="token comment">//error: cannot take the address of 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),v=s("code",null,"pointer+2",-1),g={href:"http://VB.NET",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>因此 <code>p++</code> 在 Go 语言的代码中是不合法的。</p><p>指针的一个高级应用是你可以传递一个变量的引用（如函数的参数），这样不会传递变量的拷贝。指针传递是很廉价的，只占用 4 个或 8 个字节。当程序在工作中需要占用大量的内存，或很多变量，或者两者都有，使用指针会减少内存占用和提高效率。被指向的变量也保存在内存中，直到没有任何指针指向它们，所以从它们被创建开始就具有相互独立的生命周期。</p><p>另一方面（虽然不太可能），由于一个指针导致的间接引用（一个进程执行了另一个地址），指针的过度频繁使用也会导致性能下降。</p><p>指针也可以指向另一个指针，并且可以进行任意深度的嵌套，导致你可以有多级的间接引用，但在大多数情况这会使你的代码结构不清晰。</p><p>如我们所见，在大多数情况下 Go 语言可以使程序员轻松创建指针，并且隐藏间接引用，如：自动反向引用。</p><p>对一个空指针的反向引用是不合法的，并且会使程序崩溃：</p><p>示例 4.23 <a href="examples/chapter_4/testcrash.go">testcrash.go</a>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">// in Windows: stops only with: &lt;exit code=&quot;-1073741819&quot; msg=&quot;process crashed&quot;/&gt;</span>
<span class="token comment">// runtime error: invalid memory address or nil pointer dereference</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题 4.2</strong> 列举 Go 语言中 <code>*</code> 号的所有用法。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,10);function h(f,_){const c=t("ExternalLinkIcon"),e=t("RouterLink");return r(),l("div",null,[m,s("p",null,[n("所以说，Go 语言和 C、C++ 以及 D 语言这些低级（系统）语言一样，都有指针的概念。但是对于经常导致 C 语言内存泄漏继而程序崩溃的指针运算（所谓的指针算法，如："),v,n("，移动指针指向字符串的字节数或数组的某个位置）是不被允许的。Go 语言中的指针保证了内存安全，更像是 Java、C# 和 "),s("a",g,[n("VB.NET"),a(c)]),n(" 中的引用。")]),b,s("ul",null,[s("li",null,[a(e,{to:"/the-way-to-go/directory.html"},{default:o(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(e,{to:"/the-way-to-go/04.8.html"},{default:o(()=>[n("时间和日期")]),_:1})]),s("li",null,[n("下一节："),a(e,{to:"/the-way-to-go/05.0.html"},{default:o(()=>[n("控制结构")]),_:1})])])])}const q=i(k,[["render",h],["__file","04.9.html.vue"]]);export{q as default};
