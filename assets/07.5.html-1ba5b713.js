import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as s,d as e,w as t,b as n,e as i}from"./app-9da01d16.js";const u={},d=i(`<h1 id="_7-5-切片的复制与追加" tabindex="-1"><a class="header-anchor" href="#_7-5-切片的复制与追加" aria-hidden="true">#</a> 7.5 切片的复制与追加</h1><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。下面的代码描述了从拷贝切片的 <code>copy</code> 函数和向切片追加新元素的 <code>append()</code> 函数。</p><p>示例 7.12 <a href="examples/chapter_7/copy_append_slice.go">copy_append_slice.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	slFrom <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	slTo <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

	n <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>slTo<span class="token punctuation">,</span> slFrom<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slTo<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Copied %d elements\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment">// n == 3</span>

	sl3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
	sl3 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sl3<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sl3<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>func append(s[]T, x ...T) []T</code> 其中 <code>append()</code> 方法将 0 个或多个具有相同类型 <code>s</code> 的元素追加到切片后面并且返回新的切片；追加的元素必须和原切片的元素是同类型。如果 <code>s</code> 的容量不足以存储新增元素，<code>append()</code> 会分配新的切片来保证已有切片元素和新增元素的存储。因此，返回的切片可能已经指向一个不同的相关数组了。<code>append()</code> 方法总是返回成功，除非系统内存耗尽了。</p><p>如果你想将切片 <code>y</code> 追加到切片 <code>x</code> 后面，只要将第二个参数扩展成一个列表即可：<code>x = append(x, y...)</code>。</p><p><strong>注意</strong>： <code>append()</code> 在大多数情况下很好用，但是如果你想完全掌控整个追加过程，你可以实现一个这样的 <code>AppendByte()</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">AppendByte</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> data <span class="token operator">...</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	n <span class="token operator">:=</span> m <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if necessary, reallocate</span>
		<span class="token comment">// allocate double what&#39;s needed, for future growth.</span>
		newSlice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>newSlice<span class="token punctuation">,</span> slice<span class="token punctuation">)</span>
		slice <span class="token operator">=</span> newSlice
	<span class="token punctuation">}</span>
	slice <span class="token operator">=</span> slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>slice<span class="token punctuation">[</span>m<span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
	<span class="token keyword">return</span> slice
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>func copy(dst, src []T) int</code> 方法将类型为 <code>T</code> 的切片从源地址 <code>src</code> 拷贝到目标地址 <code>dst</code>，覆盖 <code>dst</code> 的相关元素，并且返回拷贝的元素个数。源地址和目标地址可能会有重叠。拷贝个数是 <code>src</code> 和 <code>dst</code> 的长度最小值。如果 <code>src</code> 是字符串那么元素类型就是 <code>byte</code>。如果你还想继续使用 <code>src</code>，在拷贝结束后执行 <code>src = dst</code>。</p><p><strong>练习 7.9</strong> <a href="exercises/chapter_7/magnify_slice.go">magnify_slice.go</a></p><p>给定一个切片 <code>s []int</code> 和一个 <code>int</code> 类型的因子 <code>factor</code>，扩展 <code>s</code> 使其长度为 <code>len(s) * factor</code>。</p><p>**练习 7.10 ** <a href="exercises/chapter_7/filter_slice.go">filter_slice.go</a></p><p>用顺序函数过滤容器：<code>s</code> 是前 10 个整型的切片。构造一个函数 <code>Filter</code>，第一个参数是 <code>s</code>，第二个参数是一个 <code>fn func(int) bool</code>，返回满足函数 <code>fn</code> 的元素切片。通过 <code>fn</code> 测试方法测试当整型值是偶数时的情况。</p><p><strong>练习 7.11</strong> <a href="exercises/chapter_7/insert_slice.go">insert_slice.go</a></p><p>写一个函数 <code>InsertStringSlice()</code> 将切片插入到另一个切片的指定位置。</p><p><strong>练习 7.12</strong> <a href="exercises/chapter_7/remove_slice.go">remove_slice.go</a></p><p>写一个函数 <code>RemoveStringSlice()</code> 将从 <code>start</code> 到 <code>end</code> 索引的元素从切片中移除。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,18);function r(k,m){const a=p("RouterLink");return c(),l("div",null,[d,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/07.4.html"},{default:t(()=>[n("切片重组 (reslice)")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/07.6.html"},{default:t(()=>[n("字符串、数组和切片的应用")]),_:1})])])])}const f=o(u,[["render",r],["__file","07.5.html.vue"]]);export{f as default};
