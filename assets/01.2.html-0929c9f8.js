import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a,b as n,d as s,w as t,e as l}from"./app-9da01d16.js";const r={},m=l(`<h1 id="_1-2-go-module-gopath-与工作空间" tabindex="-1"><a class="header-anchor" href="#_1-2-go-module-gopath-与工作空间" aria-hidden="true">#</a> 1.2 Go Module, GOPATH 与工作空间</h1><p>从 Go1.11 开始, Go 官方加入 Go Module 支持, Go1.12 成为默认支持; 从此告别源码必须放在 Gopath 中<br> 以及 Gopath 对初学者造成的困扰.</p><h2 id="使用-go-module" tabindex="-1"><a class="header-anchor" href="#使用-go-module" aria-hidden="true">#</a> 使用 Go Module</h2><p>由于众所周知的原因, 要顺利安装 Go Module 的包, 需要先设置代理:</p><p>公共模块代理:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io  // 也可以设置为 https://goproxy.cn 或者其他
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>私有模块代理:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span>git.xxx.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go mod init [module 名称]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检测和清理依赖:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go mod tidy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装指定包:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -v github.com/go-ego/gse@v0.60.0-rc4.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新依赖" tabindex="-1"><a class="header-anchor" href="#更新依赖" aria-hidden="true">#</a> 更新依赖</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新指定包依赖:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u github.com/go-ego/gse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定版本:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go get -u github/com/go-ego/gse@v0.60.0-rc4.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> Replace:</h3><p>使用命令行:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go mod edit -replace github.com/go-ego/gse=/path/to/local/gse
go mod edit -replace github.com/go-ego/gse=github.com/vcaesar/gse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接修改模块文件:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replace github.com/go-ego/gse =&gt; github.com/vcaesar/gse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gomodule-常用命令" tabindex="-1"><a class="header-anchor" href="#gomodule-常用命令" aria-hidden="true">#</a> GOMODULE 常用命令:</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go mod init  # 初始化 go.mod
go mod tidy  # 更新依赖文件
go mod download  # 下载依赖文件

go mod vendor  # 将依赖转移至本地的 vendor 文件
go mod edit  # 手动修改依赖文件
go mod graph  # 打印依赖图
go mod verify  # 校验依赖
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面我们在安装 Go 的时候看到需要设置 GOPATH 变量，Go 从1.1版本到1.7必须设置这个变量，而且不能和Go的安装目录一样，这个目录用来存放Go源码，Go的可运行文件，以及相应的编译之后的包文件。所以这个目录下面有三个子目录：src、bin、pkg</p><p>从go 1.8开始，GOPATH 环境变量现在有一个默认值，如果它没有被设置。 它在Unix上默认为$HOME/go,在Windows上默认为%USERPROFILE%/go。</p><h2 id="gopath设置" tabindex="-1"><a class="header-anchor" href="#gopath设置" aria-hidden="true">#</a> GOPATH设置</h2><p>go 命令依赖一个重要的环境变量：$GOPATH</p><p>Windows系统中环境变量的形式为<code>%GOPATH%</code>，本书主要使用Unix形式，Windows用户请自行替换。</p><p><em>（注：这个不是Go安装目录。下面以笔者的工作目录为示例，如果你想不一样请把GOPATH替换成你的工作目录。）</em></p><p>在类 Unix 环境下大概这样设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>/home/apple/mygo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便，应该新建以上文件夹，并且上一行加入到 <code>.bashrc</code> 或者 <code>.zshrc</code> 或者自己的 <code>sh</code> 的配置文件中。</p><p>Windows 设置如下，新建一个环境变量名称叫做GOPATH：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>c:<span class="token punctuation">\\</span>mygo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GOPATH允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候Windows是分号，Linux系统是冒号，当有多个GOPATH时，默认会将go get的内容放在第一个目录下。</p><p>以上 $GOPATH 目录约定有三个子目录：</p>`,40),u=a("ul",null,[a("li",null,"src 存放源代码（比如：.go .c .h .s等）"),a("li",null,"pkg 编译后生成的文件（比如：.a）"),a("li",null,[n("bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"P"),a("mi",null,"A"),a("mi",null,"T"),a("mi",null,"H"),a("mtext",null,"变量中，如果有多个"),a("mi",null,"g"),a("mi",null,"o"),a("mi",null,"p"),a("mi",null,"a"),a("mi",null,"t"),a("mi",null,"h"),a("mtext",null,"，那么使用"),a("mi",{mathvariant:"normal"},"‘")]),a("annotation",{encoding:"application/x-tex"},"PATH 变量中，如果有多个gopath，那么使用`")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),a("span",{class:"mord mathnormal"},"A"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),a("span",{class:"mord cjk_fallback"},"变量中，如果有多个"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),a("span",{class:"mord mathnormal"},"o"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"h"),a("span",{class:"mord cjk_fallback"},"，那么使用"),a("span",{class:"mord"},"‘")])])]),n("{GOPATH//😕/bin:}/bin`添加所有的bin目录）")])],-1),g=a("p",null,"以后我所有的例子都是以mygo作为我的gopath目录",-1),h=a("h2",{id:"代码目录结构规划",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#代码目录结构规划","aria-hidden":"true"},"#"),n(" 代码目录结构规划")],-1),b=a("p",null,"GOPATH下的src目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，例如: $GOPATH/src/mymath 表示mymath这个应用包或者可执行应用，这个根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包，这个会在后续详细介绍package。",-1),v={href:"http://github.com/astaxie/beedb",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>下面我就以mymath为例来讲述如何编写应用包，执行如下代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src
<span class="token function">mkdir</span> mymath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建文件sqrt.go，内容如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// $GOPATH/src/mymath/sqrt.go源码如下：</span>
<span class="token keyword">package</span> mymath

<span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	z <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		z <span class="token operator">-=</span> <span class="token punctuation">(</span>z<span class="token operator">*</span>z <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> z
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我的应用包目录和代码已经新建完毕，注意：一般建议package的名称和目录名保持一致</p><h2 id="编译应用" tabindex="-1"><a class="header-anchor" href="#编译应用" aria-hidden="true">#</a> 编译应用</h2><p>上面我们已经建立了自己的应用包，如何进行编译安装呢？有两种方式可以进行安装</p><p>1、只要进入对应的应用包目录，然后执行<code>go install</code>，就可以安装了</p><p>2、在任意的目录执行如下代码<code>go install mymath</code></p><p>安装完之后，我们可以进入如下目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/pkg/<span class="token variable">\${GOOS}</span>_<span class="token variable">\${GOARCH}</span>
//可以看到如下文件
mymath.a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个.a文件是应用包，那么我们如何进行调用呢？</p><p>接下来我们新建一个应用程序来调用这个应用包</p><p>新建应用包mathapp</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src
<span class="token function">mkdir</span> mathapp
<span class="token builtin class-name">cd</span> mathapp
<span class="token function">vim</span> main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>$GOPATH/src/mathapp/main.go</code>源码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;mymath&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world.  Sqrt(2) = %v\\n&quot;</span><span class="token punctuation">,</span> mymath<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这个的package是<code>main</code>，import里面调用的包是<code>mymath</code>,这个就是相对于<code>$GOPATH/src</code>的路径，如果是多级目录，就在import里面引入多级目录，如果你有多个GOPATH，也是一样，Go会自动在多个<code>$GOPATH/src</code>中寻找。</p><p>如何编译程序呢？进入该应用目录，然后执行<code>go build</code>，那么在该目录下面会生成一个mathapp的可执行文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./mathapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出如下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hello, world.  Sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.414213562373095</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),x=a("p",null,[n("如何安装该应用，进入该目录执行"),a("code",null,"go install"),n(",那么在"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"G"),a("mi",null,"O"),a("mi",null,"P"),a("mi",null,"A"),a("mi",null,"T"),a("mi",null,"H"),a("mi",{mathvariant:"normal"},"/"),a("mi",null,"b"),a("mi",null,"i"),a("mi",null,"n"),a("mi",{mathvariant:"normal"},"/"),a("mtext",null,"下增加了一个可执行文件"),a("mi",null,"m"),a("mi",null,"a"),a("mi",null,"t"),a("mi",null,"h"),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"p"),a("mo",{separator:"true"},","),a("mtext",null,"还记得前面我们把"),a("mi",{mathvariant:"normal"},"‘")]),a("annotation",{encoding:"application/x-tex"},"GOPATH/bin/下增加了一个可执行文件mathapp, 还记得前面我们把`")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"GOP"),a("span",{class:"mord mathnormal"},"A"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),a("span",{class:"mord"},"/"),a("span",{class:"mord mathnormal"},"bin"),a("span",{class:"mord"},"/"),a("span",{class:"mord cjk_fallback"},"下增加了一个可执行文件"),a("span",{class:"mord mathnormal"},"ma"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"ha"),a("span",{class:"mord mathnormal"},"pp"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord cjk_fallback"},"还记得前面我们把"),a("span",{class:"mord"},"‘")])])]),n("GOPATH/bin`加到我们的PATH里面了，这样可以在命令行输入如下命令就可以执行")],-1),G=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mathapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也是输出如下内容</p><pre><code>Hello, world.  Sqrt(2) = 1.414213562373095
</code></pre><p>这里我们展示如何编译和安装一个可运行的应用，以及如何设计我们的目录结构。</p><p>对于启用go module的Go版本，需要对mod.go进行配置。（使用replace的方式将远程包替换为本地包）</p><h2 id="获取远程包" tabindex="-1"><a class="header-anchor" href="#获取远程包" aria-hidden="true">#</a> 获取远程包</h2><p>go语言有一个获取远程包的工具就是<code>go get</code>，目前go get支持多数开源社区(例如：GitHub、googlecode、bitbucket、Launchpad)</p><pre><code>go get github.com/astaxie/beedb
</code></pre><blockquote><p>go get -u 参数可以自动更新包，而且当go get的时候会自动获取该包依赖的其他第三方包</p></blockquote><p>通过这个命令可以获取相应的源码，对应的开源平台采用不同的源码控制工具，例如GitHub采用git、googlecode采用hg，所以要想获取这些源码，必须先安装相应的源码控制工具</p><p>通过上面获取的代码在我们本地的源码相应的代码结构如下</p><pre><code>$GOPATH
  src
   |--github.com
		  |-astaxie
			  |-beedb
   pkg
	|--相应平台
		 |-github.com
			   |--astaxie
					|beedb.a
</code></pre><p>go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面，然后执行<code>go install</code></p><p>在代码中如何使用远程包，很简单的就是和使用本地包一样，只要在开头import相应的路径就可以</p><pre><code>import &quot;github.com/astaxie/beedb&quot;
</code></pre><h2 id="程序的整体结构" tabindex="-1"><a class="header-anchor" href="#程序的整体结构" aria-hidden="true">#</a> 程序的整体结构</h2><p>通过上面建立的我本地的mygo的目录结构如下所示</p><pre><code>bin/
	mathapp
pkg/
	平台名/ 如：darwin_amd64、linux_amd64
		 mymath.a
		 github.com/
			  astaxie/
				   beedb.a
src/
	mathapp
		  main.go
	mymath/
		  sqrt.go
	github.com/
		   astaxie/
				beedb/
					beedb.go
					util.go
</code></pre><p>从上面的结构我们可以很清晰的看到，bin目录下面存的是编译之后可执行的文件，pkg下面存放的是应用包，src下面保存的是应用源代码</p><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>`,20);function f(_,H){const o=i("ExternalLinkIcon"),e=i("RouterLink");return c(),p("div",null,[m,u,g,h,b,a("p",null,[n('所以当新建应用或者一个代码包时都是在src目录下新建一个文件夹，文件夹名称一般是代码包名称，当然也允许多级目录，例如在src下面新建了目录$GOPATH/src/github.com/astaxie/beedb 那么这个包路径就是"'),a("a",v,[n("github.com/astaxie/beedb"),s(o)]),n('"，包名称是最后一个目录beedb')]),k,x,G,a("ul",null,[a("li",null,[s(e,{to:"/build-web-app/preface.html"},{default:t(()=>[n("目录")]),_:1})]),a("li",null,[n("上一节: "),s(e,{to:"/build-web-app/01.1.html"},{default:t(()=>[n("安装Go")]),_:1})]),a("li",null,[n("下一节: "),s(e,{to:"/build-web-app/01.3.html"},{default:t(()=>[n("GO 命令")]),_:1})])])])}const P=d(r,[["render",f],["__file","01.2.html.vue"]]);export{P as default};
