import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as i,a as n,b as s,d as a,w as e,e as p}from"./app-9da01d16.js";const r={},k=p(`<h1 id="_15-8-精巧的多功能网页服务器" tabindex="-1"><a class="header-anchor" href="#_15-8-精巧的多功能网页服务器" aria-hidden="true">#</a> 15.8 精巧的多功能网页服务器</h1><p>为进一步深入理解 <code>http</code> 包以及如何构建网页服务器功能，让我们来学习和体会下面的例子：先列出代码，然后给出不同功能的实现方法，程序输出显示在表格中。</p><p>示例 15.20 <a href="examples/chapter_15/elaborated_webserver.go">elaborated_webserver.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;expvar&quot;</span>
	<span class="token string">&quot;flag&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// hello world, the web server</span>
<span class="token keyword">var</span> helloRequests <span class="token operator">=</span> expvar<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token string">&quot;hello-requests&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// flags:</span>
<span class="token keyword">var</span> webroot <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/home/user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;web root directory&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// simple flag server</span>
<span class="token keyword">var</span> booleanflag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;another flag for testing&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// Simple counter server. POSTing to it will set the value.</span>
<span class="token keyword">type</span> Counter <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	n <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token comment">// a channel</span>
<span class="token keyword">type</span> Chan <span class="token keyword">chan</span> <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Logger<span class="token punctuation">)</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/hello&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>HelloServer<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// The counter is published as a variable directly.</span>
	ctr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>
	expvar<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/counter&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">)</span>
	<span class="token comment">// http.Handle(&quot;/go/&quot;, http.FileServer(http.Dir(&quot;/tmp&quot;))) // uses the OS filesystem</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token operator">*</span>webroot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/flags&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>FlagServer<span class="token punctuation">)</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/args&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>ArgServer<span class="token punctuation">)</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/chan&quot;</span><span class="token punctuation">,</span> <span class="token function">ChanCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/date&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>DateServer<span class="token punctuation">)</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:12345&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Panicln</span><span class="token punctuation">(</span><span class="token string">&quot;ListenAndServe:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Logger</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;oops&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">HelloServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	helloRequests<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;hello, world!\\n&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// This makes Counter satisfy the expvar.Var interface, so we can export</span>
<span class="token comment">// it directly.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> req<span class="token punctuation">.</span>Method <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span> <span class="token comment">// increment n</span>
		ctr<span class="token punctuation">.</span>n<span class="token operator">++</span>
	<span class="token keyword">case</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">:</span> <span class="token comment">// set n to posted value</span>
		buf <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
		io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> req<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
		body <span class="token operator">:=</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;bad POST: %v\\nbody: [%v]\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> body<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			ctr<span class="token punctuation">.</span>n <span class="token operator">=</span> n
			fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;counter reset\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;counter = %d\\n&quot;</span><span class="token punctuation">,</span> ctr<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">FlagServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain; charset=utf-8&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Flags:\\n&quot;</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">VisitAll</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>f <span class="token operator">*</span>flag<span class="token punctuation">.</span>Flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> f<span class="token punctuation">.</span>DefValue <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;%s = %s [default = %s]\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>DefValue<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;%s = %s\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// simple argument server</span>
<span class="token keyword">func</span> <span class="token function">ArgServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ChanCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Chan <span class="token punctuation">{</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>Chan<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c Chan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span>
			c <span class="token operator">&lt;-</span> x
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ch Chan<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;channel send #%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// exec a program, redirecting output</span>
<span class="token keyword">func</span> <span class="token function">DateServer</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rw<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain; charset=utf-8&quot;</span><span class="token punctuation">)</span>
	r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;pipe: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	p<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/date&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>os<span class="token punctuation">.</span>ProcAttr<span class="token punctuation">{</span>Files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">{</span><span class="token boolean">nil</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> w<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> r<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	w<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;fork/exec: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
	wait<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;wait: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>wait<span class="token punctuation">.</span><span class="token function">Exited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">&quot;date: %v\\n&quot;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),v=n("td",null,[n("code",null,"Logger()")],-1),m={href:"http://localhost:12345/",target:"_blank",rel:"noopener noreferrer"},b=n("td",null,"oops",-1),h=p(`<p><code>Logger()</code> 处理函数用 <code>w.WriteHeader(404)</code> 来输出 “404 Not Found”头部。</p><p>这项技术通常很有用，无论何时服务器执行代码产生错误，都可以应用类似这样的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外利用 <code>logger</code> 包的函数，针对每个请求在服务器端命令行打印日期、时间和 URL。</p>`,4),f=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),g=n("td",null,[n("code",null,"HelloServer()")],-1),q={href:"http://localhost:12345/go/hello",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,"hello, world!",-1),w=n("p",null,[s("包 "),n("code",null,"expvar"),s(" 可以创建（Int，Float 和 String 类型）变量，并将它们发布为公共变量。它会在 HTTP URL "),n("code",null,"/debug/vars"),s(" 上以 JSON 格式公布。通常它被用于服务器操作计数。"),n("code",null,"helloRequests"),s(" 就是这样一个 "),n("code",null,"int64"),s(" 变量，该处理函数对其加 1，然后写入“hello world!”到浏览器。")],-1),y=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),S=n("td",null,[n("code",null,"Counter()")],-1),F={href:"http://localhost:12345/counter",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"counter = 1",-1),x=n("tr",null,[n("td",null,[n("code",null,"Counter()")]),n("td",null,"刷新（GET 请求）"),n("td",null,"counter = 2")],-1),H=p("<p>计数器对象 <code>ctr</code> 有一个 <code>String()</code> 方法，所以它实现了 <code>expvar.Var</code> 接口。这使其可以被发布，尽管它是一个结构体。<code>ServeHTTP()</code> 函数使 <code>ctr</code> 成为处理器，因为它的签名正确实现了 <code>http.Handler</code> 接口。</p>",1),C=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),T=n("td",null,[n("code",null,"FileServer()")],-1),L={href:"http://localhost:12345/go/ggg.html",target:"_blank",rel:"noopener noreferrer"},P=n("td",null,"404 page not found",-1),W=p(`<p><code>FileServer(root FileSystem) Handler</code> 返回一个处理器，它以 <code>root</code> 作为根，用文件系统的内容响应 HTTP 请求。要获得操作系统的文件系统，用 <code>http.Dir</code>，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">&quot;/go/&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),V=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),A=n("td",null,[n("code",null,"FlagServer()")],-1),U={href:"http://localhost:12345/flags",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"Flags: boolean = true root = /home/rsc",-1),N=n("p",null,[s("该处理函数使用了 "),n("code",null,"flag"),s(" 包。"),n("code",null,"VisitAll()"),s(" 函数迭代所有的标签 (flag)，打印它们的名称、值和默认值（当不同于“值”时）。")],-1),E=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),B=n("td",null,[n("code",null,"ArgServer()")],-1),O={href:"http://localhost:12345/args",target:"_blank",rel:"noopener noreferrer"},I=n("td",null,"./elaborated_webserver.exe",-1),G=n("p",null,[s("该处理函数迭代 "),n("code",null,"os.Args"),s(" 以打印出所有的命令行参数。如果没有指定则只有程序名称（可执行程序的路径）会被打印出来。")],-1),J=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),M=n("td",null,[n("code",null,"Channel()")],-1),j={href:"http://localhost:12345/chan",target:"_blank",rel:"noopener noreferrer"},z=n("td",null,"channel send #1",-1),K=n("tr",null,[n("td",null,[n("code",null,"Channel()")]),n("td",null,"刷新"),n("td",null,"channel send #2")],-1),Q=p(`<p>每当有新请求到达，通道的 <code>ServeHTTP()</code> 方法从通道获取下一个整数并显示。由此可见，网页服务器可以从通道中获取要发送的响应，它可以由另一个函数产生（甚至是客户端）。下面的代码片段正是一个这样的处理函数，但会在 30 秒后超时：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ChanResponse</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	timeout <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30e9</span><span class="token punctuation">)</span>
		timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">select</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>messages<span class="token punctuation">:</span>
		io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
	<span class="token keyword">case</span> stop <span class="token operator">:=</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),X=n("thead",null,[n("tr",null,[n("th",null,"处理函数"),n("th",null,"调用 URL"),n("th",null,"浏览器获得响应")])],-1),Y=n("td",null,[n("code",null,"DateServer()")],-1),Z={href:"http://localhost:12345/date",target:"_blank",rel:"noopener noreferrer"},$=n("td",null,"显示当前时间（由于是调用 /bin/date，仅在 Unix 下有效）",-1),nn=p(`<p>可能的输出：<code>Thu Sep 8 12:41:09 CEST 2011</code>。</p><p><code>os.Pipe()</code> 返回一对相关联的 <code>File</code>，从 <code>r</code> 读取数据，返回已读取的字节数来自于 <code>w</code> 的写入。函数返回这两个文件和错误，如果有的话：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>File<span class="token punctuation">,</span> w <span class="token operator">*</span>File<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,4);function sn(an,tn){const t=c("ExternalLinkIcon"),o=c("RouterLink");return u(),i("div",null,[k,n("table",null,[d,n("tbody",null,[n("tr",null,[v,n("td",null,[n("a",m,[s("http://localhost:12345/"),a(t)]),s(" （根）")]),b])])]),h,n("table",null,[f,n("tbody",null,[n("tr",null,[g,n("td",null,[n("a",q,[s("http://localhost:12345/go/hello"),a(t)])]),_])])]),w,n("table",null,[y,n("tbody",null,[n("tr",null,[S,n("td",null,[n("a",F,[s("http://localhost:12345/counter"),a(t)])]),R]),x])]),H,n("table",null,[C,n("tbody",null,[n("tr",null,[T,n("td",null,[n("a",L,[s("http://localhost:12345/go/ggg.html"),a(t)])]),P])])]),W,n("table",null,[V,n("tbody",null,[n("tr",null,[A,n("td",null,[n("a",U,[s("http://localhost:12345/flags"),a(t)])]),D])])]),N,n("table",null,[E,n("tbody",null,[n("tr",null,[B,n("td",null,[n("a",O,[s("http://localhost:12345/args"),a(t)])]),I])])]),G,n("table",null,[J,n("tbody",null,[n("tr",null,[M,n("td",null,[n("a",j,[s("http://localhost:12345/chan"),a(t)])]),z]),K])]),Q,n("table",null,[X,n("tbody",null,[n("tr",null,[Y,n("td",null,[n("a",Z,[s("http://localhost:12345/date"),a(t)])]),$])])]),nn,n("ul",null,[n("li",null,[a(o,{to:"/the-way-to-go/directory.html"},{default:e(()=>[s("目录")]),_:1})]),n("li",null,[s("上一节："),a(o,{to:"/the-way-to-go/15.7.html"},{default:e(()=>[s("探索 template 包")]),_:1})]),n("li",null,[s("下一节："),a(o,{to:"/the-way-to-go/15.9.html"},{default:e(()=>[s("用 rpc 实现远程过程调用")]),_:1})])])])}const en=l(r,[["render",sn],["__file","15.8.html.vue"]]);export{en as default};
