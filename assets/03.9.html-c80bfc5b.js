import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as s,b as n,d as a,w as t,e as u}from"./app-9da01d16.js";const d={},r=s("h1",{id:"_3-9-与其它语言进行交互",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-9-与其它语言进行交互","aria-hidden":"true"},"#"),n(" 3.9 与其它语言进行交互")],-1),k=s("h2",{id:"_3-9-1-与-c-进行交互",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-9-1-与-c-进行交互","aria-hidden":"true"},"#"),n(" 3.9.1 与 C 进行交互")],-1),m={href:"http://golang.org/cmd/cgo",target:"_blank",rel:"noopener noreferrer"},g=u(`<p>如果你想要在你的 Go 程序中使用 cgo，则必须在单独的一行使用 <code>import &quot;C&quot;</code> 来导入，一般来说你可能还需要 <code>import &quot;unsafe&quot;</code>。</p><p>然后，你可以在 <code>import &quot;C&quot;</code> 之前使用注释（单行或多行注释均可）的形式导入 C 语言库（甚至有效的 C 语言代码），它们之间没有空行，例如：</p><pre><code>// #include &lt;stdio.h&gt;
// #include &lt;stdlib.h&gt;
import &quot;C&quot;
</code></pre><p>名称 &quot;C&quot; 并不属于标准库的一部分，这只是 cgo 集成的一个特殊名称用于引用 C 的命名空间。在这个命名空间里所包含的 C 类型都可以被使用，例如 <code>C.uint</code>、<code>C.long</code> 等等，还有 libc 中的函数 <code>C.random()</code> 等也可以被调用。</p><p>当你想要使用某个类型作为 C 中函数的参数时，必须将其转换为 C 中的类型，反之亦然，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> i <span class="token builtin">int</span>
C<span class="token punctuation">.</span><span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 		<span class="token comment">// 从 Go 中的 int 转换为 C 中的无符号 int</span>
<span class="token function">int</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 从 C 中 random() 函数返回的 long 转换为 Go 中的 int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的 2 个 Go 函数 <code>Random()</code> 和 <code>Seed()</code> 分别调用了 C 中的 <code>C.random()</code> 和 <code>C.srandom()</code>。</p><p>示例 3.2 <a href="examples/chapter_3/CandGo/c1.go">c1.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> rand

<span class="token comment">// #include &lt;stdlib.h&gt;</span>
<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>

<span class="token keyword">func</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Seed</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	C<span class="token punctuation">.</span><span class="token function">srandom</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">uint</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 当中并没有明确的字符串类型，如果你想要将一个 <code>string</code> 类型的变量从 Go 转换到 C 时，可以使用 <code>C.CString(s)</code>；同样，可以使用 <code>C.GoString(cs)</code> 从 C 转换到 Go 中的 <code>string</code> 类型。</p><p>Go 的内存管理机制无法管理通过 C 代码分配的内存。</p><p>开发人员需要通过手动调用 <code>C.free</code> 来释放变量的内存：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">defer</span> C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>Cvariable<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行最好紧跟在使用 C 代码创建某个变量之后，这样就不会忘记释放内存了。下面的代码展示了如何使用 cgo 创建变量、使用并释放其内存：</p><p>示例 3.3 <a href="examples/chapter_3/CandGo/c2.go">c2.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> <span class="token builtin">print</span>

<span class="token comment">// #include &lt;stdio.h&gt;</span>
<span class="token comment">// #include &lt;stdlib.h&gt;</span>
<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>

<span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cs <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span>
	C<span class="token punctuation">.</span><span class="token function">fputs</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span>FILE<span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构建 cgo 包</strong></p><p>你可以在使用将会在第 9.5 节讲到的 Makefile 文件（因为我们使用了一个独立的包），除了使用变量 <code>GOFILES</code> 之外，还需要使用变量 <code>CGOFILES</code> 来列出需要使用 cgo 编译的文件列表。例如，示例 3.2 中的代码就可以使用包含以下内容的 <code>Makefile</code> 文件来编译，你可以使用 <code>gomake</code> 或 <code>make</code>：</p><pre><code>include $(GOROOT)/src/Make.inc
TARG=rand
CGOFILES=\\
c1.go\\
include $(GOROOT)/src/Make.pkg
</code></pre><h1 id="_3-9-2-与-c-进行交互" tabindex="-1"><a class="header-anchor" href="#_3-9-2-与-c-进行交互" aria-hidden="true">#</a> 3.9.2 与 C++ 进行交互</h1><p>SWIG（简化封装器和接口生成器）支持在 Linux 系统下使用 Go 代码调用 C 或者 C++ 代码。这里有一些使用 SWIG 的注意事项：</p><ul><li>编写需要封装的库的 SWIG 接口。</li><li>SWIG 会产生 C 的存根函数。</li><li>这些库可以使用 cgo 来调用。</li><li>相关的 Go 文件也可以被自动生成。</li></ul><p>这类接口支持方法重载、多重继承以及使用 Go 代码实现 C++ 的抽象类。</p><p>目前使用 SWIG 存在的一个问题是它无法支持所有的 C++ 库，比如说它就无法解析 TObject.h。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,25);function v(C,b){const c=o("ExternalLinkIcon"),e=o("RouterLink");return i(),l("div",null,[r,k,s("p",null,[n("工具 cgo 提供了对 FFI（外部函数接口）的支持，能够使用 Go 代码安全地调用 C 语言库，你可以访问 cgo 文档主页："),s("a",m,[n("http://golang.org/cmd/cgo"),a(c)]),n("。cgo 会替代 Go 编译器来产生可以组合在同一个包中的 Go 和 C 代码。在实际开发中一般使用 cgo 创建单独的 C 代码包。")]),g,s("ul",null,[s("li",null,[a(e,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),a(e,{to:"/the-way-to-go/03.8.html"},{default:t(()=>[n("Go 性能说明")]),_:1})]),s("li",null,[n("下一部分："),a(e,{to:"/the-way-to-go/04.1.html"},{default:t(()=>[n("语言的核心结构与技术")]),_:1})])])])}const _=p(d,[["render",v],["__file","03.9.html.vue"]]);export{_ as default};
