import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as s,b as n,d as e,w as t,e as o}from"./app-9da01d16.js";const r={},d=o(`<h1 id="_18-1-字符串" tabindex="-1"><a class="header-anchor" href="#_18-1-字符串" aria-hidden="true">#</a> 18.1 字符串</h1><p>（1）如何修改字符串中的一个字符：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str<span class="token operator">:=</span><span class="token string">&quot;hello&quot;</span>
c<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;c&#39;</span>
s2<span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// s2 == &quot;cello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）如何获取字符串的子串：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>substr <span class="token operator">:=</span> str<span class="token punctuation">[</span>n<span class="token punctuation">:</span>m<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）如何使用 <code>for</code> 或者 <code>for-range</code> 遍历一个字符串：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// gives only the bytes:</span>
<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
… <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// gives the Unicode characters:</span>
<span class="token keyword">for</span> ix<span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span>
…
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）如何获取一个字符串的字节数：<code>len(str)</code></p><p>如何获取一个字符串的字符数：</p><p>（最快速）使用 <code>utf8.RuneCountInString(str)</code></p><p>或使用 <code>len([]rune(str))</code></p><p>（5）如何连接字符串：</p>`,12),u=s("code",null,"bytes.Buffer",-1),k=s("code",null,"Strings.Join()",-1),m=o(`<p>或使用 <code>+=</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str1 <span class="token operator">:=</span> <span class="token string">&quot;Hello &quot;</span> 
str2 <span class="token operator">:=</span> <span class="token string">&quot;World!&quot;</span>
str1 <span class="token operator">+=</span> str2 <span class="token comment">//str1 == &quot;Hello World!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）如何解析命令行参数：使用 <code>os</code> 或者 <code>flag</code> 包（参考<a href="examples/chapter_12/fileinput.go">例 12.4</a>）</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,4);function v(g,h){const a=c("RouterLink");return l(),i("div",null,[d,s("p",null,[n("（最快速）使用 "),u,n("（参考"),e(a,{to:"/the-way-to-go/07.2.html"},{default:t(()=>[n("章节 7.2")]),_:1}),n("）")]),s("p",null,[n("或使用 "),k,n("（参考"),e(a,{to:"/the-way-to-go/04.7.html"},{default:t(()=>[n("章节 4.7")]),_:1}),n("）")]),m,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/18.0.html"},{default:t(()=>[n("出于性能考虑的实用代码片段")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/18.2.html"},{default:t(()=>[n("数组和切片")]),_:1})])])])}const f=p(r,[["render",v],["__file","18.1.html.vue"]]);export{f as default};
