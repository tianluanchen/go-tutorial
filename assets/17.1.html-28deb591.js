import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as s,b as n,d as e,w as t,e as o}from"./app-9da01d16.js";const u={},d=o('<h1 id="_17-1-逗号-ok-模式" tabindex="-1"><a class="header-anchor" href="#_17-1-逗号-ok-模式" aria-hidden="true">#</a> 17.1 逗号 ok 模式</h1><p>在学习本书第二部分和第三部分时，我们经常在一个表达式返回 2 个参数时使用这种模式：<code>something, ok</code>，第一个参数是一个值或者 <code>nil</code>，第二个参数是 <code>true</code>/<code>false</code> 或者一个错误 <code>error</code>。在一个需要赋值的 <code>if</code> 条件语句中，使用这种模式去检测第二个参数值会让代码显得优雅简洁。这种模式在 Go 语言编码规范中非常重要。下面总结了所有使用这种模式的例子：</p>',2),r=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span>

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %s in pack1.Func1 with parameter %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>

<span class="token comment">// 函数Func1没有错误:</span>
<span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中的函数将错误返回给它的调用者，当函数执行成功时，返回的错误是 <code>nil</code>，所以使用这种写法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SomeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    …
    <span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        …
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    …
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),k=s("code",null,"defer",-1),v=s("code",null,"panic",-1),m=s("code",null,"key1",-1),b=s("code",null,"map1",-1),h=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> value<span class="token punctuation">,</span> isPresent <span class="token operator">=</span> map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">;</span> isPresent <span class="token punctuation">{</span>
        <span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// key1 不存在</span>
…
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=s("code",null,"varI",-1),_=s("code",null,"T",-1),f=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> varI<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token function">Process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接口类型 varI 没有包含类型 T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=s("code",null,"ch",-1),w=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">for</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span>
        <span class="token function">Process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> input<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">;</span> <span class="token operator">!</span>open <span class="token punctuation">{</span>
            <span class="token keyword">break</span> <span class="token comment">// 通道是关闭的</span>
        <span class="token punctuation">}</span>
        <span class="token function">Process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,4);function x(P,F){const a=c("RouterLink");return l(),i("div",null,[d,s("p",null,[n("（1）在函数返回时检测错误（参考"),e(a,{to:"/the-way-to-go/05.2.html"},{default:t(()=>[n("第 5.2 小节")]),_:1}),n("）:")]),r,s("p",null,[n("这种模式也常用于通过 "),k,n(" 使程序从 "),v,n(" 中恢复执行（参考"),e(a,{to:"/the-way-to-go/17.2.html"},{default:t(()=>[n("第 17.2(4) 小节")]),_:1}),n("）。")]),s("p",null,[n("要实现简洁的错误检测代码，更好的方式是使用闭包，参考"),e(a,{to:"/the-way-to-go/16.10.html"},{default:t(()=>[n("第 16.10.2 小节")]),_:1})]),s("p",null,[n("（2）检测映射中是否存在一个键值（参考"),e(a,{to:"/the-way-to-go/08.2.html"},{default:t(()=>[n("第 8.2 小节")]),_:1}),n("）："),m,n(" 在映射 "),b,n(" 中是否有值？")]),h,s("p",null,[n("（3）检测一个接口类型变量 "),g,n(" 是否包含了类型 "),_,n("：类型断言（参考"),e(a,{to:"/the-way-to-go/11.3.html"},{default:t(()=>[n("第 11.3 小节")]),_:1}),n("）：")]),f,s("p",null,[n("（4）检测一个通道 "),y,n(" 是否关闭（参考"),e(a,{to:"/the-way-to-go/14.3.html"},{default:t(()=>[n("第 14.3 小节")]),_:1}),n("）：")]),w,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/17.0.html"},{default:t(()=>[n("Go 语言模式")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/17.2.html"},{default:t(()=>[n("defer 模式")]),_:1})])])])}const V=p(u,[["render",x],["__file","17.1.html.vue"]]);export{V as default};
