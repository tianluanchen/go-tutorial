import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,a as s,b as n,d as t,w as p,e as o}from"./app-9da01d16.js";const l={},r=o(`<h1 id="_11-11-printf-和反射" tabindex="-1"><a class="header-anchor" href="#_11-11-printf-和反射" aria-hidden="true">#</a> 11.11 Printf() 和反射</h1><p>在 Go 语言的标准库中，前几节所述的反射的功能被大量地使用。举个例子，<code>fmt</code> 包中的 <code>Printf()</code>（以及其他格式化输出函数）都会使用反射来分析它的 <code>...</code> 参数。</p><p><code>Printf()</code> 的函数声明为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Printf()</code> 中的 <code>...</code> 参数为空接口类型。<code>Printf()</code> 使用反射包来解析这个参数列表。所以，<code>Printf()</code> 能够知道它每个参数的类型。因此格式化字符串中只有 <code>%d</code> 而没有 <code>%u</code> 和 <code>%ld</code>，因为它知道这个参数是 unsigned 还是 long。这也是为什么 <code>Print()</code> 和 <code>Println()</code> 在没有格式字符串的情况下还能如此漂亮地输出。</p>`,5),k=s("code",null,"Printf()",-1),d=o(`<p>示例 11.15 <a href="examples/chapter_11/print.go">print.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Celsius <span class="token builtin">float64</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c Celsius<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; °C&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Day <span class="token builtin">int</span>

<span class="token keyword">var</span> dayName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sunday&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>day Day<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> dayName<span class="token punctuation">[</span>day<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">print</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
		<span class="token keyword">switch</span> a <span class="token operator">:=</span> arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// type switch</span>
			<span class="token keyword">case</span> Stringer<span class="token punctuation">:</span>	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>		os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
			<span class="token comment">// more types</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>		os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;???&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;was&quot;</span><span class="token punctuation">,</span> <span class="token function">Celsius</span><span class="token punctuation">(</span><span class="token number">18.36</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Tuesday was 18.4 °C</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=s("code",null,"fmt.Fprintf()",-1),m=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function b(f,g){const a=c("RouterLink");return i(),u("div",null,[r,s("p",null,[n("为了让大家更加具体地了解 "),k,n(" 中的反射，我们实现了一个简单的通用输出函数。其中使用了 type-switch 来推导参数类型，并根据类型来输出每个参数的值（这里用了 "),t(a,{to:"/the-way-to-go/10.7.html"},{default:p(()=>[n("10.7")]),_:1}),n(" 节中练习 10.13 的部分代码）")]),d,s("p",null,[n("在 "),t(a,{to:"/the-way-to-go/12.8.html"},{default:p(()=>[n("12.8")]),_:1}),n(" 节中我们将阐释 "),v,n(" 是怎么运用同样的反射原则的。")]),m,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:p(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/11.10.html"},{default:p(()=>[n("反射包")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/11.12.html"},{default:p(()=>[n("接口和动态类型")]),_:1})])])])}const w=e(l,[["render",b],["__file","11.11.html.vue"]]);export{w as default};
