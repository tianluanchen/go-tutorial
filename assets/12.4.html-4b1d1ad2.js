import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as s,b as n,d as e,w as o,e as t}from"./app-9da01d16.js";const d={},u=t(`<h1 id="_12-4-从命令行读取参数" tabindex="-1"><a class="header-anchor" href="#_12-4-从命令行读取参数" aria-hidden="true">#</a> 12.4 从命令行读取参数</h1><h2 id="_12-4-1-os-包" tabindex="-1"><a class="header-anchor" href="#_12-4-1-os-包" aria-hidden="true">#</a> 12.4.1 os 包</h2><p><code>os</code> 包中有一个 <code>string</code> 类型的切片变量 <code>os.Args</code>，用来处理一些基本的命令行参数，它在程序启动后读取命令行输入的参数。来看下面的打招呼程序：</p><p>示例 12.11 <a href="examples/chapter_12/os_args.go">os_args.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// os_args.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	who <span class="token operator">:=</span> <span class="token string">&quot;Alice &quot;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		who <span class="token operator">+=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Good Morning&quot;</span><span class="token punctuation">,</span> who<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 IDE 或编辑器中直接运行这个程序输出：<code>Good Morning Alice</code></p><p>我们在命令行运行 <code>os_args</code> 或 <code>./os_args</code> 会得到同样的结果。</p><p>但是我们在命令行加入参数，像这样：<code>os_args John Bill Marc Luke</code>，将得到这样的输出：<code>Good Morning Alice John Bill Marc Luke</code></p><p>这个命令行参数会放置在切片 <code>os.Args[]</code> 中（以空格分隔），从索引 1 开始（<code>os.Args[0]</code> 放的是程序本身的名字，在本例中是 <code>os_args</code>）。函数 <code>strings.Join</code> 以空格为间隔连接这些参数。</p><p><strong>练习 12.5</strong>：<a href="exercises/chapter_12/hello_who.go">hello_who.go</a></p><p>写一个“Hello World”的变种程序：把人的名字作为程序命令行执行的一个参数，比如： <code>hello_who Evan Michael Laura</code> 那么会输出 <code>Hello Evan Michael Laura!</code></p><h2 id="_12-4-2-flag-包" tabindex="-1"><a class="header-anchor" href="#_12-4-2-flag-包" aria-hidden="true">#</a> 12.4.2 flag 包</h2>`,12),r=s("code",null,"flag",-1),k=t(`<p>在 <code>flag</code> 包中有一个 <code>Flag</code> 是被定义成一个含有如下字段的结构体：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Flag <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name     <span class="token builtin">string</span> <span class="token comment">// name as it appears on command line</span>
	Usage    <span class="token builtin">string</span> <span class="token comment">// help message</span>
	Value    Value  <span class="token comment">// value as set</span>
	DefValue <span class="token builtin">string</span> <span class="token comment">// default value (as text); for usage message</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的程序 <a href="examples/chapter_12/echo.go">echo.go</a> 模拟了 Unix 的 echo 功能：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;flag&quot;</span> <span class="token comment">// command line option parser</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> NewLine <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;print newline&quot;</span><span class="token punctuation">)</span> <span class="token comment">// echo -n flag, of type *bool</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Space   <span class="token operator">=</span> <span class="token string">&quot; &quot;</span>
	Newline <span class="token operator">=</span> <span class="token string">&quot;\\n&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">PrintDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Scans the arg list and sets up flags</span>
	<span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flag<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			s <span class="token operator">+=</span> <span class="token string">&quot; &quot;</span>
			<span class="token keyword">if</span> <span class="token operator">*</span>NewLine <span class="token punctuation">{</span> <span class="token comment">// -n is parsed, flag becomes true</span>
				s <span class="token operator">+=</span> Newline
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		s <span class="token operator">+=</span> flag<span class="token punctuation">.</span><span class="token function">Arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	os<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flag.Parse()</code> 扫描参数列表（或者常量列表）并设置 flag, <code>flag.Arg(i)</code> 表示第 i 个参数。<code>Parse()</code> 之后 <code>flag.Arg(i)</code> 全部可用，<code>flag.Arg(0)</code> 就是第一个真实的 flag，而不是像 <code>os.Args(0)</code> 放置程序的名字。</p><p><code>flag.Narg()</code> 返回参数的数量。解析后 flag 或常量就可用了。<br><code>flag.Bool()</code> 定义了一个默认值是 <code>false</code> 的 flag：当在命令行出现了第一个参数（这里是 <code>&#39;n&#39;</code>），flag 被设置成 <code>true</code>（<code>NewLine</code> 是 <code>*bool</code> 类型）。flag 被解引用到 <code>*NewLine</code>，所以当值是 <code>true</code> 时将添加一个 <code>Newline(&quot;\\n&quot;)</code>。</p><p><code>flag.PrintDefaults()</code> 打印 flag 的使用帮助信息，本例中打印的是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token operator">-</span>n<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">:</span> <span class="token builtin">print</span> newline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),g=s("code",null,"flag.VisitAll(fn func(*Flag))",-1),v=t(`<p>当在命令行 (Windows) 中执行：<code>echo.exe A B C</code>，将输出：<code>A B C</code>；执行 <code>echo.exe -n A B C</code>，将输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A
B
C
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个字符的输出都新起一行，每次都在输出的数据前面打印使用帮助信息：<code>-n=false: print newline</code>。</p><p>对于 <code>flag.Bool</code> 你可以设置布尔型 flag 来测试你的代码，例如定义一个 flag <code>processedFlag</code>:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> processedFlag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">&quot;proc&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;nothing processed yet&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在后面用如下代码来测试：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token operator">*</span>processedFlag <span class="token punctuation">{</span> <span class="token comment">// found flag -proc</span>
	r <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要给 flag 定义其它类型，可以使用 <code>flag.Int()</code>，<code>flag.Float64()</code>，<code>flag.String()</code>。</p>`,8),m=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function f(b,h){const a=p("RouterLink");return l(),i("div",null,[u,s("p",null,[r,n(" 包有一个扩展功能用来解析命令行选项。但是通常被用来替换基本常量，例如，在某些情况下我们希望在命令行给常量一些不一样的值。（参看 "),e(a,{to:"/the-way-to-go/19.0.html"},{default:o(()=>[n("19 章")]),_:1}),n("的项目）")]),k,s("p",null,[g,n(" 是另一个有用的功能：按照字典顺序遍历 flag，并且对每个标签调用 fn （参考 "),e(a,{to:"/the-way-to-go/15.8.html"},{default:o(()=>[n("15.8 章")]),_:1}),n("的例子）")]),v,s("p",null,[n("在"),e(a,{to:"/the-way-to-go/15.8.html"},{default:o(()=>[n("第 15.8 章")]),_:1}),n("你将找到一个具体的例子。")]),m,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:o(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/12.3.html"},{default:o(()=>[n("文件拷贝")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/12.5.html"},{default:o(()=>[n("用 buffer 读取文件")]),_:1})])])])}const q=c(d,[["render",f],["__file","12.4.html.vue"]]);export{q as default};
