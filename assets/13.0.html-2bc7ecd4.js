import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as p,a,b as n,d as e,w as t,e as i}from"./app-9da01d16.js";const r={},u=a("h1",{id:"_13-0-错误处理与测试",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_13-0-错误处理与测试","aria-hidden":"true"},"#"),n(" 13.0 错误处理与测试")],-1),d=a("code",null,"try/catch",-1),_=a("code",null,"defer-panic-and-recover",-1),h=i(`<p>Go 的设计者觉得 <code>try/catch</code> 机制的使用太泛滥了，而且从底层向更高的层级抛异常太耗费资源。他们给 Go 设计的机制也可以“捕捉”异常，但是更轻量，并且只应该作为（处理错误的）最后的手段。</p><p>Go 是怎么处理普通错误的呢？通过在函数和方法中返回错误对象作为它们的唯一或最后一个返回值——如果返回 <code>nil</code>，则没有错误发生——并且主调 (calling) 函数总是应该检查收到的错误。</p><p><strong>永远不要忽略错误，否则可能会导致程序崩溃！！</strong></p><p>处理错误并且在函数发生错误的地方给用户返回错误信息：照这样处理就算真的出了问题，你的程序也能继续运行并且通知给用户。<code>panic()</code> 和 <code>recover()</code> 是用来处理真正的异常（无法预测的错误）而不是普通的错误。</p><p>库函数通常必须返回某种错误提示给主调函数。</p><p>在前面的章节中我们了解了 Go 检查和报告错误条件的惯有方式：</p><ul><li><p>产生错误的函数会返回两个变量，一个值和一个错误码；如果后者是 <code>nil</code> 就是成功，非 <code>nil</code> 就是发生了错误。</p></li><li><p>为了防止发生错误时正在执行的函数（如果有必要的话甚至会是整个程序）被中止，在调用函数后必须检查错误。</p></li></ul><p>下面这段来自 <code>pack1</code> 包的代码 <code>Func1()</code> 测试了它的返回值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Func1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %s in pack1.Func1 with parameter %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span>
	<span class="token keyword">return</span>    <span class="token comment">// or: return err</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token comment">// Process(value)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>为了更清晰的代码，应该总是使用包含错误值变量的 if 复合语句</em></p>`,10),k=a("code",null,"fmt.Printf()",-1),m=a("code",null,"log",-1),f=a("code",null,"panic()",-1),v=a("h2",{id:"链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function g(w,y){const s=c("RouterLink");return l(),p("div",null,[u,a("p",null,[n("Go 没有像 Java 和 .NET 那样的 "),d,n(" 异常机制：不能执行抛异常操作。但是有一套 "),_,n(" 机制（参见 "),e(s,{to:"/the-way-to-go/13.2.html"},{default:t(()=>[n("13.2")]),_:1}),n("-"),e(s,{to:"/the-way-to-go/13.3.html"},{default:t(()=>[n("13.3")]),_:1}),n(" 节）。")]),h,a("p",null,[n("上例除了 "),k,n(" 还可以使用 "),m,n(" 中对应的方法（参见 "),e(s,{to:"/the-way-to-go/13.3.html"},{default:t(()=>[n("13.3")]),_:1}),n(" 节和 "),e(s,{to:"/the-way-to-go/15.2.html"},{default:t(()=>[n("15.2")]),_:1}),n(" 节），如果程序中止也没关系的话甚至可以使用 "),f,n("（参见后面的章节）。")]),v,a("ul",null,[a("li",null,[e(s,{to:"/the-way-to-go/directory.html"},{default:t(()=>[n("目录")]),_:1})]),a("li",null,[n("上一节："),e(s,{to:"/the-way-to-go/12.12.html"},{default:t(()=>[n("Go 中的密码学")]),_:1})]),a("li",null,[n("下一节："),e(s,{to:"/the-way-to-go/13.1.html"},{default:t(()=>[n("错误处理")]),_:1})])])])}const G=o(r,[["render",g],["__file","13.0.html.vue"]]);export{G as default};
