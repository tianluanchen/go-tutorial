import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as s,b as n,d as t,w as e,e as o}from"./app-9da01d16.js";const u={},d=o(`<h1 id="版本-3-添加协程" tabindex="-1"><a class="header-anchor" href="#版本-3-添加协程" aria-hidden="true">#</a> 版本 3 - 添加协程</h1><p>第 3 个版本的代码 <em>goto_v3</em> 见 <a href="examples/chapter_19/goto_v3">goto_v3</a>。</p><h1 id="_19-6-用协程优化性能" tabindex="-1"><a class="header-anchor" href="#_19-6-用协程优化性能" aria-hidden="true">#</a> 19.6 用协程优化性能</h1><p>如果有太多客户端同时尝试添加 URL，第 2 个版本依旧存在性能问题。得益于锁机制，我们的 <code>map</code> 可以在并发访问环境下安全地更新，但每条新产生的记录都要立即写入磁盘，这种机制成为了瓶颈。写入操作可能同时发生，根据不同操作系统的特性，可能会产生数据损坏。就算不产生写入冲突，每个客户端在 <code>Put()</code> 函数返回前，必须等待数据写入磁盘。因此，在一个 I/O 负载很高的系统中，客户端为了完成 <code>Add()</code> 请求，将等待更长的不必要的时间。</p><p>为缓解该问题，必须对 <code>Put()</code> 和存储进程<em>解耦</em>：我们将使用 Go 的并发机制。我们不再将记录直接写入磁盘，而是发送到一个<em>通道</em>中，它是某种形式的缓冲区，因而发送函数不必等待它完成。</p><p>保存进程会从该通道读取数据并写入磁盘。它是以 <code>saveLoop()</code> 协程启动的独立线程。现在 <code>main()</code> 和 <code>saveLoop()</code> 并行地执行，不会再发生阻塞。</p><p>将 <code>URLStore</code> 的 <code>file</code> 字段替换为 <code>record</code> 类型的通道：<code>save chan record</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> URLStore <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	urls <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	mu sync<span class="token punctuation">.</span>RWMutex
	save <span class="token keyword">chan</span> record
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通道和 <code>map</code> 一样，必须用 <code>make()</code> 创建。我们会以此修改 <code>NewURLStore()</code> 工厂函数，并给定缓冲区大小为 1000，例如：<code>save := make(chan record, saveQueueLength)</code>。为解决性能问题，<code>Put</code> 可以发送记录 <code>record</code> 到带缓冲的 <code>save</code> 通道：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		key <span class="token operator">:=</span> <span class="token function">genKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			s<span class="token punctuation">.</span>save <span class="token operator">&lt;-</span> record<span class="token punctuation">{</span>key<span class="token punctuation">,</span> url<span class="token punctuation">}</span>
			<span class="token keyword">return</span> key
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;shouldn&#39;t get here&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>save</code> 通道的另一端必须有一个接收者：新的 <code>saveLoop()</code> 方法在独立的协程中运行，它接收 <code>record</code> 值并将它们写入到文件。<code>saveLoop()</code> 是在 <code>NewURLStore()</code> 函数中用 <code>go</code> 关键字启动的。现在，可以移除不必要的打开文件的代码。以下是修改后的 <code>NewURLStore()</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> saveQueueLength <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token keyword">func</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>URLStore <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token operator">&amp;</span>URLStore<span class="token punctuation">{</span>
		urls<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		save<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> record<span class="token punctuation">,</span> saveQueueLength<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error loading URLStore:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> s<span class="token punctuation">.</span><span class="token function">saveLoop</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>saveLoop()</code> 方法的代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>URLStore<span class="token punctuation">)</span> <span class="token function">saveLoop</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">&quot;URLStore:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	e <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// taking a record from the channel and encoding it</span>
		r <span class="token operator">:=</span> <span class="token operator">&lt;-</span>s<span class="token punctuation">.</span>save
		<span class="token keyword">if</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;URLStore:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在无限循环中，记录从 <code>save</code> 通道读取，然后编码到文件中。</p>`,15),r=s("code",null,"Encoder",-1),k=s("code",null,'import "flag"',-1),v=o(`<p>先创建一些全局变量来保存 flag 的值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token punctuation">(</span>
	listenAddr <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http listen address&quot;</span><span class="token punctuation">)</span>
	dataFile <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;store.gob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data store file name&quot;</span><span class="token punctuation">)</span>
	hostname <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:8080&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;host name and port&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m=s("code",null,"flag.Parse()",-1),g=s("code",null,"main()",-1),b=s("code",null,"URLStore",-1),f=s("code",null,"dataFile",-1),h=s("code",null,"*dataFile",-1),_=o(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> store <span class="token operator">*</span>URLStore
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	store <span class="token operator">=</span> <span class="token function">NewURLStore</span><span class="token punctuation">(</span><span class="token operator">*</span>dataFile<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> Redirect<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token operator">*</span>listenAddr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 <code>Add()</code> 处理函数中须用 <code>*hostname</code> 替换 <code>localhost:8080</code>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;http://%s/%s&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>hostname<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译或直接使用现有的可执行程序测试第 3 个版本。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,5);function w(y,q){const a=c("RouterLink");return l(),i("div",null,[d,s("p",null,[n("我们在 "),t(a,{to:"/the-way-to-go/14.0.html"},{default:e(()=>[n("14 章")]),_:1}),n(" 深入学习了协程和通道，但在这里我们见到了实用的案例，更好地管理程序的不同部分。注意现在 "),r,n(" 对象只被创建一次，而不是每次保存时都创建，这也可以节省了一些内存和运算处理。")]),s("p",null,[n("还有一个改进可以使 goto 更灵活：我们可以将文件名、监听地址和主机名定义为标志 (flag)，来代替在程序中硬编码或定义常量。这样当程序启动时，可以在命令行中指定它们的新值，如果没有指定，将采用 flag 的默认值。该功能来自另一个包，所以需要 "),k,n("（这个包的更详细信息见 "),t(a,{to:"/the-way-to-go/12.4.html"},{default:e(()=>[n("12.4 节")]),_:1}),n("）。")]),v,s("p",null,[n("为了处理命令行参数，必须把 "),m,n(" 添加到 "),g,n(" 函数中，在 flag 解析后才能实例化 "),b,n("，一旦得知了 "),f,n(" 的值（在代码中使用了 "),h,n("，因为 flag 是指针类型必须解除引用来获取值，见 "),t(a,{to:"/the-way-to-go/04.9.html"},{default:e(()=>[n("4.9 节")]),_:1}),n("）：")]),_,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/19.5.html"},{default:e(()=>[n("持久化存储：gob")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/19.7.html"},{default:e(()=>[n("以 json 格式存储")]),_:1})])])])}const S=p(u,[["render",w],["__file","19.6.html.vue"]]);export{S as default};
