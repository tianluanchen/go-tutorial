import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,a,b as n,d as t,w as e,e as p}from"./app-9da01d16.js";const l={},d=p(`<h1 id="_8-1-声明、初始化和-make" tabindex="-1"><a class="header-anchor" href="#_8-1-声明、初始化和-make" aria-hidden="true">#</a> 8.1 声明、初始化和 make</h1><h2 id="_8-1-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-1-1-概念" aria-hidden="true">#</a> 8.1.1 概念</h2><p><code>map</code> 是引用类型，可以使用如下声明：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> map1 <span class="token keyword">map</span><span class="token punctuation">[</span>keytype<span class="token punctuation">]</span>valuetype
<span class="token keyword">var</span> map1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（<code>[keytype]</code> 和 <code>valuetype</code> 之间允许有空格，但是 gofmt 移除了空格）</p><p>在声明的时候不需要知道 <code>map</code> 的长度，<code>map</code> 是可以动态增长的。</p><p>未初始化的 <code>map</code> 的值是 <code>nil</code>。</p><p>key 可以是任意可以用 <code>==</code> 或者 <code>!=</code> 操作符比较的类型，比如 <code>string</code>、<code>int</code>、<code>float32(64)</code>。所以数组、切片和结构体不能作为 key (译者注：含有数组切片的结构体不能作为 key，只包含内建类型的 <code>struct</code> 是可以作为 key 的），但是指针和接口类型可以。如果要用结构体作为 key 可以提供 <code>Key()</code> 和 <code>Hash()</code> 方法，这样可以通过结构体的域计算出唯一的数字或者字符串的 key。</p>`,8),k=a("p",null,[a("code",null,"map"),n(" 传递给函数的代价很小：在 32 位机器上占 4 个字节，64 位机器上占 8 个字节，无论实际上存储了多少数据。通过 key 在 "),a("code",null,"map"),n(" 中寻找值是很快的，比线性查找快得多，但是仍然比从数组和切片的索引中直接读取要慢 100 倍；所以如果你很在乎性能的话还是建议用切片来解决问题。")],-1),r=a("code",null,"map",-1),m=p(`<p>如果 <code>key1</code> 是 <code>map1</code> 的 key，那么 <code>map1[key1]</code> 就是对应 <code>key1</code> 的值，就如同数组索引符号一样（数组可以视为一种简单形式的 <code>map</code>，key 是从 0 开始的整数）。</p><p><code>key1</code> 对应的值可以通过赋值符号来设置为 val1：<code>map1[key1] = val1</code>。</p><p>令 <code>v := map1[key1]</code> 可以将 <code>key1</code> 对应的值赋值给 <code>v</code>；如果 <code>map</code> 中没有 <code>key1</code> 存在，那么 <code>v</code> 将被赋值为 <code>map1</code> 的值类型的空值。</p><p>常用的 <code>len(map1)</code> 方法可以获得 <code>map</code> 中的 pair 数目，这个数目是可以伸缩的，因为 map-pairs 在运行时可以动态添加和删除。</p><p>示例 8.1 <a href="examples/chapter_8/make_maps.go">make_maps.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> mapLit <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token comment">//var mapCreated map[string]float32</span>
	<span class="token keyword">var</span> mapAssigned <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>

	mapLit <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
	mapCreated <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">)</span>
	mapAssigned <span class="token operator">=</span> mapLit

	mapCreated<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4.5</span>
	mapCreated<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.14159</span>
	mapAssigned<span class="token punctuation">[</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Map literal at \\&quot;one\\&quot; is: %d\\n&quot;</span><span class="token punctuation">,</span> mapLit<span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Map created at \\&quot;key2\\&quot; is: %f\\n&quot;</span><span class="token punctuation">,</span> mapCreated<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Map assigned at \\&quot;two\\&quot; is: %d\\n&quot;</span><span class="token punctuation">,</span> mapLit<span class="token punctuation">[</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Map literal at \\&quot;ten\\&quot; is: %d\\n&quot;</span><span class="token punctuation">,</span> mapLit<span class="token punctuation">[</span><span class="token string">&quot;ten&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><pre><code>Map literal at &quot;one&quot; is: 1
Map created at &quot;key2&quot; is: 3.141590
Map assigned at &quot;two&quot; is: 3
Mpa literal at &quot;ten&quot; is: 0
</code></pre><p><code>mapLit</code> 说明了 <code>map literals</code> 的使用方法： <code>map</code> 可以用 <code>{key1: val1, key2: val2}</code> 的描述方法来初始化，就像数组和结构体一样。</p><p><code>map</code> 是 <strong>引用类型</strong> 的： 内存用 <code>make()</code> 方法来分配。</p><p><code>map</code> 的初始化：<code>var map1 = make(map[keytype]valuetype)</code>。</p><p>或者简写为：<code>map1 := make(map[keytype]valuetype)</code>。</p><p>上面例子中的 <code>mapCreated</code> 就是用这种方式创建的：<code>mapCreated := make(map[string]float32)</code>。</p><p>相当于：<code>mapCreated := map[string]float32{}</code>。</p><p><code>mapAssigned</code> 也是 <code>mapLit</code> 的引用，对 <code>mapAssigned</code> 的修改也会影响到 <code>mapLit</code> 的值。</p><p><strong>不要使用 <code>new()</code>，永远用 <code>make()</code> 来构造 <code>map</code></strong></p><p><strong>注意</strong> 如果你错误地使用 <code>new()</code> 分配了一个引用对象，你会获得一个空引用的指针，相当于声明了一个未初始化的变量并且取了它的地址：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mapCreated <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来当我们调用：<code>mapCreated[&quot;key1&quot;] = 4.5</code> 的时候，编译器会报错：</p><pre><code>invalid operation: mapCreated[&quot;key1&quot;] (index of type *map[string]float32).
</code></pre><p>为了说明值可以是任意类型的，这里给出了一个使用 <code>func() int</code> 作为值的 <code>map</code>：</p><p>示例 8.2 <a href="examples/chapter_8/map_func.go">map_func.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mf <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token number">5</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mf<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：<code>map[1:0x10903be0 5:0x10903ba0 2:0x10903bc0]</code>: 整型都被映射到函数地址。</p><h2 id="_8-1-2-map-容量" tabindex="-1"><a class="header-anchor" href="#_8-1-2-map-容量" aria-hidden="true">#</a> 8.1.2 map 容量</h2><p>和数组不同，<code>map</code> 可以根据新增的 key-value 对动态的伸缩，因此它不存在固定长度或者最大限制。但是你也可以选择标明 <code>map</code> 的初始容量 <code>capacity</code>，就像这样：<code>make(map[keytype]valuetype, cap)</code>。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>map2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当 <code>map</code> 增长到容量上限的时候，如果再增加新的 key-value 对，<code>map</code> 的大小会自动加 1。所以出于性能的考虑，对于大的 <code>map</code> 或者会快速扩张的 <code>map</code>，即使只是大概知道容量，也最好先标明。</p><p>这里有一个 <code>map</code> 的具体例子，即将音阶和对应的音频映射起来：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>noteFrequency <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span> <span class="token punctuation">{</span>
	<span class="token string">&quot;C0&quot;</span><span class="token punctuation">:</span> <span class="token number">16.35</span><span class="token punctuation">,</span> <span class="token string">&quot;D0&quot;</span><span class="token punctuation">:</span> <span class="token number">18.35</span><span class="token punctuation">,</span> <span class="token string">&quot;E0&quot;</span><span class="token punctuation">:</span> <span class="token number">20.60</span><span class="token punctuation">,</span> <span class="token string">&quot;F0&quot;</span><span class="token punctuation">:</span> <span class="token number">21.83</span><span class="token punctuation">,</span>
	<span class="token string">&quot;G0&quot;</span><span class="token punctuation">:</span> <span class="token number">24.50</span><span class="token punctuation">,</span> <span class="token string">&quot;A0&quot;</span><span class="token punctuation">:</span> <span class="token number">27.50</span><span class="token punctuation">,</span> <span class="token string">&quot;B0&quot;</span><span class="token punctuation">:</span> <span class="token number">30.87</span><span class="token punctuation">,</span> <span class="token string">&quot;A4&quot;</span><span class="token punctuation">:</span> <span class="token number">440</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-1-3-用切片作为-map-的值" tabindex="-1"><a class="header-anchor" href="#_8-1-3-用切片作为-map-的值" aria-hidden="true">#</a> 8.1.3 用切片作为 map 的值</h2><p>既然一个 key 只能对应一个 value，而 value 又是一个原始类型，那么如果一个 key 要对应多个值怎么办？例如，当我们要处理 Unix 机器上的所有进程，以父进程（pid 为整型）作为 key，所有的子进程（以所有子进程的 pid 组成的切片）作为 value。通过将 value 定义为 <code>[]int</code> 类型或者其他类型的切片，就可以优雅地解决这个问题。</p><p>这里有一些定义这种 <code>map</code> 的例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mp1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
mp2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,35);function v(g,b){const s=c("RouterLink");return i(),u("div",null,[d,a("p",null,[n("value 可以是任意类型的；通过使用空接口类型（详见"),t(s,{to:"/the-way-to-go/11.9.html"},{default:e(()=>[n("第 11.9 节")]),_:1}),n("），我们可以存储任意值，但是使用这种类型作为值时需要先做一次类型断言（详见"),t(s,{to:"/the-way-to-go/11.3.html"},{default:e(()=>[n("第 11.3 节")]),_:1}),n("）。")]),k,a("p",null,[r,n(" 也可以用函数作为自己的值，这样就可以用来做分支结构（详见"),t(s,{to:"/the-way-to-go/05.0.html"},{default:e(()=>[n("第 5 章")]),_:1}),n("）：key 用来选择要执行的函数。")]),m,a("ul",null,[a("li",null,[t(s,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),a("li",null,[n("上一节："),t(s,{to:"/the-way-to-go/08.0.html"},{default:e(()=>[n("Map")]),_:1})]),a("li",null,[n("下一节："),t(s,{to:"/the-way-to-go/08.2.html"},{default:e(()=>[n("测试键值对是否存在及删除元素")]),_:1})])])])}const q=o(l,[["render",v],["__file","08.1.html.vue"]]);export{q as default};
