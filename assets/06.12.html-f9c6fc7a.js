import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as s,b as n,d as t,w as e,e as l}from"./app-9da01d16.js";const u={},r=s("h1",{id:"_6-12-通过内存缓存来提升性能",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_6-12-通过内存缓存来提升性能","aria-hidden":"true"},"#"),n(" 6.12 通过内存缓存来提升性能")],-1),d=s("p",null,[n("要计算数列中第 n 个数字，需要先得到之前两个数的值，但很明显绝大多数情况下前两个数的值都是已经计算过的。即每个更后面的数都是基于之前计算结果的重复计算，正如示例 6.11 "),s("a",{href:"examples/chapter_6/fibonacci.go"},"fibonnaci.go"),n(" 所展示的那样。")],-1),k=s("p",null,[n("程序 Listing 6.17 - "),s("a",{href:"examples/chapter_6/fibonacci_memoization.go"},"fibonacci_memoization.go"),n(" 就是依照这个原则实现的，下面是计算到第 40 位数字的性能对比：")],-1),m=s("ul",null,[s("li",null,"普通写法：4.730270 秒"),s("li",null,"内存缓存：0.001000 秒")],-1),v=s("code",null,"map",-1),b=s("a",{href:"examples/chapter_6/fibonacci_memoization.go"},"fibonacci_memoization.go",-1),f=l(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> LIM <span class="token operator">=</span> <span class="token number">41</span>

<span class="token keyword">var</span> fibs <span class="token punctuation">[</span>LIM<span class="token punctuation">]</span><span class="token builtin">uint64</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> result <span class="token builtin">uint64</span> <span class="token operator">=</span> <span class="token number">0</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LIM<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;fibonacci(%d) is: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	delta <span class="token operator">:=</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;longCalculation took this amount of time: %s\\n&quot;</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>res <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// memoization: check if fibonacci(n) is already known in array:</span>
	<span class="token keyword">if</span> fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		res <span class="token operator">=</span> fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		res <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		res <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fibs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> res
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存缓存的技术在使用计算成本相对昂贵的函数时非常有用（不仅限于例子中的递归），譬如大量进行相同参数的运算。这种技术还可以应用于纯函数中，即相同输入必定获得相同输出的函数。</p><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,3);function _(h,g){const a=p("RouterLink");return i(),c("div",null,[r,s("p",null,[n("当在进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。最明显的例子就是生成斐波那契数列的程序（详见第 "),t(a,{to:"/the-way-to-go/06.6.html"},{default:e(()=>[n("6.6")]),_:1}),n(" 和 "),t(a,{to:"/the-way-to-go/06.11.html"},{default:e(()=>[n("6.11")]),_:1}),n(" 节）：")]),d,s("p",null,[n("而我们要做就是将第 n 个数的值存在数组中索引为 n 的位置（详见"),t(a,{to:"/the-way-to-go/07.0.html"},{default:e(()=>[n("第 7 章")]),_:1}),n("），然后在数组中查找是否已经计算过，如果没有找到，则再进行计算。")]),k,m,s("p",null,[n("内存缓存的优势显而易见，而且您还可以将它应用到其它类型的计算中，例如使用 "),v,n("（详见"),t(a,{to:"/the-way-to-go/07.0.html"},{default:e(()=>[n("第 7 章")]),_:1}),n("）而不是数组或切片（Listing 6.21 - "),b,n("）：")]),f,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/06.11.html"},{default:e(()=>[n("计算函数执行时间")]),_:1})]),s("li",null,[n("下一章："),t(a,{to:"/the-way-to-go/07.0.html"},{default:e(()=>[n("数组与切片")]),_:1})])])])}const x=o(u,[["render",_],["__file","06.12.html.vue"]]);export{x as default};
