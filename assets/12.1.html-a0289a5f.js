import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a as s,b as n,d as t,w as e,e as o}from"./app-9da01d16.js";const u={},d=o(`<h1 id="_12-1-读取用户的输入" tabindex="-1"><a class="header-anchor" href="#_12-1-读取用户的输入" aria-hidden="true">#</a> 12.1 读取用户的输入</h1><p>我们如何读取用户的键盘（控制台）输入呢？从键盘和标准输入 <code>os.Stdin</code> 读取输入，最简单的办法是使用 <code>fmt</code> 包提供的 <code>Scan...</code> 和 <code>Sscan...</code> 开头的函数。请看以下程序：</p><p>示例 12.1 <a href="examples/chapter_12/readinput1.go">readinput1.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 从控制台读取输入:</span>
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> s <span class="token builtin">string</span>
   i <span class="token builtin">int</span>
   f <span class="token builtin">float32</span>
   input <span class="token operator">=</span> <span class="token string">&quot;56.12 / 5212 / Go&quot;</span>
   format <span class="token operator">=</span> <span class="token string">&quot;%f / %d / %s&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter your full name: &quot;</span><span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>firstName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lastName<span class="token punctuation">)</span>
   <span class="token comment">// fmt.Scanf(&quot;%s %s&quot;, &amp;firstName, &amp;lastName)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hi %s %s!\\n&quot;</span><span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token comment">// Hi Chris Naegels</span>
   fmt<span class="token punctuation">.</span><span class="token function">Sscanf</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> format<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;From the string we read: &quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    <span class="token comment">// 输出结果: From the string we read: 56.12 5212 Go</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Scanln()</code> 扫描来自标准输入的文本，将空格分隔的值依次存放到后续的参数内，直到碰到换行。<code>Scanf()</code> 与其类似，除了 <code>Scanf()</code> 的第一个参数用作格式字符串，用来决定如何读取。<code>Sscan...</code> 和以 <code>Sscan...</code> 开头的函数则是从字符串读取，除此之外，与 <code>Scanf()</code> 相同。如果这些函数读取到的结果与您预想的不同，您可以检查成功读入数据的个数和返回的错误。</p><p>您也可以使用 <code>bufio</code> 包提供的缓冲读取器 (buffered reader) 来读取数据，正如以下例子所示：</p><p>示例 12.2 <a href="examples/chapter_12/readinput2.go">readinput2.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;bufio&quot;</span>
    <span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> inputReader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader
<span class="token keyword">var</span> input <span class="token builtin">string</span>
<span class="token keyword">var</span> err <span class="token builtin">error</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputReader <span class="token operator">=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter some input: &quot;</span><span class="token punctuation">)</span>
    input<span class="token punctuation">,</span> err <span class="token operator">=</span> inputReader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The input was: %s\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inputReader</code> 是一个指向 <code>bufio.Reader</code> 的指针。<code>inputReader := bufio.NewReader(os.Stdin)</code> 这行代码，将会创建一个读取器，并将其与标准输入绑定。</p><p><code>bufio.NewReader()</code> 构造函数的签名为：<code>func NewReader(rd io.Reader) *Reader</code></p>`,10),r=s("code",null,"io.Reader",-1),k=s("code",null,"Read()",-1),m=s("code",null,"io.Reader",-1),v=s("code",null,"os.Stdin",-1),b=o(`<p>返回的读取器对象提供一个方法 <code>ReadString(delim byte)</code>，该方法从输入中读取内容，直到碰到 <code>delim</code> 指定的字符，然后将读取到的内容连同 <code>delim</code> 字符一起放到缓冲区。</p><p><code>ReadString</code> 返回读取到的字符串，如果碰到错误则返回 <code>nil</code>。如果它一直读到文件结束，则返回读取到的字符串和 <code>io.EOF</code>。如果读取过程中没有碰到 <code>delim</code> 字符，将返回错误 <code>err != nil</code>。</p><p>在上面的例子中，我们会读取键盘输入，直到回车键 (<code>\\n</code>) 被按下。</p><p>屏幕是标准输出 <code>os.Stdout</code>；<code>os.Stderr</code> 用于显示错误信息，大多数情况下等同于 <code>os.Stdout</code>。</p><p>一般情况下，我们会省略变量声明，而使用 <code>:=</code>，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>inputReader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
input<span class="token punctuation">,</span> err <span class="token operator">:=</span> inputReader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将从现在开始使用这种写法。</p><p>第二个例子从键盘读取输入，使用了 <code>switch</code> 语句：</p><p>示例 12.3 <a href="examples/chapter_12/switch_input.go">switch_input.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os&quot;</span>
    <span class="token string">&quot;bufio&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inputReader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter your name:&quot;</span><span class="token punctuation">)</span>
    input<span class="token punctuation">,</span> err <span class="token operator">:=</span> inputReader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;There were errors reading, exiting program.&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Your name is %s&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>
    <span class="token comment">// For Unix: test with delimiter &quot;\\n&quot;, for Windows: test with &quot;\\r\\n&quot;</span>
    <span class="token keyword">switch</span> input <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Philip\\r\\n&quot;</span><span class="token punctuation">:</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome Philip!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Chris\\r\\n&quot;</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome Chris!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Ivo\\r\\n&quot;</span><span class="token punctuation">:</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome Ivo!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;You are not welcome here! Goodbye!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// version 2:   </span>
    <span class="token keyword">switch</span> input <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Philip\\r\\n&quot;</span><span class="token punctuation">:</span>  <span class="token keyword">fallthrough</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Ivo\\r\\n&quot;</span><span class="token punctuation">:</span>     <span class="token keyword">fallthrough</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Chris\\r\\n&quot;</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome %s\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;You are not welcome here! Goodbye!\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// version 3:</span>
    <span class="token keyword">switch</span> input <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;Philip\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ivo\\r\\n&quot;</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome %s\\n&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;You are not welcome here! Goodbye!\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Unix 和 Windows 的行结束符是不同的！</p><p><strong>练习</strong></p><p><strong>练习 12.1:</strong> <a href="exercises/chapter_12/word_letter_count.go">word_letter_count.go</a></p><p>编写一个程序，从键盘读取输入。当用户输入 &#39;S&#39; 的时候表示输入结束，这时程序输出 3 个数字：<br> i) 输入的字符的个数，包括空格，但不包括 <code>&#39;\\r&#39;</code> 和 <code>&#39;\\n&#39;</code><br> ii) 输入的单词的个数<br> iii) 输入的行数</p><p><strong>练习 12.2:</strong> <a href="exercises/chapter_12/calculator.go">calculator.go</a></p>`,15),f=s("br",null,null,-1),g=s("code",null,"number1 ENTER number2 ENTER operator ENTER --> 显示结果",-1),h=s("br",null,null,-1),q=s("code",null,"'q'",-1),w=s("code",null,"stack",-1),_=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function y(R,S){const a=c("RouterLink");return i(),l("div",null,[d,s("p",null,[n("该函数的实参可以是满足 "),r,n(" 接口的任意对象（任意包含有适当的 "),k,n(" 方法的对象，请参考"),t(a,{to:"/the-way-to-go/11.8.html"},{default:e(()=>[n("章节 11.8")]),_:1}),n("），函数返回一个新的带缓冲的 "),m,n(" 对象，它将从指定读取器（例如 "),v,n("）读取内容。")]),b,s("p",null,[n("编写一个简单的逆波兰式计算器，它接受用户输入的整型数（最大值 999999）和运算符 +、-、*、/。"),f,n(" 输入的格式为："),g,h,n(" 当用户输入字符 "),q,n(" 时，程序结束。请使用您在"),t(a,{to:"/the-way-to-go/11.12.html"},{default:e(()=>[n("练习 11.13")]),_:1}),n(" 中开发的 "),w,n(" 包。")]),_,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/12.0.html"},{default:e(()=>[n("读写数据")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/12.2.html"},{default:e(()=>[n("文件读写")]),_:1})])])])}const x=p(u,[["render",y],["__file","12.1.html.vue"]]);export{x as default};
