import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as l,a as s,d as e,w as o,b as n,e as i}from"./app-9da01d16.js";const r={},d=i(`<h1 id="_16-1-误用短声明导致变量覆盖" tabindex="-1"><a class="header-anchor" href="#_16-1-误用短声明导致变量覆盖" aria-hidden="true">#</a> 16.1 误用短声明导致变量覆盖</h1><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> remember <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">if</span> something <span class="token punctuation">{</span>
    remember <span class="token operator">:=</span> <span class="token boolean">true</span> <span class="token comment">//错误</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用remember</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此代码段中，<code>remember</code> 变量永远不会在 <code>if</code> 语句外面变成 <code>true</code>，如果 <code>something</code> 为 <code>true</code>，由于使用了短声明 <code>:=</code>，<code>if</code> 语句内部的新变量 <code>remember</code> 将覆盖外面的 <code>remember</code> 变量，并且该变量的值为 <code>true</code>，但是在 <code>if</code> 语句外面，变量 <code>remember</code> 的值变成了 <code>false</code>，所以正确的写法应该是：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> something <span class="token punctuation">{</span>
    remember <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此类错误也容易在 <code>for</code> 循环中出现，尤其当函数返回一个具名变量时难于察觉，例如以下的代码段：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">check1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// x 是新创建变量，err 是被赋值</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token comment">// 正确返回 err</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> y<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">check2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// y 和 if 语句中 err 被创建</span>
		<span class="token keyword">return</span> <span class="token comment">// if 语句中的 err 覆盖外面的 err，所以错误的返回 nil ！</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,7);function u(k,m){const a=c("RouterLink");return p(),l("div",null,[d,s("ul",null,[s("li",null,[e(a,{to:"/the-way-to-go/directory.html"},{default:o(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),e(a,{to:"/the-way-to-go/16.0.html"},{default:o(()=>[n("常见的陷阱与错误")]),_:1})]),s("li",null,[n("下一节："),e(a,{to:"/the-way-to-go/16.2.html"},{default:o(()=>[n("误用字符串")]),_:1})])])])}const h=t(r,[["render",u],["__file","16.1.html.vue"]]);export{h as default};
