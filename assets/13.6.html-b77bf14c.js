import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as s,d as t,w as p,b as n,e as i}from"./app-9da01d16.js";const u={},r=i(`<h1 id="_13-6-启动外部命令和程序" tabindex="-1"><a class="header-anchor" href="#_13-6-启动外部命令和程序" aria-hidden="true">#</a> 13.6 启动外部命令和程序</h1><p><code>os</code> 包有一个 <code>StartProcess</code> 函数可以调用或启动外部系统命令和二进制可执行文件；它的第一个参数是要运行的进程，第二个参数用来传递选项或参数，第三个参数是含有系统环境基本信息的结构体。</p><p>这个函数返回被启动进程的 id (pid)，或者启动失败返回错误。</p><p><code>exec</code> 包中也有同样功能的更简单的结构体和函数；主要是 <code>exec.Command(name string, arg ...string)</code> 和 <code>Run()</code>。首先需要用系统命令或可执行文件的名字创建一个 <code>Command</code> 对象，然后用这个对象作为接收者调用 <code>Run()</code>。下面的程序（因为是执行 Linux 命令，只能在 Linux 下面运行）演示了它们的使用：</p><p>示例 13.6 <a href="examples/chapter_13/exec.go">exec.go</a>：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// exec.go</span>
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os/exec&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 1) os.StartProcess //</span>
<span class="token comment">/*********************/</span>
<span class="token comment">/* Linux: */</span>
env <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
procAttr <span class="token operator">:=</span> <span class="token operator">&amp;</span>os<span class="token punctuation">.</span>ProcAttr<span class="token punctuation">{</span>
			Env<span class="token punctuation">:</span> env<span class="token punctuation">,</span>
			Files<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">{</span>
				os<span class="token punctuation">.</span>Stdin<span class="token punctuation">,</span>
				os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span>
				os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
<span class="token comment">// 1st example: list files</span>
pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/ls&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> procAttr<span class="token punctuation">)</span>  
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v starting process!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token comment">//</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The process id is %v&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>The process id is <span class="token operator">&amp;</span><span class="token punctuation">{</span><span class="token number">2054</span> <span class="token number">0</span><span class="token punctuation">}</span>total <span class="token number">2056</span>
<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> ivo ivo <span class="token number">1157555</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo    <span class="token number">2124</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo   <span class="token number">18528</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">48</span> Mieken_exec_go_<span class="token punctuation">.</span><span class="token number">6</span>
<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> ivo ivo  <span class="token number">913920</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token builtin">panic</span><span class="token punctuation">.</span>exe
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> ivo ivo     <span class="token number">180</span> <span class="token number">2011</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">39</span> <span class="token builtin">panic</span><span class="token punctuation">.</span><span class="token keyword">go</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 2nd example: show all processes</span>
pid<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">StartProcess</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/ps&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;ps&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-opid,ppid,comm&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> procAttr<span class="token punctuation">)</span>  

<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v starting process!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token comment">//</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The process id is %v&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 2) exec.Run //</span>
<span class="token comment">/***************/</span>
<span class="token comment">// Linux:  OK, but not for ls ?</span>
<span class="token comment">// cmd := exec.Command(&quot;ls&quot;, &quot;-l&quot;)  // no error, but doesn&#39;t show anything ?</span>
<span class="token comment">// cmd := exec.Command(&quot;ls&quot;)  		// no error, but doesn&#39;t show anything ?</span>
	cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;gedit&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// this opens a gedit-window</span>
	err <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %v executing command!&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The command is %v&quot;</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
<span class="token comment">// The command is &amp;{/bin/ls [ls -l] []  &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xf840000210 &lt;nil&gt; true [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [] [] 0xf8400128c0}</span>
<span class="token punctuation">}</span>
<span class="token comment">// in Windows: uitvoering: Error fork/exec /bin/ls: The system cannot find the path specified. starting process!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接" aria-hidden="true">#</a> 链接</h2>`,11);function k(d,m){const a=o("RouterLink");return c(),l("div",null,[r,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:p(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/13.5.html"},{default:p(()=>[n("一种用闭包处理错误的模式")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/13.7.html"},{default:p(()=>[n("Go 中的单元测试和基准测试")]),_:1})])])])}const g=e(u,[["render",k],["__file","13.6.html.vue"]]);export{g as default};
