import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as s,a,d as o,w as i,b as e,e as d}from"./app-9da01d16.js";const c="/go-tutorial/assets/navi11-10a0afb8.png?raw=true",u={},p=d('<h1 id="_11-错误处理-调试和测试" tabindex="-1"><a class="header-anchor" href="#_11-错误处理-调试和测试" aria-hidden="true">#</a> 11 错误处理，调试和测试</h1><p>我们经常会看到很多程序员大部分的&quot;编程&quot;时间都花费在检查bug和修复bug上。无论你是在编写修改代码还是重构系统，几乎都是花费大量的时间在进行故障排除和测试，外界都觉得我们程序员是设计师，能够把一个系统从无做到有，是一项很伟大的工作，而且是相当有趣的工作，但事实上我们每天都是徘徊在排错、调试、测试之间。当然如果你有良好的习惯和技术方案来直面这些问题，那么你就有可能将排错时间减到最少，而尽可能的将时间花费在更有价值的事情上。</p><p>但是遗憾的是很多程序员不愿意在错误处理、调试和测试能力上下工夫，导致后面应用上线之后查找错误、定位问题花费更多的时间。所以我们在设计应用之前就做好错误处理规划、测试用例等，那么将来修改代码、升级系统都将变得简单。</p><p>开发Web应用过程中，错误自然难免，那么如何更好的找到错误原因，解决问题呢？11.1小节将介绍Go语言中如何处理错误，如何设计自己的包、函数的错误处理，11.2小节将介绍如何使用GDB来调试我们的程序，动态运行情况下各种变量信息，运行情况的监控和调试。</p><p>11.3小节将对Go语言中的单元测试进行深入的探讨，并示例如何来编写单元测试，Go的单元测试规则规范如何定义，以保证以后升级修改运行相应的测试代码就可以进行最小化的测试。</p><p>长期以来，培养良好的调试、测试习惯一直是很多程序员逃避的事情，所以现在你不要再逃避了，就从你现在的项目开发，从学习Go Web开发开始养成良好的习惯。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h2>',9);function h(_,f){const t=n("RouterLink");return l(),s("div",null,[p,a("ul",null,[a("li",null,[o(t,{to:"/build-web-app/preface.html"},{default:i(()=>[e("目录")]),_:1})]),a("li",null,[e("上一章: "),o(t,{to:"/build-web-app/10.4.html"},{default:i(()=>[e("第十章总结")]),_:1})]),a("li",null,[e("下一节: "),o(t,{to:"/build-web-app/11.1.html"},{default:i(()=>[e("错误处理")]),_:1})])])])}const g=r(u,[["render",h],["__file","11.0.html.vue"]]);export{g as default};
