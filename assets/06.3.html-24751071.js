import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a as s,b as n,d as t,w as e,e as p}from"./app-9da01d16.js";const u={},d=p(`<h1 id="_6-3-传递变长参数" tabindex="-1"><a class="header-anchor" href="#_6-3-传递变长参数" aria-hidden="true">#</a> 6.3 传递变长参数</h1><p>如果函数的最后一个参数是采用 <code>...type</code> 的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> arg <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),r=s("code",null,"for",-1),k=p(`<p>示例函数和调用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>prefix <span class="token builtin">string</span><span class="token punctuation">,</span> who <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token string">&quot;hello:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Anna&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Eileen&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Greeting()</code> 函数中，变量 <code>who</code> 的值为 <code>[]string{&quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;}</code>。</p><p>如果参数被存储在一个 slice 类型的变量 <code>slice</code> 中，则可以通过 <code>slice...</code> 的形式来传递参数，调用变参函数。</p><p>示例 6.7 <a href="examples/chapter_6/varnumpar.go">varnumpar.go</a></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The minimum is: %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
	slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span>
	x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>slice<span class="token operator">...</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The minimum in the slice is: %d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	min <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		<span class="token keyword">if</span> v <span class="token operator">&lt;</span> min <span class="token punctuation">{</span>
			min <span class="token operator">=</span> v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> min
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><pre><code>The minimum is: 0
The minimum in the slice is: 1
</code></pre><p><strong>练习 6.3</strong> <a href="exercises/chapter_6/varargs.go">varargs.go</a></p><p>写一个函数，该函数接受一个变长参数并对每个元素进行换行打印。</p><p>一个接受变长参数的函数可以将这个参数作为其它函数的参数进行传递：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">F1</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">F2</span><span class="token punctuation">(</span>s<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token function">F3</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">F2</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">F3</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变长参数可以作为对应类型的 slice 进行二次传递。</p><p>但是如果变长参数的类型并不是都相同的呢？使用 5 个参数来进行传递并不是很明智的选择，有 2 种方案可以解决这个问题：</p>`,14),v=p(`<p>定义一个结构类型，假设它叫 <code>Options</code>，用以存储所有可能的参数：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Options <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	par1 type1<span class="token punctuation">,</span>
	par2 type2<span class="token punctuation">,</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 <code>F1()</code> 可以使用正常的参数 <code>a</code> 和 <code>b</code>，以及一个没有任何初始化的 <code>Options</code> 结构： <code>F1(a, b, Options {})</code>。如果需要对选项进行初始化，则可以使用 <code>F1(a, b, Options {par1:val1, par2:val2})</code>。</p>`,3),m=s("p",null,"使用空接口：",-1),b=s("code",null,"interface{}",-1),g=s("code",null,"switch",-1),f=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">typecheck</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>values … <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> v <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span> …
			<span class="token keyword">case</span> float<span class="token punctuation">:</span> …
			<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span> …
			<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span> …
			<span class="token keyword">default</span><span class="token punctuation">:</span> …
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=s("h2",{id:"链接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链接","aria-hidden":"true"},"#"),n(" 链接")],-1);function _(y,w){const a=c("RouterLink");return i(),l("div",null,[d,s("p",null,[n("这个函数接受一个类似于切片 (slice) 的参数（详见"),t(a,{to:"/the-way-to-go/07.0.html"},{default:e(()=>[n("第 7 章")]),_:1}),n("），该参数可以通过"),t(a,{to:"/the-way-to-go/05.4.html"},{default:e(()=>[n("第 5.4.4 节")]),_:1}),n(" 中提到的 "),r,n(" 循环结构迭代。")]),k,s("ol",null,[s("li",null,[s("p",null,[n("使用结构（详见"),t(a,{to:"/the-way-to-go/10.0.html"},{default:e(()=>[n("第 10 章")]),_:1}),n("）：")]),v]),s("li",null,[m,s("p",null,[n("如果一个变长参数的类型没有被指定，则可以使用默认的空接口 "),b,n("，这样就可以接受任何类型的参数（详见"),t(a,{to:"/the-way-to-go/11.9.html"},{default:e(()=>[n("第 11.9 节")]),_:1}),n(" ）。该方案不仅可以用于长度未知的参数，还可以用于任何不确定类型的参数。一般而言我们会使用一个 for-range 循环以及 "),g,n(" 结构对每个参数的类型进行判断：")]),f])]),h,s("ul",null,[s("li",null,[t(a,{to:"/the-way-to-go/directory.html"},{default:e(()=>[n("目录")]),_:1})]),s("li",null,[n("上一节："),t(a,{to:"/the-way-to-go/06.2.html"},{default:e(()=>[n("函数参数与返回值")]),_:1})]),s("li",null,[n("下一节："),t(a,{to:"/the-way-to-go/06.4.html"},{default:e(()=>[n("defer 和追踪")]),_:1})])])])}const F=o(u,[["render",_],["__file","06.3.html.vue"]]);export{F as default};
