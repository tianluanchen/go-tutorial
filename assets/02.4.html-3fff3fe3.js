const t=JSON.parse('{"key":"v-1d82e8b2","path":"/build-web-app/02.4.html","title":"2.4 struct类型","lang":"zh-CN","frontmatter":{"description":"struct Go语言中，也和C或者其他语言一样，我们可以声明新的类型，作为其它类型的属性或字段的容器。例如，我们可以创建一个自定义类型person代表一个人的实体。这个实体拥有属性：姓名和年龄。这样的类型我们称之struct。如下代码所示:### struct的匿名字段 我们上面介绍了如何定义一个struct，定义的时候是字段名与其类型一一对应，实际...","head":[["meta",{"property":"og:url","content":"https://tianluanchen.github.io/go-tutorial/build-web-app/02.4.html"}],["meta",{"property":"og:site_name","content":"Go 优选教程"}],["meta",{"property":"og:title","content":"2.4 struct类型"}],["meta",{"property":"og:description","content":"struct Go语言中，也和C或者其他语言一样，我们可以声明新的类型，作为其它类型的属性或字段的容器。例如，我们可以创建一个自定义类型person代表一个人的实体。这个实体拥有属性：姓名和年龄。这样的类型我们称之struct。如下代码所示:### struct的匿名字段 我们上面介绍了如何定义一个struct，定义的时候是字段名与其类型一一对应，实际..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-16T16:30:25.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-16T16:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.4 struct类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-16T16:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"struct","slug":"struct","link":"#struct","children":[{"level":3,"title":"struct的匿名字段","slug":"struct的匿名字段","link":"#struct的匿名字段","children":[]}]},{"level":2,"title":"links","slug":"links","link":"#links","children":[]}],"git":{"updatedTime":1694881825000,"contributors":[{"name":"tianluanchen","email":"zxl-life@outlook.com","commits":1}]},"readingTime":{"minutes":5.07,"words":1520},"filePathRelative":"build-web-app/02.4.md","autoDesc":true,"excerpt":""}');export{t as data};
